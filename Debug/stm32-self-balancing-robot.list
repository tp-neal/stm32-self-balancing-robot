
stm32-self-balancing-robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  0800d658  0800d658  0000e658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd50  0800dd50  0000f1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800dd50  0800dd50  0000ed50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd58  0800dd58  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd58  0800dd58  0000ed58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dd5c  0800dd5c  0000ed5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800dd60  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d08  200001d8  0800df38  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ee0  0800df38  0000fee0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f45e  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d0b  00000000  00000000  0002e666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a88  00000000  00000000  00032378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014ba  00000000  00000000  00033e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000519a  00000000  00000000  000352ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ce4c  00000000  00000000  0003a454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001038ce  00000000  00000000  000572a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015ab6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000831c  00000000  00000000  0015abb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00162ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d640 	.word	0x0800d640

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800d640 	.word	0x0800d640

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f78:	f001 f922 	bl	80021c0 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f7c:	f000 f84c 	bl	8001018 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f80:	f000 f9d6 	bl	8001330 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000f84:	f000 f9a4 	bl	80012d0 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000f88:	f000 f898 	bl	80010bc <MX_I2C1_Init>
	MX_TIM2_Init();
 8000f8c:	f000 f8d6 	bl	800113c <MX_TIM2_Init>
	MX_TIM3_Init();
 8000f90:	f000 f938 	bl	8001204 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	configure_imu_power();
 8000f94:	f000 fa48 	bl	8001428 <configure_imu_power>
	calibrate_imu();
 8000f98:	f000 faa2 	bl	80014e0 <calibrate_imu>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // turn led on to indicate safe usage
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2120      	movs	r1, #32
 8000fa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa4:	f001 fcf0 	bl	8002988 <HAL_GPIO_WritePin>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000fa8:	f005 fd38 	bl	8006a1c <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of imuDataMutex */
	imuDataMutexHandle = osMutexNew(&imuDataMutex_attributes);
 8000fac:	4810      	ldr	r0, [pc, #64]	@ (8000ff0 <main+0x7c>)
 8000fae:	f005 fe41 	bl	8006c34 <osMutexNew>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff4 <main+0x80>)
 8000fb6:	6013      	str	r3, [r2, #0]
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of imuDataReadySem */
	imuDataReadySemHandle = osSemaphoreNew(1, 0, &imuDataReadySem_attributes);
 8000fb8:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff8 <main+0x84>)
 8000fba:	2100      	movs	r1, #0
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f005 ff47 	bl	8006e50 <osSemaphoreNew>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ffc <main+0x88>)
 8000fc6:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001000 <main+0x8c>)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	480d      	ldr	r0, [pc, #52]	@ (8001004 <main+0x90>)
 8000fce:	f005 fd84 	bl	8006ada <osThreadNew>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8001008 <main+0x94>)
 8000fd6:	6013      	str	r3, [r2, #0]

	/* creation of imuReadTask */
	imuReadTaskHandle = osThreadNew(startIMUReadTask, NULL, &imuReadTask_attributes);
 8000fd8:	4a0c      	ldr	r2, [pc, #48]	@ (800100c <main+0x98>)
 8000fda:	2100      	movs	r1, #0
 8000fdc:	480c      	ldr	r0, [pc, #48]	@ (8001010 <main+0x9c>)
 8000fde:	f005 fd7c 	bl	8006ada <osThreadNew>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8001014 <main+0xa0>)
 8000fe6:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000fe8:	f005 fd3c 	bl	8006a64 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <main+0x78>
 8000ff0:	0800d8fc 	.word	0x0800d8fc
 8000ff4:	20000370 	.word	0x20000370
 8000ff8:	0800d90c 	.word	0x0800d90c
 8000ffc:	20000374 	.word	0x20000374
 8001000:	0800d8b4 	.word	0x0800d8b4
 8001004:	08001a65 	.word	0x08001a65
 8001008:	20000368 	.word	0x20000368
 800100c:	0800d8d8 	.word	0x0800d8d8
 8001010:	08001a75 	.word	0x08001a75
 8001014:	2000036c 	.word	0x2000036c

08001018 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b096      	sub	sp, #88	@ 0x58
 800101c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	2244      	movs	r2, #68	@ 0x44
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f009 ff73 	bl	800af12 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800102c:	463b      	mov	r3, r7
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 800103a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800103e:	f002 fc2b 	bl	8003898 <HAL_PWREx_ControlVoltageScaling>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SystemClock_Config+0x34>
		Error_Handler();
 8001048:	f000 fd82 	bl	8001b50 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800104c:	2302      	movs	r3, #2
 800104e:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001050:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001054:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001056:	2310      	movs	r3, #16
 8001058:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105a:	2302      	movs	r3, #2
 800105c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800105e:	2302      	movs	r3, #2
 8001060:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001062:	2301      	movs	r3, #1
 8001064:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8001066:	230a      	movs	r3, #10
 8001068:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800106a:	2307      	movs	r3, #7
 800106c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800106e:	2302      	movs	r3, #2
 8001070:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001072:	2302      	movs	r3, #2
 8001074:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4618      	mov	r0, r3
 800107c:	f002 fc62 	bl	8003944 <HAL_RCC_OscConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SystemClock_Config+0x72>
		Error_Handler();
 8001086:	f000 fd63 	bl	8001b50 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
 800108a:	230f      	movs	r3, #15
 800108c:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108e:	2303      	movs	r3, #3
 8001090:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800109e:	463b      	mov	r3, r7
 80010a0:	2104      	movs	r1, #4
 80010a2:	4618      	mov	r0, r3
 80010a4:	f003 f82a 	bl	80040fc <HAL_RCC_ClockConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0x9a>
		Error_Handler();
 80010ae:	f000 fd4f 	bl	8001b50 <Error_Handler>
	}
}
 80010b2:	bf00      	nop
 80010b4:	3758      	adds	r7, #88	@ 0x58
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN I2C1_Init 0 */
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */
	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <MX_I2C1_Init+0x74>)
 80010c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001134 <MX_I2C1_Init+0x78>)
 80010c4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10D19CE4;
 80010c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001130 <MX_I2C1_Init+0x74>)
 80010c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001138 <MX_I2C1_Init+0x7c>)
 80010ca:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80010cc:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <MX_I2C1_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d2:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <MX_I2C1_Init+0x74>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d8:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <MX_I2C1_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80010de:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <MX_I2C1_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <MX_I2C1_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ea:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <MX_I2C1_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <MX_I2C1_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80010f6:	480e      	ldr	r0, [pc, #56]	@ (8001130 <MX_I2C1_Init+0x74>)
 80010f8:	f001 fc76 	bl	80029e8 <HAL_I2C_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8001102:	f000 fd25 	bl	8001b50 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8001106:	2100      	movs	r1, #0
 8001108:	4809      	ldr	r0, [pc, #36]	@ (8001130 <MX_I2C1_Init+0x74>)
 800110a:	f002 fb1f 	bl	800374c <HAL_I2CEx_ConfigAnalogFilter>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_I2C1_Init+0x5c>
		Error_Handler();
 8001114:	f000 fd1c 	bl	8001b50 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001118:	2100      	movs	r1, #0
 800111a:	4805      	ldr	r0, [pc, #20]	@ (8001130 <MX_I2C1_Init+0x74>)
 800111c:	f002 fb61 	bl	80037e2 <HAL_I2CEx_ConfigDigitalFilter>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_I2C1_Init+0x6e>
		Error_Handler();
 8001126:	f000 fd13 	bl	8001b50 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */
	/* USER CODE END I2C1_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200001f4 	.word	0x200001f4
 8001134:	40005400 	.word	0x40005400
 8001138:	10d19ce4 	.word	0x10d19ce4

0800113c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800113c:	b580      	push	{r7, lr}
 800113e:	b08a      	sub	sp, #40	@ 0x28
 8001140:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */
	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800114e:	463b      	mov	r3, r7
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
 800115c:	615a      	str	r2, [r3, #20]
 800115e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */
	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001160:	4b27      	ldr	r3, [pc, #156]	@ (8001200 <MX_TIM2_Init+0xc4>)
 8001162:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001166:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001168:	4b25      	ldr	r3, [pc, #148]	@ (8001200 <MX_TIM2_Init+0xc4>)
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116e:	4b24      	ldr	r3, [pc, #144]	@ (8001200 <MX_TIM2_Init+0xc4>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 8000;
 8001174:	4b22      	ldr	r3, [pc, #136]	@ (8001200 <MX_TIM2_Init+0xc4>)
 8001176:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 800117a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117c:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <MX_TIM2_Init+0xc4>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001182:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <MX_TIM2_Init+0xc4>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001188:	481d      	ldr	r0, [pc, #116]	@ (8001200 <MX_TIM2_Init+0xc4>)
 800118a:	f003 ff9b 	bl	80050c4 <HAL_TIM_PWM_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_TIM2_Init+0x5c>
		Error_Handler();
 8001194:	f000 fcdc 	bl	8001b50 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4619      	mov	r1, r3
 80011a6:	4816      	ldr	r0, [pc, #88]	@ (8001200 <MX_TIM2_Init+0xc4>)
 80011a8:	f004 fda2 	bl	8005cf0 <HAL_TIMEx_MasterConfigSynchronization>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM2_Init+0x7a>
		Error_Handler();
 80011b2:	f000 fccd 	bl	8001b50 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b6:	2360      	movs	r3, #96	@ 0x60
 80011b8:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80011c6:	463b      	mov	r3, r7
 80011c8:	2200      	movs	r2, #0
 80011ca:	4619      	mov	r1, r3
 80011cc:	480c      	ldr	r0, [pc, #48]	@ (8001200 <MX_TIM2_Init+0xc4>)
 80011ce:	f004 f8d7 	bl	8005380 <HAL_TIM_PWM_ConfigChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM2_Init+0xa0>
		Error_Handler();
 80011d8:	f000 fcba 	bl	8001b50 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 80011dc:	463b      	mov	r3, r7
 80011de:	2204      	movs	r2, #4
 80011e0:	4619      	mov	r1, r3
 80011e2:	4807      	ldr	r0, [pc, #28]	@ (8001200 <MX_TIM2_Init+0xc4>)
 80011e4:	f004 f8cc 	bl	8005380 <HAL_TIM_PWM_ConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM2_Init+0xb6>
		Error_Handler();
 80011ee:	f000 fcaf 	bl	8001b50 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */
	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80011f2:	4803      	ldr	r0, [pc, #12]	@ (8001200 <MX_TIM2_Init+0xc4>)
 80011f4:	f000 fd8c 	bl	8001d10 <HAL_TIM_MspPostInit>

}
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	@ 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000248 	.word	0x20000248

08001204 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	@ 0x28
 8001208:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */
	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001216:	463b      	mov	r3, r7
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
 8001224:	615a      	str	r2, [r3, #20]
 8001226:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */
	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001228:	4b27      	ldr	r3, [pc, #156]	@ (80012c8 <MX_TIM3_Init+0xc4>)
 800122a:	4a28      	ldr	r2, [pc, #160]	@ (80012cc <MX_TIM3_Init+0xc8>)
 800122c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800122e:	4b26      	ldr	r3, [pc, #152]	@ (80012c8 <MX_TIM3_Init+0xc4>)
 8001230:	2200      	movs	r2, #0
 8001232:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b24      	ldr	r3, [pc, #144]	@ (80012c8 <MX_TIM3_Init+0xc4>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 8000;
 800123a:	4b23      	ldr	r3, [pc, #140]	@ (80012c8 <MX_TIM3_Init+0xc4>)
 800123c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001240:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001242:	4b21      	ldr	r3, [pc, #132]	@ (80012c8 <MX_TIM3_Init+0xc4>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001248:	4b1f      	ldr	r3, [pc, #124]	@ (80012c8 <MX_TIM3_Init+0xc4>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800124e:	481e      	ldr	r0, [pc, #120]	@ (80012c8 <MX_TIM3_Init+0xc4>)
 8001250:	f003 ff38 	bl	80050c4 <HAL_TIM_PWM_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM3_Init+0x5a>
		Error_Handler();
 800125a:	f000 fc79 	bl	8001b50 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	4619      	mov	r1, r3
 800126c:	4816      	ldr	r0, [pc, #88]	@ (80012c8 <MX_TIM3_Init+0xc4>)
 800126e:	f004 fd3f 	bl	8005cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM3_Init+0x78>
		Error_Handler();
 8001278:	f000 fc6a 	bl	8001b50 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800127c:	2360      	movs	r3, #96	@ 0x60
 800127e:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 800128c:	463b      	mov	r3, r7
 800128e:	2208      	movs	r2, #8
 8001290:	4619      	mov	r1, r3
 8001292:	480d      	ldr	r0, [pc, #52]	@ (80012c8 <MX_TIM3_Init+0xc4>)
 8001294:	f004 f874 	bl	8005380 <HAL_TIM_PWM_ConfigChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM3_Init+0x9e>
		Error_Handler();
 800129e:	f000 fc57 	bl	8001b50 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 80012a2:	463b      	mov	r3, r7
 80012a4:	220c      	movs	r2, #12
 80012a6:	4619      	mov	r1, r3
 80012a8:	4807      	ldr	r0, [pc, #28]	@ (80012c8 <MX_TIM3_Init+0xc4>)
 80012aa:	f004 f869 	bl	8005380 <HAL_TIM_PWM_ConfigChannel>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM3_Init+0xb4>
		Error_Handler();
 80012b4:	f000 fc4c 	bl	8001b50 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */
	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80012b8:	4803      	ldr	r0, [pc, #12]	@ (80012c8 <MX_TIM3_Init+0xc4>)
 80012ba:	f000 fd29 	bl	8001d10 <HAL_TIM_MspPostInit>

}
 80012be:	bf00      	nop
 80012c0:	3728      	adds	r7, #40	@ 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000294 	.word	0x20000294
 80012cc:	40000400 	.word	0x40000400

080012d0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_Init 0 */
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */
	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80012d4:	4b14      	ldr	r3, [pc, #80]	@ (8001328 <MX_USART2_UART_Init+0x58>)
 80012d6:	4a15      	ldr	r2, [pc, #84]	@ (800132c <MX_USART2_UART_Init+0x5c>)
 80012d8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80012da:	4b13      	ldr	r3, [pc, #76]	@ (8001328 <MX_USART2_UART_Init+0x58>)
 80012dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012e0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012e2:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <MX_USART2_UART_Init+0x58>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <MX_USART2_UART_Init+0x58>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001328 <MX_USART2_UART_Init+0x58>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001328 <MX_USART2_UART_Init+0x58>)
 80012f6:	220c      	movs	r2, #12
 80012f8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <MX_USART2_UART_Init+0x58>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001300:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <MX_USART2_UART_Init+0x58>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001306:	4b08      	ldr	r3, [pc, #32]	@ (8001328 <MX_USART2_UART_Init+0x58>)
 8001308:	2200      	movs	r2, #0
 800130a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800130c:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <MX_USART2_UART_Init+0x58>)
 800130e:	2200      	movs	r2, #0
 8001310:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001312:	4805      	ldr	r0, [pc, #20]	@ (8001328 <MX_USART2_UART_Init+0x58>)
 8001314:	f004 fd92 	bl	8005e3c <HAL_UART_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800131e:	f000 fc17 	bl	8001b50 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */
	/* USER CODE END USART2_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200002e0 	.word	0x200002e0
 800132c:	40004400 	.word	0x40004400

08001330 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	@ 0x28
 8001334:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001346:	4b36      	ldr	r3, [pc, #216]	@ (8001420 <MX_GPIO_Init+0xf0>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134a:	4a35      	ldr	r2, [pc, #212]	@ (8001420 <MX_GPIO_Init+0xf0>)
 800134c:	f043 0304 	orr.w	r3, r3, #4
 8001350:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001352:	4b33      	ldr	r3, [pc, #204]	@ (8001420 <MX_GPIO_Init+0xf0>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800135e:	4b30      	ldr	r3, [pc, #192]	@ (8001420 <MX_GPIO_Init+0xf0>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001362:	4a2f      	ldr	r2, [pc, #188]	@ (8001420 <MX_GPIO_Init+0xf0>)
 8001364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001368:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136a:	4b2d      	ldr	r3, [pc, #180]	@ (8001420 <MX_GPIO_Init+0xf0>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	4b2a      	ldr	r3, [pc, #168]	@ (8001420 <MX_GPIO_Init+0xf0>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	4a29      	ldr	r2, [pc, #164]	@ (8001420 <MX_GPIO_Init+0xf0>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001382:	4b27      	ldr	r3, [pc, #156]	@ (8001420 <MX_GPIO_Init+0xf0>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	4b24      	ldr	r3, [pc, #144]	@ (8001420 <MX_GPIO_Init+0xf0>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001392:	4a23      	ldr	r2, [pc, #140]	@ (8001420 <MX_GPIO_Init+0xf0>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800139a:	4b21      	ldr	r3, [pc, #132]	@ (8001420 <MX_GPIO_Init+0xf0>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2120      	movs	r1, #32
 80013aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ae:	f001 faeb 	bl	8002988 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80013b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013b6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013b8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	4816      	ldr	r0, [pc, #88]	@ (8001424 <MX_GPIO_Init+0xf4>)
 80013ca:	f001 f83f 	bl	800244c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80013ce:	2320      	movs	r3, #32
 80013d0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4619      	mov	r1, r3
 80013e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013e8:	f001 f830 	bl	800244c <HAL_GPIO_Init>

	/*Configure GPIO pin : MPU6050_INT_Pin */
	GPIO_InitStruct.Pin = MPU6050_INT_Pin;
 80013ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013f0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013f6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013f8:	2302      	movs	r3, #2
 80013fa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(MPU6050_INT_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	4808      	ldr	r0, [pc, #32]	@ (8001424 <MX_GPIO_Init+0xf4>)
 8001404:	f001 f822 	bl	800244c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2105      	movs	r1, #5
 800140c:	2028      	movs	r0, #40	@ 0x28
 800140e:	f000 fff3 	bl	80023f8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001412:	2028      	movs	r0, #40	@ 0x28
 8001414:	f001 f80c 	bl	8002430 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001418:	bf00      	nop
 800141a:	3728      	adds	r7, #40	@ 0x28
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40021000 	.word	0x40021000
 8001424:	48000800 	.word	0x48000800

08001428 <configure_imu_power>:
/*	IMU Functions																				 */
/*===============================================================================================*/
/**
 * @brief Configures the power settings of the IMU
 */
static void configure_imu_power() {
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af04      	add	r7, sp, #16
	// Wait for the IMU to be ready
	while (HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_Addr, I2C_TRIALS,
 800142e:	e002      	b.n	8001436 <configure_imu_power+0xe>
	I2C_TIMEOUT_MS) != HAL_OK) {
		HAL_Delay(5); // busy-wait for IMU to start up
 8001430:	2005      	movs	r0, #5
 8001432:	f000 ff05 	bl	8002240 <HAL_Delay>
	while (HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_Addr, I2C_TRIALS,
 8001436:	230a      	movs	r3, #10
 8001438:	2205      	movs	r2, #5
 800143a:	21d0      	movs	r1, #208	@ 0xd0
 800143c:	4826      	ldr	r0, [pc, #152]	@ (80014d8 <configure_imu_power+0xb0>)
 800143e:	f001 fdcb 	bl	8002fd8 <HAL_I2C_IsDeviceReady>
 8001442:	4603      	mov	r3, r0
	I2C_TIMEOUT_MS) != HAL_OK) {
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1f3      	bne.n	8001430 <configure_imu_power+0x8>

	HAL_StatusTypeDef status;
	uint8_t data_byte;

	/*** 1. Wake up the MPU6050 from sleep mode ***/
	data_byte = 0x00; // Clears the sleep bit
 8001448:	2300      	movs	r3, #0
 800144a:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, MPU6050_Addr, PWR_MGMT_1_Addr,
 800144c:	230a      	movs	r3, #10
 800144e:	9302      	str	r3, [sp, #8]
 8001450:	2301      	movs	r3, #1
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	1dbb      	adds	r3, r7, #6
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2301      	movs	r3, #1
 800145a:	226b      	movs	r2, #107	@ 0x6b
 800145c:	21d0      	movs	r1, #208	@ 0xd0
 800145e:	481e      	ldr	r0, [pc, #120]	@ (80014d8 <configure_imu_power+0xb0>)
 8001460:	f001 fb8c 	bl	8002b7c <HAL_I2C_Mem_Write>
 8001464:	4603      	mov	r3, r0
 8001466:	71fb      	strb	r3, [r7, #7]
	I2C_MEMADD_SIZE_8BIT, &data_byte, 1, I2C_TIMEOUT_MS);
	if (status != HAL_OK) {
		// Handle error
	}
	// Wait a few ms for the device to stabilize after power changes
	HAL_Delay(10);
 8001468:	200a      	movs	r0, #10
 800146a:	f000 fee9 	bl	8002240 <HAL_Delay>

	/*** 2. Set unused IMU peripherals into standby mode ***/
	// Read the current register value to not overwrite other settings
	status = HAL_I2C_Mem_Read(&hi2c1, MPU6050_Addr, PWR_MGMT_2_Addr,
 800146e:	230a      	movs	r3, #10
 8001470:	9302      	str	r3, [sp, #8]
 8001472:	2301      	movs	r3, #1
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	1dbb      	adds	r3, r7, #6
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	2301      	movs	r3, #1
 800147c:	226c      	movs	r2, #108	@ 0x6c
 800147e:	21d0      	movs	r1, #208	@ 0xd0
 8001480:	4815      	ldr	r0, [pc, #84]	@ (80014d8 <configure_imu_power+0xb0>)
 8001482:	f001 fc8f 	bl	8002da4 <HAL_I2C_Mem_Read>
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
		// Handle error
	}

	// Combine masks
	data_byte |= (STBY_YA | STBY_XG | STB_ZG);
 800148a:	79bb      	ldrb	r3, [r7, #6]
 800148c:	f043 0315 	orr.w	r3, r3, #21
 8001490:	b2db      	uxtb	r3, r3
 8001492:	71bb      	strb	r3, [r7, #6]

	// Write the modified value back to the register
	status = HAL_I2C_Mem_Write(&hi2c1, MPU6050_Addr, PWR_MGMT_2_Addr,
 8001494:	230a      	movs	r3, #10
 8001496:	9302      	str	r3, [sp, #8]
 8001498:	2301      	movs	r3, #1
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	1dbb      	adds	r3, r7, #6
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2301      	movs	r3, #1
 80014a2:	226c      	movs	r2, #108	@ 0x6c
 80014a4:	21d0      	movs	r1, #208	@ 0xd0
 80014a6:	480c      	ldr	r0, [pc, #48]	@ (80014d8 <configure_imu_power+0xb0>)
 80014a8:	f001 fb68 	bl	8002b7c <HAL_I2C_Mem_Write>
 80014ac:	4603      	mov	r3, r0
 80014ae:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
		// Handle error
	}

	/*** 3. Enable the Data Ready Interrupt on the MPU6050 ***/
	data_byte = (0x01 << 0); // Sets the DATA_RDY_EN bit
 80014b0:	2301      	movs	r3, #1
 80014b2:	71bb      	strb	r3, [r7, #6]
	status = HAL_I2C_Mem_Write(&hi2c1, MPU6050_Addr, INT_ENABLE_Addr,
 80014b4:	230a      	movs	r3, #10
 80014b6:	9302      	str	r3, [sp, #8]
 80014b8:	2301      	movs	r3, #1
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	1dbb      	adds	r3, r7, #6
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	2301      	movs	r3, #1
 80014c2:	2238      	movs	r2, #56	@ 0x38
 80014c4:	21d0      	movs	r1, #208	@ 0xd0
 80014c6:	4804      	ldr	r0, [pc, #16]	@ (80014d8 <configure_imu_power+0xb0>)
 80014c8:	f001 fb58 	bl	8002b7c <HAL_I2C_Mem_Write>
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
	I2C_MEMADD_SIZE_8BIT, &data_byte, 1, I2C_TIMEOUT_MS);
	if (status != HAL_OK) {
		// Handle error
	}
}
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200001f4 	.word	0x200001f4
 80014dc:	00000000 	.word	0x00000000

080014e0 <calibrate_imu>:

/**
 * @brief Establishes a baseline for the IMU to disregard initial pitch.
 */
static void calibrate_imu(void) {
 80014e0:	b5b0      	push	{r4, r5, r7, lr}
 80014e2:	b0d2      	sub	sp, #328	@ 0x148
 80014e4:	af04      	add	r7, sp, #16
	uint8_t rx_buffer[14];
	float sum_accel_x_g_force = 0;
 80014e6:	f04f 0300 	mov.w	r3, #0
 80014ea:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	float sum_accel_z_g_force = 0;
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	const int num_samples = 3; // take 100 samples for a stable average
 80014f6:	2303      	movs	r3, #3
 80014f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

	char buffer[256];
	sprintf(buffer, "Calibrating... Keep robot level!\r\n");
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	496c      	ldr	r1, [pc, #432]	@ (80016b0 <calibrate_imu+0x1d0>)
 8001500:	4618      	mov	r0, r3
 8001502:	f009 fca1 	bl	800ae48 <siprintf>
	uart_print(buffer);
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	4618      	mov	r0, r3
 800150a:	f000 fa95 	bl	8001a38 <uart_print>
	HAL_Delay(1000);
 800150e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001512:	f000 fe95 	bl	8002240 <HAL_Delay>

	// Make sure MPU is ready before starting
	while (HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_Addr, I2C_TRIALS, I2C_TIMEOUT_MS) != HAL_OK) {
 8001516:	e002      	b.n	800151e <calibrate_imu+0x3e>
		HAL_Delay(10);
 8001518:	200a      	movs	r0, #10
 800151a:	f000 fe91 	bl	8002240 <HAL_Delay>
	while (HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_Addr, I2C_TRIALS, I2C_TIMEOUT_MS) != HAL_OK) {
 800151e:	230a      	movs	r3, #10
 8001520:	2205      	movs	r2, #5
 8001522:	21d0      	movs	r1, #208	@ 0xd0
 8001524:	4863      	ldr	r0, [pc, #396]	@ (80016b4 <calibrate_imu+0x1d4>)
 8001526:	f001 fd57 	bl	8002fd8 <HAL_I2C_IsDeviceReady>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1f3      	bne.n	8001518 <calibrate_imu+0x38>
	}

	for (int i = 0; i < num_samples; i++) {
 8001530:	2300      	movs	r3, #0
 8001532:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001536:	e053      	b.n	80015e0 <calibrate_imu+0x100>
		// Read raw accelerometer data
		while (HAL_I2C_Mem_Read(&hi2c1, MPU6050_Addr, ACCEL_XOUT_H_Addr,
 8001538:	bf00      	nop
 800153a:	230a      	movs	r3, #10
 800153c:	9302      	str	r3, [sp, #8]
 800153e:	230e      	movs	r3, #14
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2301      	movs	r3, #1
 800154a:	223b      	movs	r2, #59	@ 0x3b
 800154c:	21d0      	movs	r1, #208	@ 0xd0
 800154e:	4859      	ldr	r0, [pc, #356]	@ (80016b4 <calibrate_imu+0x1d4>)
 8001550:	f001 fc28 	bl	8002da4 <HAL_I2C_Mem_Read>
 8001554:	4603      	mov	r3, r0
		I2C_MEMADD_SIZE_8BIT, rx_buffer, 14, I2C_TIMEOUT_MS) != HAL_OK) {
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1ef      	bne.n	800153a <calibrate_imu+0x5a>
		}

		// Since read was successful, decode it
		int16_t raw_accel_x = (int16_t) (rx_buffer[0] << 8 | rx_buffer[1]);
 800155a:	f897 3104 	ldrb.w	r3, [r7, #260]	@ 0x104
 800155e:	b21b      	sxth	r3, r3
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	b21a      	sxth	r2, r3
 8001564:	f897 3105 	ldrb.w	r3, [r7, #261]	@ 0x105
 8001568:	b21b      	sxth	r3, r3
 800156a:	4313      	orrs	r3, r2
 800156c:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
		int16_t raw_accel_z = (int16_t) (rx_buffer[4] << 8 | rx_buffer[5]);
 8001570:	f897 3108 	ldrb.w	r3, [r7, #264]	@ 0x108
 8001574:	b21b      	sxth	r3, r3
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21a      	sxth	r2, r3
 800157a:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 800157e:	b21b      	sxth	r3, r3
 8001580:	4313      	orrs	r3, r2
 8001582:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

		float adjusted_accel_x = ((float) raw_accel_x / ACCEL_SENSITIVITY);
 8001586:	f9b7 311e 	ldrsh.w	r3, [r7, #286]	@ 0x11e
 800158a:	ee07 3a90 	vmov	s15, r3
 800158e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001592:	eddf 6a49 	vldr	s13, [pc, #292]	@ 80016b8 <calibrate_imu+0x1d8>
 8001596:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800159a:	edc7 7a46 	vstr	s15, [r7, #280]	@ 0x118
		float adjusted_accel_z = ((float) raw_accel_z / ACCEL_SENSITIVITY);
 800159e:	f9b7 311c 	ldrsh.w	r3, [r7, #284]	@ 0x11c
 80015a2:	ee07 3a90 	vmov	s15, r3
 80015a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015aa:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80016b8 <calibrate_imu+0x1d8>
 80015ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b2:	edc7 7a45 	vstr	s15, [r7, #276]	@ 0x114

		sum_accel_x_g_force += adjusted_accel_x;
 80015b6:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 80015ba:	edd7 7a46 	vldr	s15, [r7, #280]	@ 0x118
 80015be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c2:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
		sum_accel_z_g_force += adjusted_accel_z;
 80015c6:	ed97 7a4c 	vldr	s14, [r7, #304]	@ 0x130
 80015ca:	edd7 7a45 	vldr	s15, [r7, #276]	@ 0x114
 80015ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d2:	edc7 7a4c 	vstr	s15, [r7, #304]	@ 0x130
	for (int i = 0; i < num_samples; i++) {
 80015d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80015da:	3301      	adds	r3, #1
 80015dc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80015e0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80015e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dba5      	blt.n	8001538 <calibrate_imu+0x58>
	}

	// Calculate the average offset
	float avg_accel_x_g_force = sum_accel_x_g_force / num_samples;
 80015ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80015f0:	ee07 3a90 	vmov	s15, r3
 80015f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f8:	edd7 6a4d 	vldr	s13, [r7, #308]	@ 0x134
 80015fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001600:	edc7 7a49 	vstr	s15, [r7, #292]	@ 0x124
	float avg_accel_z_g_force = sum_accel_z_g_force / num_samples;
 8001604:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001610:	edd7 6a4c 	vldr	s13, [r7, #304]	@ 0x130
 8001614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001618:	edc7 7a48 	vstr	s15, [r7, #288]	@ 0x120

	// Calculate the initial angle from the averages and store it
	initial_accel_pitch_offset_deg = atan2(avg_accel_x_g_force, avg_accel_z_g_force) * 180.0 / M_PI;
 800161c:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8001620:	f7fe ff92 	bl	8000548 <__aeabi_f2d>
 8001624:	4604      	mov	r4, r0
 8001626:	460d      	mov	r5, r1
 8001628:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 800162c:	f7fe ff8c 	bl	8000548 <__aeabi_f2d>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	ec43 2b11 	vmov	d1, r2, r3
 8001638:	ec45 4b10 	vmov	d0, r4, r5
 800163c:	f00b fd96 	bl	800d16c <atan2>
 8001640:	ec51 0b10 	vmov	r0, r1, d0
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	4b1c      	ldr	r3, [pc, #112]	@ (80016bc <calibrate_imu+0x1dc>)
 800164a:	f7fe ffd5 	bl	80005f8 <__aeabi_dmul>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4610      	mov	r0, r2
 8001654:	4619      	mov	r1, r3
 8001656:	a314      	add	r3, pc, #80	@ (adr r3, 80016a8 <calibrate_imu+0x1c8>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f7ff f8f6 	bl	800084c <__aeabi_ddiv>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	f7ff fa9e 	bl	8000ba8 <__aeabi_d2f>
 800166c:	4603      	mov	r3, r0
 800166e:	4a14      	ldr	r2, [pc, #80]	@ (80016c0 <calibrate_imu+0x1e0>)
 8001670:	6013      	str	r3, [r2, #0]

	sprintf(buffer, "Calibration complete! Offset Angle: %f\r\n", initial_accel_pitch_offset_deg);
 8001672:	4b13      	ldr	r3, [pc, #76]	@ (80016c0 <calibrate_imu+0x1e0>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe ff66 	bl	8000548 <__aeabi_f2d>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	1d38      	adds	r0, r7, #4
 8001682:	4910      	ldr	r1, [pc, #64]	@ (80016c4 <calibrate_imu+0x1e4>)
 8001684:	f009 fbe0 	bl	800ae48 <siprintf>
	uart_print(buffer);
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f9d4 	bl	8001a38 <uart_print>
	HAL_Delay(2000);
 8001690:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001694:	f000 fdd4 	bl	8002240 <HAL_Delay>
}
 8001698:	bf00      	nop
 800169a:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800169e:	46bd      	mov	sp, r7
 80016a0:	bdb0      	pop	{r4, r5, r7, pc}
 80016a2:	bf00      	nop
 80016a4:	f3af 8000 	nop.w
 80016a8:	54442d18 	.word	0x54442d18
 80016ac:	400921fb 	.word	0x400921fb
 80016b0:	0800d690 	.word	0x0800d690
 80016b4:	200001f4 	.word	0x200001f4
 80016b8:	46800000 	.word	0x46800000
 80016bc:	40668000 	.word	0x40668000
 80016c0:	2000039c 	.word	0x2000039c
 80016c4:	0800d6b4 	.word	0x0800d6b4

080016c8 <process_imu_data>:

/**
 * @brief Converts raw IMU data into the process pitch values for the accelerometer, gyroscope, and complementary filterv
 */
static void process_imu_data(const uint8_t *data_buffer, Transform_t *transform_buffer,
		Pitch_t *pitch_buffer, float dt) {
 80016c8:	b5b0      	push	{r4, r5, r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
 80016d4:	ed87 0a00 	vstr	s0, [r7]
	// Combine high and low bytes
	int16_t raw_accel_x = (int16_t) (data_buffer[0] << 8 | data_buffer[1]);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	b21b      	sxth	r3, r3
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	b21a      	sxth	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	3301      	adds	r3, #1
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	83fb      	strh	r3, [r7, #30]
	int16_t raw_accel_z = (int16_t) (data_buffer[4] << 8 | data_buffer[5]);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	3304      	adds	r3, #4
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	b21b      	sxth	r3, r3
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3305      	adds	r3, #5
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b21b      	sxth	r3, r3
 8001702:	4313      	orrs	r3, r2
 8001704:	83bb      	strh	r3, [r7, #28]
	int16_t raw_gyro_y = (int16_t) (data_buffer[10] << 8 | data_buffer[11]);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	330a      	adds	r3, #10
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	b21b      	sxth	r3, r3
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	b21a      	sxth	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	330b      	adds	r3, #11
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	b21b      	sxth	r3, r3
 800171a:	4313      	orrs	r3, r2
 800171c:	837b      	strh	r3, [r7, #26]

	transform_buffer->accel_x = ((float) raw_accel_x / ACCEL_SENSITIVITY);
 800171e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001722:	ee07 3a90 	vmov	s15, r3
 8001726:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800172a:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8001870 <process_imu_data+0x1a8>
 800172e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	edc3 7a00 	vstr	s15, [r3]
	transform_buffer->accel_z = ((float) raw_accel_z / ACCEL_SENSITIVITY);
 8001738:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800173c:	ee07 3a90 	vmov	s15, r3
 8001740:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001744:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8001870 <process_imu_data+0x1a8>
 8001748:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	edc3 7a02 	vstr	s15, [r3, #8]
	transform_buffer->gyro_y = ((float) raw_gyro_y / GYRO_SENSITIVITY);
 8001752:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001756:	ee07 3a90 	vmov	s15, r3
 800175a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800175e:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8001874 <process_imu_data+0x1ac>
 8001762:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	edc3 7a04 	vstr	s15, [r3, #16]

	float absolute_accel_pitch_deg = atan2(transform_buffer->accel_x, transform_buffer->accel_z)
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7fe fee9 	bl	8000548 <__aeabi_f2d>
 8001776:	4604      	mov	r4, r0
 8001778:	460d      	mov	r5, r1
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fee2 	bl	8000548 <__aeabi_f2d>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	ec43 2b11 	vmov	d1, r2, r3
 800178c:	ec45 4b10 	vmov	d0, r4, r5
 8001790:	f00b fcec 	bl	800d16c <atan2>
 8001794:	ec51 0b10 	vmov	r0, r1, d0
			* 180.0 / M_PI;
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	4b36      	ldr	r3, [pc, #216]	@ (8001878 <process_imu_data+0x1b0>)
 800179e:	f7fe ff2b 	bl	80005f8 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	a32b      	add	r3, pc, #172	@ (adr r3, 8001858 <process_imu_data+0x190>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	f7ff f84c 	bl	800084c <__aeabi_ddiv>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
	float absolute_accel_pitch_deg = atan2(transform_buffer->accel_x, transform_buffer->accel_z)
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	f7ff f9f4 	bl	8000ba8 <__aeabi_d2f>
 80017c0:	4603      	mov	r3, r0
 80017c2:	617b      	str	r3, [r7, #20]
	float relative_accel_pitch_deg = absolute_accel_pitch_deg - initial_accel_pitch_offset_deg;
 80017c4:	4b2d      	ldr	r3, [pc, #180]	@ (800187c <process_imu_data+0x1b4>)
 80017c6:	edd3 7a00 	vldr	s15, [r3]
 80017ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80017ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017d2:	edc7 7a04 	vstr	s15, [r7, #16]

	pitch_buffer->accel_pitch = relative_accel_pitch_deg;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	601a      	str	r2, [r3, #0]
	pitch_buffer->gyro_pitch = transform_buffer->gyro_y * dt;
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	ed93 7a04 	vldr	s14, [r3, #16]
 80017e2:	edd7 7a00 	vldr	s15, [r7]
 80017e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	edc3 7a01 	vstr	s15, [r3, #4]
	pitch_buffer->comp_pitch = FILTER_COEFF * (pitch_buffer->comp_pitch - pitch_buffer->gyro_pitch)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80017fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001800:	ee17 0a90 	vmov	r0, s15
 8001804:	f7fe fea0 	bl	8000548 <__aeabi_f2d>
 8001808:	a315      	add	r3, pc, #84	@ (adr r3, 8001860 <process_imu_data+0x198>)
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180e:	f7fe fef3 	bl	80005f8 <__aeabi_dmul>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4614      	mov	r4, r2
 8001818:	461d      	mov	r5, r3
			+ (1.0 - FILTER_COEFF) * pitch_buffer->accel_pitch;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fe92 	bl	8000548 <__aeabi_f2d>
 8001824:	a310      	add	r3, pc, #64	@ (adr r3, 8001868 <process_imu_data+0x1a0>)
 8001826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182a:	f7fe fee5 	bl	80005f8 <__aeabi_dmul>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4620      	mov	r0, r4
 8001834:	4629      	mov	r1, r5
 8001836:	f7fe fd29 	bl	800028c <__adddf3>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f7ff f9b1 	bl	8000ba8 <__aeabi_d2f>
 8001846:	4602      	mov	r2, r0
	pitch_buffer->comp_pitch = FILTER_COEFF * (pitch_buffer->comp_pitch - pitch_buffer->gyro_pitch)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	609a      	str	r2, [r3, #8]
}
 800184c:	bf00      	nop
 800184e:	3720      	adds	r7, #32
 8001850:	46bd      	mov	sp, r7
 8001852:	bdb0      	pop	{r4, r5, r7, pc}
 8001854:	f3af 8000 	nop.w
 8001858:	54442d18 	.word	0x54442d18
 800185c:	400921fb 	.word	0x400921fb
 8001860:	f5c28f5c 	.word	0xf5c28f5c
 8001864:	3fef5c28 	.word	0x3fef5c28
 8001868:	47ae1480 	.word	0x47ae1480
 800186c:	3f947ae1 	.word	0x3f947ae1
 8001870:	46800000 	.word	0x46800000
 8001874:	43030000 	.word	0x43030000
 8001878:	40668000 	.word	0x40668000
 800187c:	2000039c 	.word	0x2000039c

08001880 <update_global_imu_data>:

/**
 * @brief Updates the global references of the objects transform and pitches
 */
static void update_global_imu_data(Transform_t *transform_buffer, Pitch_t *pitch_buffer) {
 8001880:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001884:	b0a6      	sub	sp, #152	@ 0x98
 8001886:	af04      	add	r7, sp, #16
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	6039      	str	r1, [r7, #0]
	if (osMutexAcquire(imuDataMutexHandle, I2C_TIMEOUT_MS) == osOK) {
 800188c:	4b31      	ldr	r3, [pc, #196]	@ (8001954 <update_global_imu_data+0xd4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	210a      	movs	r1, #10
 8001892:	4618      	mov	r0, r3
 8001894:	f005 fa54 	bl	8006d40 <osMutexAcquire>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d149      	bne.n	8001932 <update_global_imu_data+0xb2>
		// Update relevant transform information
		transform.accel_x = transform_buffer->accel_x;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001958 <update_global_imu_data+0xd8>)
 80018a4:	6013      	str	r3, [r2, #0]
		transform.accel_z = transform_buffer->accel_z;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	4a2b      	ldr	r2, [pc, #172]	@ (8001958 <update_global_imu_data+0xd8>)
 80018ac:	6093      	str	r3, [r2, #8]
		transform.gyro_y = transform_buffer->gyro_y;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	4a29      	ldr	r2, [pc, #164]	@ (8001958 <update_global_imu_data+0xd8>)
 80018b4:	6113      	str	r3, [r2, #16]

		// Update estimated pitch information
		pitches.accel_pitch = pitch_buffer->accel_pitch;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a28      	ldr	r2, [pc, #160]	@ (800195c <update_global_imu_data+0xdc>)
 80018bc:	6013      	str	r3, [r2, #0]
		pitches.gyro_pitch -= pitch_buffer->gyro_pitch;
 80018be:	4b27      	ldr	r3, [pc, #156]	@ (800195c <update_global_imu_data+0xdc>)
 80018c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80018ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ce:	4b23      	ldr	r3, [pc, #140]	@ (800195c <update_global_imu_data+0xdc>)
 80018d0:	edc3 7a01 	vstr	s15, [r3, #4]
		pitches.comp_pitch = pitch_buffer->comp_pitch;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	4a20      	ldr	r2, [pc, #128]	@ (800195c <update_global_imu_data+0xdc>)
 80018da:	6093      	str	r3, [r2, #8]
		osMutexRelease(imuDataMutexHandle);
 80018dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001954 <update_global_imu_data+0xd4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f005 fa78 	bl	8006dd6 <osMutexRelease>

		char uartBuffer[128];
		sprintf(uartBuffer, "accel-pitch: %f\tgyro-pitch: %f\tcomp-pitch: %f\r\n",
				pitches.accel_pitch, pitches.gyro_pitch, pitches.comp_pitch);
 80018e6:	4b1d      	ldr	r3, [pc, #116]	@ (800195c <update_global_imu_data+0xdc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
		sprintf(uartBuffer, "accel-pitch: %f\tgyro-pitch: %f\tcomp-pitch: %f\r\n",
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fe2c 	bl	8000548 <__aeabi_f2d>
 80018f0:	4680      	mov	r8, r0
 80018f2:	4689      	mov	r9, r1
				pitches.accel_pitch, pitches.gyro_pitch, pitches.comp_pitch);
 80018f4:	4b19      	ldr	r3, [pc, #100]	@ (800195c <update_global_imu_data+0xdc>)
 80018f6:	685b      	ldr	r3, [r3, #4]
		sprintf(uartBuffer, "accel-pitch: %f\tgyro-pitch: %f\tcomp-pitch: %f\r\n",
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fe25 	bl	8000548 <__aeabi_f2d>
 80018fe:	4604      	mov	r4, r0
 8001900:	460d      	mov	r5, r1
				pitches.accel_pitch, pitches.gyro_pitch, pitches.comp_pitch);
 8001902:	4b16      	ldr	r3, [pc, #88]	@ (800195c <update_global_imu_data+0xdc>)
 8001904:	689b      	ldr	r3, [r3, #8]
		sprintf(uartBuffer, "accel-pitch: %f\tgyro-pitch: %f\tcomp-pitch: %f\r\n",
 8001906:	4618      	mov	r0, r3
 8001908:	f7fe fe1e 	bl	8000548 <__aeabi_f2d>
 800190c:	4602      	mov	r2, r0
 800190e:	460b      	mov	r3, r1
 8001910:	f107 0008 	add.w	r0, r7, #8
 8001914:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001918:	e9cd 4500 	strd	r4, r5, [sp]
 800191c:	4642      	mov	r2, r8
 800191e:	464b      	mov	r3, r9
 8001920:	490f      	ldr	r1, [pc, #60]	@ (8001960 <update_global_imu_data+0xe0>)
 8001922:	f009 fa91 	bl	800ae48 <siprintf>
		uart_print(uartBuffer);
 8001926:	f107 0308 	add.w	r3, r7, #8
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f884 	bl	8001a38 <uart_print>
		// Handle mutex timeout Error
		char errorBuffer[128];
		sprintf(errorBuffer, "Not able to aquire imuDataMutex in time\r\n");
		uart_print(errorBuffer);
	}
}
 8001930:	e00a      	b.n	8001948 <update_global_imu_data+0xc8>
		sprintf(errorBuffer, "Not able to aquire imuDataMutex in time\r\n");
 8001932:	f107 0308 	add.w	r3, r7, #8
 8001936:	490b      	ldr	r1, [pc, #44]	@ (8001964 <update_global_imu_data+0xe4>)
 8001938:	4618      	mov	r0, r3
 800193a:	f009 fa85 	bl	800ae48 <siprintf>
		uart_print(errorBuffer);
 800193e:	f107 0308 	add.w	r3, r7, #8
 8001942:	4618      	mov	r0, r3
 8001944:	f000 f878 	bl	8001a38 <uart_print>
}
 8001948:	bf00      	nop
 800194a:	3788      	adds	r7, #136	@ 0x88
 800194c:	46bd      	mov	sp, r7
 800194e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001952:	bf00      	nop
 8001954:	20000370 	.word	0x20000370
 8001958:	20000378 	.word	0x20000378
 800195c:	20000390 	.word	0x20000390
 8001960:	0800d6e0 	.word	0x0800d6e0
 8001964:	0800d710 	.word	0x0800d710

08001968 <handle_i2c_read_error>:

/**
 * @brief Prints a descriptive message to UART based on the I2C error code
 */
static void handle_i2c_read_error() {
 8001968:	b580      	push	{r7, lr}
 800196a:	b0a2      	sub	sp, #136	@ 0x88
 800196c:	af00      	add	r7, sp, #0
	char errorBuffer[128];
	uint32_t i2c_error = HAL_I2C_GetError(&hi2c1);
 800196e:	4822      	ldr	r0, [pc, #136]	@ (80019f8 <handle_i2c_read_error+0x90>)
 8001970:	f001 fc1e 	bl	80031b0 <HAL_I2C_GetError>
 8001974:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84

	if (i2c_error & HAL_I2C_ERROR_BERR) {
 8001978:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <handle_i2c_read_error+0x28>
		sprintf(errorBuffer,
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	491d      	ldr	r1, [pc, #116]	@ (80019fc <handle_i2c_read_error+0x94>)
 8001988:	4618      	mov	r0, r3
 800198a:	f009 fa5d 	bl	800ae48 <siprintf>
 800198e:	e02a      	b.n	80019e6 <handle_i2c_read_error+0x7e>
				"MPU6050 Read Error: Bus Error (BERR). Check wiring/signal integrity.\r\n");
	} else if (i2c_error & HAL_I2C_ERROR_ARLO) {
 8001990:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <handle_i2c_read_error+0x40>
		sprintf(errorBuffer,
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	4918      	ldr	r1, [pc, #96]	@ (8001a00 <handle_i2c_read_error+0x98>)
 80019a0:	4618      	mov	r0, r3
 80019a2:	f009 fa51 	bl	800ae48 <siprintf>
 80019a6:	e01e      	b.n	80019e6 <handle_i2c_read_error+0x7e>
				"MPU6050 Read Error: Arbitration Lost (ARLO). Check for noise or other masters.\r\n");
	} else if (i2c_error & HAL_I2C_ERROR_AF) {
 80019a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d005      	beq.n	80019c0 <handle_i2c_read_error+0x58>
		sprintf(errorBuffer,
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	4913      	ldr	r1, [pc, #76]	@ (8001a04 <handle_i2c_read_error+0x9c>)
 80019b8:	4618      	mov	r0, r3
 80019ba:	f009 fa45 	bl	800ae48 <siprintf>
 80019be:	e012      	b.n	80019e6 <handle_i2c_read_error+0x7e>
				"MPU6050 Read Error: Acknowledge Failure (AF/NACK). Sensor may be busy or disconnected.\r\n");
	} else if (i2c_error & HAL_I2C_ERROR_OVR) {
 80019c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <handle_i2c_read_error+0x70>
		sprintf(errorBuffer, "MPU6050 Read Error: Overrun/Underrun (OVR).\r\n");
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	490e      	ldr	r1, [pc, #56]	@ (8001a08 <handle_i2c_read_error+0xa0>)
 80019d0:	4618      	mov	r0, r3
 80019d2:	f009 fa39 	bl	800ae48 <siprintf>
 80019d6:	e006      	b.n	80019e6 <handle_i2c_read_error+0x7e>
	} else {
		sprintf(errorBuffer, "MPU6050 Read Error: Unknown I2C Error. Code: 0x%lX\r\n", i2c_error);
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80019de:	490b      	ldr	r1, [pc, #44]	@ (8001a0c <handle_i2c_read_error+0xa4>)
 80019e0:	4618      	mov	r0, r3
 80019e2:	f009 fa31 	bl	800ae48 <siprintf>
	}
	uart_print(errorBuffer);
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 f825 	bl	8001a38 <uart_print>
}
 80019ee:	bf00      	nop
 80019f0:	3788      	adds	r7, #136	@ 0x88
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200001f4 	.word	0x200001f4
 80019fc:	0800d73c 	.word	0x0800d73c
 8001a00:	0800d784 	.word	0x0800d784
 8001a04:	0800d7d8 	.word	0x0800d7d8
 8001a08:	0800d834 	.word	0x0800d834
 8001a0c:	0800d864 	.word	0x0800d864

08001a10 <HAL_GPIO_EXTI_Callback>:

/**
 * @brief Handles hardware level interrupts
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	80fb      	strh	r3, [r7, #6]
	// Check if the interrupt came from the IMU's interrupt pin
	if (GPIO_Pin == MPU6050_INT_Pin) {
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
 8001a1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a20:	d104      	bne.n	8001a2c <HAL_GPIO_EXTI_Callback+0x1c>
		osSemaphoreRelease(imuDataReadySemHandle);
 8001a22:	4b04      	ldr	r3, [pc, #16]	@ (8001a34 <HAL_GPIO_EXTI_Callback+0x24>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f005 faee 	bl	8007008 <osSemaphoreRelease>
	}
}
 8001a2c:	bf00      	nop
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	20000374 	.word	0x20000374

08001a38 <uart_print>:

/**
 * @brief Prints a character buffer over the uart communication channel
 */
static void uart_print(char* buffer) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), UART_TIMEOUT_MS);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7fe fc15 	bl	8000270 <strlen>
 8001a46:	4603      	mov	r3, r0
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	4803      	ldr	r0, [pc, #12]	@ (8001a60 <uart_print+0x28>)
 8001a52:	f004 fa41 	bl	8005ed8 <HAL_UART_Transmit>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200002e0 	.word	0x200002e0

08001a64 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	f005 f8c6 	bl	8006bfe <osDelay>
 8001a72:	e7fb      	b.n	8001a6c <StartDefaultTask+0x8>

08001a74 <startIMUReadTask>:
 * @brief Function implementing the imuReadTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startIMUReadTask */
void startIMUReadTask(void *argument) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b096      	sub	sp, #88	@ 0x58
 8001a78:	af04      	add	r7, sp, #16
 8001a7a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN startIMUReadTask */
	uint32_t last_tick = osKernelGetTickCount(); // initialize starting tick
 8001a7c:	f005 f818 	bl	8006ab0 <osKernelGetTickCount>
 8001a80:	6478      	str	r0, [r7, #68]	@ 0x44

	/* Infinite loop */
	for (;;) {
		// Wait for interrupt pin to signal new data is available
		osSemaphoreAcquire(imuDataReadySemHandle, osWaitForever);
 8001a82:	4b27      	ldr	r3, [pc, #156]	@ (8001b20 <startIMUReadTask+0xac>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f005 fa6a 	bl	8006f64 <osSemaphoreAcquire>

		// Keep track of the system tick so we can integrate gyro rotation
		uint32_t current_tick = osKernelGetTickCount();
 8001a90:	f005 f80e 	bl	8006ab0 <osKernelGetTickCount>
 8001a94:	6438      	str	r0, [r7, #64]	@ 0x40
		float dt = (float) (current_tick - last_tick) / 1000.0f;
 8001a96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001a98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001aa4:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001b24 <startIMUReadTask+0xb0>
 8001aa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aac:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		last_tick = current_tick;
 8001ab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ab2:	647b      	str	r3, [r7, #68]	@ 0x44

		// Read the accelerometer and gyroscope data into a buffer
		HAL_StatusTypeDef status;
		uint8_t rx_buffer[14];
		status = HAL_I2C_Mem_Read(&hi2c1, MPU6050_Addr, ACCEL_XOUT_H_Addr,
 8001ab4:	230a      	movs	r3, #10
 8001ab6:	9302      	str	r3, [sp, #8]
 8001ab8:	230e      	movs	r3, #14
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	223b      	movs	r2, #59	@ 0x3b
 8001ac6:	21d0      	movs	r1, #208	@ 0xd0
 8001ac8:	4817      	ldr	r0, [pc, #92]	@ (8001b28 <startIMUReadTask+0xb4>)
 8001aca:	f001 f96b 	bl	8002da4 <HAL_I2C_Mem_Read>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		I2C_MEMADD_SIZE_8BIT, rx_buffer, 14, I2C_TIMEOUT_MS);

		if (status != HAL_OK) {
 8001ad4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00a      	beq.n	8001af2 <startIMUReadTask+0x7e>
			handle_i2c_read_error();
 8001adc:	f7ff ff44 	bl	8001968 <handle_i2c_read_error>

			// Attempt to recover the I2C bus by re-initializing it
			HAL_I2C_DeInit(&hi2c1);
 8001ae0:	4811      	ldr	r0, [pc, #68]	@ (8001b28 <startIMUReadTask+0xb4>)
 8001ae2:	f001 f81c 	bl	8002b1e <HAL_I2C_DeInit>
			HAL_I2C_Init(&hi2c1);
 8001ae6:	4810      	ldr	r0, [pc, #64]	@ (8001b28 <startIMUReadTask+0xb4>)
 8001ae8:	f000 ff7e 	bl	80029e8 <HAL_I2C_Init>
			osDelay(100); // give the i2c line time to recover
 8001aec:	2064      	movs	r0, #100	@ 0x64
 8001aee:	f005 f886 	bl	8006bfe <osDelay>
		}

		Transform_t transform_buffer;
		Pitch_t pitch_buffer;
		process_imu_data(rx_buffer, &transform_buffer, &pitch_buffer, dt);
 8001af2:	f107 0208 	add.w	r2, r7, #8
 8001af6:	f107 0114 	add.w	r1, r7, #20
 8001afa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001afe:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fde0 	bl	80016c8 <process_imu_data>
		update_global_imu_data(&transform_buffer, &pitch_buffer);
 8001b08:	f107 0208 	add.w	r2, r7, #8
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff feb4 	bl	8001880 <update_global_imu_data>
		osDelay(10); // short wait between reads
 8001b18:	200a      	movs	r0, #10
 8001b1a:	f005 f870 	bl	8006bfe <osDelay>
	for (;;) {
 8001b1e:	e7b0      	b.n	8001a82 <startIMUReadTask+0xe>
 8001b20:	20000374 	.word	0x20000374
 8001b24:	447a0000 	.word	0x447a0000
 8001b28:	200001f4 	.word	0x200001f4

08001b2c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a04      	ldr	r2, [pc, #16]	@ (8001b4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d101      	bne.n	8001b42 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001b3e:	f000 fb5f 	bl	8002200 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40012c00 	.word	0x40012c00

08001b50 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b54:	b672      	cpsid	i
}
 8001b56:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001b58:	bf00      	nop
 8001b5a:	e7fd      	b.n	8001b58 <Error_Handler+0x8>

08001b5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b62:	4b11      	ldr	r3, [pc, #68]	@ (8001ba8 <HAL_MspInit+0x4c>)
 8001b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b66:	4a10      	ldr	r2, [pc, #64]	@ (8001ba8 <HAL_MspInit+0x4c>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba8 <HAL_MspInit+0x4c>)
 8001b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba8 <HAL_MspInit+0x4c>)
 8001b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba8 <HAL_MspInit+0x4c>)
 8001b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b84:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b86:	4b08      	ldr	r3, [pc, #32]	@ (8001ba8 <HAL_MspInit+0x4c>)
 8001b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	210f      	movs	r1, #15
 8001b96:	f06f 0001 	mvn.w	r0, #1
 8001b9a:	f000 fc2d 	bl	80023f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000

08001bac <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b0ac      	sub	sp, #176	@ 0xb0
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	2288      	movs	r2, #136	@ 0x88
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f009 f9a0 	bl	800af12 <memset>
  if(hi2c->Instance==I2C1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a21      	ldr	r2, [pc, #132]	@ (8001c5c <HAL_I2C_MspInit+0xb0>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d13b      	bne.n	8001c54 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001bdc:	2340      	movs	r3, #64	@ 0x40
 8001bde:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001be0:	2300      	movs	r3, #0
 8001be2:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4618      	mov	r0, r3
 8001bea:	f002 fcdd 	bl	80045a8 <HAL_RCCEx_PeriphCLKConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001bf4:	f7ff ffac 	bl	8001b50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf8:	4b19      	ldr	r3, [pc, #100]	@ (8001c60 <HAL_I2C_MspInit+0xb4>)
 8001bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfc:	4a18      	ldr	r2, [pc, #96]	@ (8001c60 <HAL_I2C_MspInit+0xb4>)
 8001bfe:	f043 0302 	orr.w	r3, r3, #2
 8001c02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c04:	4b16      	ldr	r3, [pc, #88]	@ (8001c60 <HAL_I2C_MspInit+0xb4>)
 8001c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001c10:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001c14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c18:	2312      	movs	r3, #18
 8001c1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001c24:	2301      	movs	r3, #1
 8001c26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c30:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c34:	4619      	mov	r1, r3
 8001c36:	480b      	ldr	r0, [pc, #44]	@ (8001c64 <HAL_I2C_MspInit+0xb8>)
 8001c38:	f000 fc08 	bl	800244c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c3c:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <HAL_I2C_MspInit+0xb4>)
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c40:	4a07      	ldr	r2, [pc, #28]	@ (8001c60 <HAL_I2C_MspInit+0xb4>)
 8001c42:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c46:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c48:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <HAL_I2C_MspInit+0xb4>)
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c54:	bf00      	nop
 8001c56:	37b0      	adds	r7, #176	@ 0xb0
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40005400 	.word	0x40005400
 8001c60:	40021000 	.word	0x40021000
 8001c64:	48000400 	.word	0x48000400

08001c68 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca0 <HAL_I2C_MspDeInit+0x38>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d10e      	bne.n	8001c98 <HAL_I2C_MspDeInit+0x30>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca4 <HAL_I2C_MspDeInit+0x3c>)
 8001c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c7e:	4a09      	ldr	r2, [pc, #36]	@ (8001ca4 <HAL_I2C_MspDeInit+0x3c>)
 8001c80:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001c84:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8001c86:	2180      	movs	r1, #128	@ 0x80
 8001c88:	4807      	ldr	r0, [pc, #28]	@ (8001ca8 <HAL_I2C_MspDeInit+0x40>)
 8001c8a:	f000 fd89 	bl	80027a0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001c8e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c92:	4805      	ldr	r0, [pc, #20]	@ (8001ca8 <HAL_I2C_MspDeInit+0x40>)
 8001c94:	f000 fd84 	bl	80027a0 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40005400 	.word	0x40005400
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	48000400 	.word	0x48000400

08001cac <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cbe:	4b12      	ldr	r3, [pc, #72]	@ (8001d08 <HAL_TIM_PWM_MspInit+0x5c>)
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc2:	4a11      	ldr	r2, [pc, #68]	@ (8001d08 <HAL_TIM_PWM_MspInit+0x5c>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cca:	4b0f      	ldr	r3, [pc, #60]	@ (8001d08 <HAL_TIM_PWM_MspInit+0x5c>)
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001cd6:	e010      	b.n	8001cfa <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM3)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8001d0c <HAL_TIM_PWM_MspInit+0x60>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d10b      	bne.n	8001cfa <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ce2:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <HAL_TIM_PWM_MspInit+0x5c>)
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce6:	4a08      	ldr	r2, [pc, #32]	@ (8001d08 <HAL_TIM_PWM_MspInit+0x5c>)
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cee:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <HAL_TIM_PWM_MspInit+0x5c>)
 8001cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
}
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40000400 	.word	0x40000400

08001d10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	@ 0x28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d30:	d11d      	bne.n	8001d6e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d32:	4b21      	ldr	r3, [pc, #132]	@ (8001db8 <HAL_TIM_MspPostInit+0xa8>)
 8001d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d36:	4a20      	ldr	r2, [pc, #128]	@ (8001db8 <HAL_TIM_MspPostInit+0xa8>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001db8 <HAL_TIM_MspPostInit+0xa8>)
 8001d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5e:	f107 0314 	add.w	r3, r7, #20
 8001d62:	4619      	mov	r1, r3
 8001d64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d68:	f000 fb70 	bl	800244c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d6c:	e020      	b.n	8001db0 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM3)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a12      	ldr	r2, [pc, #72]	@ (8001dbc <HAL_TIM_MspPostInit+0xac>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d11b      	bne.n	8001db0 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d78:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <HAL_TIM_MspPostInit+0xa8>)
 8001d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7c:	4a0e      	ldr	r2, [pc, #56]	@ (8001db8 <HAL_TIM_MspPostInit+0xa8>)
 8001d7e:	f043 0302 	orr.w	r3, r3, #2
 8001d82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d84:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <HAL_TIM_MspPostInit+0xa8>)
 8001d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d90:	2303      	movs	r3, #3
 8001d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001da0:	2302      	movs	r3, #2
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	4805      	ldr	r0, [pc, #20]	@ (8001dc0 <HAL_TIM_MspPostInit+0xb0>)
 8001dac:	f000 fb4e 	bl	800244c <HAL_GPIO_Init>
}
 8001db0:	bf00      	nop
 8001db2:	3728      	adds	r7, #40	@ 0x28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40000400 	.word	0x40000400
 8001dc0:	48000400 	.word	0x48000400

08001dc4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b0ac      	sub	sp, #176	@ 0xb0
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	2288      	movs	r2, #136	@ 0x88
 8001de2:	2100      	movs	r1, #0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f009 f894 	bl	800af12 <memset>
  if(huart->Instance==USART2)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a21      	ldr	r2, [pc, #132]	@ (8001e74 <HAL_UART_MspInit+0xb0>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d13b      	bne.n	8001e6c <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001df4:	2302      	movs	r3, #2
 8001df6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	4618      	mov	r0, r3
 8001e02:	f002 fbd1 	bl	80045a8 <HAL_RCCEx_PeriphCLKConfig>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e0c:	f7ff fea0 	bl	8001b50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e10:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <HAL_UART_MspInit+0xb4>)
 8001e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e14:	4a18      	ldr	r2, [pc, #96]	@ (8001e78 <HAL_UART_MspInit+0xb4>)
 8001e16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e1c:	4b16      	ldr	r3, [pc, #88]	@ (8001e78 <HAL_UART_MspInit+0xb4>)
 8001e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e28:	4b13      	ldr	r3, [pc, #76]	@ (8001e78 <HAL_UART_MspInit+0xb4>)
 8001e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e2c:	4a12      	ldr	r2, [pc, #72]	@ (8001e78 <HAL_UART_MspInit+0xb4>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e34:	4b10      	ldr	r3, [pc, #64]	@ (8001e78 <HAL_UART_MspInit+0xb4>)
 8001e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e40:	230c      	movs	r3, #12
 8001e42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e52:	2303      	movs	r3, #3
 8001e54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e58:	2307      	movs	r3, #7
 8001e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e62:	4619      	mov	r1, r3
 8001e64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e68:	f000 faf0 	bl	800244c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001e6c:	bf00      	nop
 8001e6e:	37b0      	adds	r7, #176	@ 0xb0
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40004400 	.word	0x40004400
 8001e78:	40021000 	.word	0x40021000

08001e7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08c      	sub	sp, #48	@ 0x30
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e8a:	4b2e      	ldr	r3, [pc, #184]	@ (8001f44 <HAL_InitTick+0xc8>)
 8001e8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001f44 <HAL_InitTick+0xc8>)
 8001e90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e94:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e96:	4b2b      	ldr	r3, [pc, #172]	@ (8001f44 <HAL_InitTick+0xc8>)
 8001e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ea2:	f107 020c 	add.w	r2, r7, #12
 8001ea6:	f107 0310 	add.w	r3, r7, #16
 8001eaa:	4611      	mov	r1, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f002 fae9 	bl	8004484 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001eb2:	f002 fad1 	bl	8004458 <HAL_RCC_GetPCLK2Freq>
 8001eb6:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eba:	4a23      	ldr	r2, [pc, #140]	@ (8001f48 <HAL_InitTick+0xcc>)
 8001ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec0:	0c9b      	lsrs	r3, r3, #18
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001ec6:	4b21      	ldr	r3, [pc, #132]	@ (8001f4c <HAL_InitTick+0xd0>)
 8001ec8:	4a21      	ldr	r2, [pc, #132]	@ (8001f50 <HAL_InitTick+0xd4>)
 8001eca:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8001f4c <HAL_InitTick+0xd0>)
 8001ece:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ed2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8001f4c <HAL_InitTick+0xd0>)
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001eda:	4b1c      	ldr	r3, [pc, #112]	@ (8001f4c <HAL_InitTick+0xd0>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f4c <HAL_InitTick+0xd0>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee6:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <HAL_InitTick+0xd0>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001eec:	4817      	ldr	r0, [pc, #92]	@ (8001f4c <HAL_InitTick+0xd0>)
 8001eee:	f003 f817 	bl	8004f20 <HAL_TIM_Base_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001ef8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d11b      	bne.n	8001f38 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001f00:	4812      	ldr	r0, [pc, #72]	@ (8001f4c <HAL_InitTick+0xd0>)
 8001f02:	f003 f86f 	bl	8004fe4 <HAL_TIM_Base_Start_IT>
 8001f06:	4603      	mov	r3, r0
 8001f08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001f0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d111      	bne.n	8001f38 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001f14:	2019      	movs	r0, #25
 8001f16:	f000 fa8b 	bl	8002430 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b0f      	cmp	r3, #15
 8001f1e:	d808      	bhi.n	8001f32 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001f20:	2200      	movs	r2, #0
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	2019      	movs	r0, #25
 8001f26:	f000 fa67 	bl	80023f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f54 <HAL_InitTick+0xd8>)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	e002      	b.n	8001f38 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001f38:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3730      	adds	r7, #48	@ 0x30
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40021000 	.word	0x40021000
 8001f48:	431bde83 	.word	0x431bde83
 8001f4c:	200003a0 	.word	0x200003a0
 8001f50:	40012c00 	.word	0x40012c00
 8001f54:	20000004 	.word	0x20000004

08001f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <NMI_Handler+0x4>

08001f60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f64:	bf00      	nop
 8001f66:	e7fd      	b.n	8001f64 <HardFault_Handler+0x4>

08001f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <MemManage_Handler+0x4>

08001f70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <BusFault_Handler+0x4>

08001f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <UsageFault_Handler+0x4>

08001f80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f94:	4802      	ldr	r0, [pc, #8]	@ (8001fa0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001f96:	f003 f8ec 	bl	8005172 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200003a0 	.word	0x200003a0

08001fa4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MPU6050_INT_Pin);
 8001fa8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001fac:	f000 fd04 	bl	80029b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001fb0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001fb4:	f000 fd00 	bl	80029b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return 1;
 8001fc0:	2301      	movs	r3, #1
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <_kill>:

int _kill(int pid, int sig)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fd6:	f009 f84d 	bl	800b074 <__errno>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2216      	movs	r2, #22
 8001fde:	601a      	str	r2, [r3, #0]
  return -1;
 8001fe0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <_exit>:

void _exit (int status)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ff4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ffe7 	bl	8001fcc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ffe:	bf00      	nop
 8002000:	e7fd      	b.n	8001ffe <_exit+0x12>

08002002 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b086      	sub	sp, #24
 8002006:	af00      	add	r7, sp, #0
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200e:	2300      	movs	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	e00a      	b.n	800202a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002014:	f3af 8000 	nop.w
 8002018:	4601      	mov	r1, r0
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	60ba      	str	r2, [r7, #8]
 8002020:	b2ca      	uxtb	r2, r1
 8002022:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	3301      	adds	r3, #1
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	429a      	cmp	r2, r3
 8002030:	dbf0      	blt.n	8002014 <_read+0x12>
  }

  return len;
 8002032:	687b      	ldr	r3, [r7, #4]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	e009      	b.n	8002062 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	60ba      	str	r2, [r7, #8]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	3301      	adds	r3, #1
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	429a      	cmp	r2, r3
 8002068:	dbf1      	blt.n	800204e <_write+0x12>
  }
  return len;
 800206a:	687b      	ldr	r3, [r7, #4]
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <_close>:

int _close(int file)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800207c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800209c:	605a      	str	r2, [r3, #4]
  return 0;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <_isatty>:

int _isatty(int file)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020b4:	2301      	movs	r3, #1
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b085      	sub	sp, #20
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	60f8      	str	r0, [r7, #12]
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020e4:	4a14      	ldr	r2, [pc, #80]	@ (8002138 <_sbrk+0x5c>)
 80020e6:	4b15      	ldr	r3, [pc, #84]	@ (800213c <_sbrk+0x60>)
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020f0:	4b13      	ldr	r3, [pc, #76]	@ (8002140 <_sbrk+0x64>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d102      	bne.n	80020fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020f8:	4b11      	ldr	r3, [pc, #68]	@ (8002140 <_sbrk+0x64>)
 80020fa:	4a12      	ldr	r2, [pc, #72]	@ (8002144 <_sbrk+0x68>)
 80020fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020fe:	4b10      	ldr	r3, [pc, #64]	@ (8002140 <_sbrk+0x64>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	429a      	cmp	r2, r3
 800210a:	d207      	bcs.n	800211c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800210c:	f008 ffb2 	bl	800b074 <__errno>
 8002110:	4603      	mov	r3, r0
 8002112:	220c      	movs	r2, #12
 8002114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002116:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800211a:	e009      	b.n	8002130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800211c:	4b08      	ldr	r3, [pc, #32]	@ (8002140 <_sbrk+0x64>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002122:	4b07      	ldr	r3, [pc, #28]	@ (8002140 <_sbrk+0x64>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	4a05      	ldr	r2, [pc, #20]	@ (8002140 <_sbrk+0x64>)
 800212c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800212e:	68fb      	ldr	r3, [r7, #12]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20018000 	.word	0x20018000
 800213c:	00000400 	.word	0x00000400
 8002140:	200003ec 	.word	0x200003ec
 8002144:	20001ee0 	.word	0x20001ee0

08002148 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800214c:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <SystemInit+0x20>)
 800214e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002152:	4a05      	ldr	r2, [pc, #20]	@ (8002168 <SystemInit+0x20>)
 8002154:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002158:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800216c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002170:	f7ff ffea 	bl	8002148 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002174:	480c      	ldr	r0, [pc, #48]	@ (80021a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002176:	490d      	ldr	r1, [pc, #52]	@ (80021ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002178:	4a0d      	ldr	r2, [pc, #52]	@ (80021b0 <LoopForever+0xe>)
  movs r3, #0
 800217a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800217c:	e002      	b.n	8002184 <LoopCopyDataInit>

0800217e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800217e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002182:	3304      	adds	r3, #4

08002184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002188:	d3f9      	bcc.n	800217e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218a:	4a0a      	ldr	r2, [pc, #40]	@ (80021b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800218c:	4c0a      	ldr	r4, [pc, #40]	@ (80021b8 <LoopForever+0x16>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002190:	e001      	b.n	8002196 <LoopFillZerobss>

08002192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002194:	3204      	adds	r2, #4

08002196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002198:	d3fb      	bcc.n	8002192 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800219a:	f008 ff71 	bl	800b080 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800219e:	f7fe fee9 	bl	8000f74 <main>

080021a2 <LoopForever>:

LoopForever:
    b LoopForever
 80021a2:	e7fe      	b.n	80021a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80021a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80021a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021ac:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80021b0:	0800dd60 	.word	0x0800dd60
  ldr r2, =_sbss
 80021b4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80021b8:	20001ee0 	.word	0x20001ee0

080021bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021bc:	e7fe      	b.n	80021bc <ADC1_2_IRQHandler>
	...

080021c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021ca:	4b0c      	ldr	r3, [pc, #48]	@ (80021fc <HAL_Init+0x3c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a0b      	ldr	r2, [pc, #44]	@ (80021fc <HAL_Init+0x3c>)
 80021d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d6:	2003      	movs	r0, #3
 80021d8:	f000 f903 	bl	80023e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021dc:	200f      	movs	r0, #15
 80021de:	f7ff fe4d 	bl	8001e7c <HAL_InitTick>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	71fb      	strb	r3, [r7, #7]
 80021ec:	e001      	b.n	80021f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021ee:	f7ff fcb5 	bl	8001b5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021f2:	79fb      	ldrb	r3, [r7, #7]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40022000 	.word	0x40022000

08002200 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002204:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <HAL_IncTick+0x20>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <HAL_IncTick+0x24>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4413      	add	r3, r2
 8002210:	4a04      	ldr	r2, [pc, #16]	@ (8002224 <HAL_IncTick+0x24>)
 8002212:	6013      	str	r3, [r2, #0]
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000008 	.word	0x20000008
 8002224:	200003f0 	.word	0x200003f0

08002228 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return uwTick;
 800222c:	4b03      	ldr	r3, [pc, #12]	@ (800223c <HAL_GetTick+0x14>)
 800222e:	681b      	ldr	r3, [r3, #0]
}
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	200003f0 	.word	0x200003f0

08002240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002248:	f7ff ffee 	bl	8002228 <HAL_GetTick>
 800224c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002258:	d005      	beq.n	8002266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800225a:	4b0a      	ldr	r3, [pc, #40]	@ (8002284 <HAL_Delay+0x44>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4413      	add	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002266:	bf00      	nop
 8002268:	f7ff ffde 	bl	8002228 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	429a      	cmp	r2, r3
 8002276:	d8f7      	bhi.n	8002268 <HAL_Delay+0x28>
  {
  }
}
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20000008 	.word	0x20000008

08002288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002298:	4b0c      	ldr	r3, [pc, #48]	@ (80022cc <__NVIC_SetPriorityGrouping+0x44>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800229e:	68ba      	ldr	r2, [r7, #8]
 80022a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022a4:	4013      	ands	r3, r2
 80022a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ba:	4a04      	ldr	r2, [pc, #16]	@ (80022cc <__NVIC_SetPriorityGrouping+0x44>)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	60d3      	str	r3, [r2, #12]
}
 80022c0:	bf00      	nop
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	e000ed00 	.word	0xe000ed00

080022d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022d4:	4b04      	ldr	r3, [pc, #16]	@ (80022e8 <__NVIC_GetPriorityGrouping+0x18>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	0a1b      	lsrs	r3, r3, #8
 80022da:	f003 0307 	and.w	r3, r3, #7
}
 80022de:	4618      	mov	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	db0b      	blt.n	8002316 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	f003 021f 	and.w	r2, r3, #31
 8002304:	4907      	ldr	r1, [pc, #28]	@ (8002324 <__NVIC_EnableIRQ+0x38>)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	2001      	movs	r0, #1
 800230e:	fa00 f202 	lsl.w	r2, r0, r2
 8002312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	e000e100 	.word	0xe000e100

08002328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	6039      	str	r1, [r7, #0]
 8002332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002338:	2b00      	cmp	r3, #0
 800233a:	db0a      	blt.n	8002352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	b2da      	uxtb	r2, r3
 8002340:	490c      	ldr	r1, [pc, #48]	@ (8002374 <__NVIC_SetPriority+0x4c>)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	0112      	lsls	r2, r2, #4
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	440b      	add	r3, r1
 800234c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002350:	e00a      	b.n	8002368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	b2da      	uxtb	r2, r3
 8002356:	4908      	ldr	r1, [pc, #32]	@ (8002378 <__NVIC_SetPriority+0x50>)
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	3b04      	subs	r3, #4
 8002360:	0112      	lsls	r2, r2, #4
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	440b      	add	r3, r1
 8002366:	761a      	strb	r2, [r3, #24]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000e100 	.word	0xe000e100
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800237c:	b480      	push	{r7}
 800237e:	b089      	sub	sp, #36	@ 0x24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	f1c3 0307 	rsb	r3, r3, #7
 8002396:	2b04      	cmp	r3, #4
 8002398:	bf28      	it	cs
 800239a:	2304      	movcs	r3, #4
 800239c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3304      	adds	r3, #4
 80023a2:	2b06      	cmp	r3, #6
 80023a4:	d902      	bls.n	80023ac <NVIC_EncodePriority+0x30>
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3b03      	subs	r3, #3
 80023aa:	e000      	b.n	80023ae <NVIC_EncodePriority+0x32>
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ba:	43da      	mvns	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	401a      	ands	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	fa01 f303 	lsl.w	r3, r1, r3
 80023ce:	43d9      	mvns	r1, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d4:	4313      	orrs	r3, r2
         );
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3724      	adds	r7, #36	@ 0x24
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff ff4c 	bl	8002288 <__NVIC_SetPriorityGrouping>
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800240a:	f7ff ff61 	bl	80022d0 <__NVIC_GetPriorityGrouping>
 800240e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	68b9      	ldr	r1, [r7, #8]
 8002414:	6978      	ldr	r0, [r7, #20]
 8002416:	f7ff ffb1 	bl	800237c <NVIC_EncodePriority>
 800241a:	4602      	mov	r2, r0
 800241c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002420:	4611      	mov	r1, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff ff80 	bl	8002328 <__NVIC_SetPriority>
}
 8002428:	bf00      	nop
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff ff54 	bl	80022ec <__NVIC_EnableIRQ>
}
 8002444:	bf00      	nop
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800244c:	b480      	push	{r7}
 800244e:	b087      	sub	sp, #28
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800245a:	e17f      	b.n	800275c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	2101      	movs	r1, #1
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	4013      	ands	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 8171 	beq.w	8002756 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	2b01      	cmp	r3, #1
 800247e:	d005      	beq.n	800248c <HAL_GPIO_Init+0x40>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0303 	and.w	r3, r3, #3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d130      	bne.n	80024ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	2203      	movs	r2, #3
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	68da      	ldr	r2, [r3, #12]
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024c2:	2201      	movs	r2, #1
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	091b      	lsrs	r3, r3, #4
 80024d8:	f003 0201 	and.w	r2, r3, #1
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d118      	bne.n	800252c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002500:	2201      	movs	r2, #1
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	08db      	lsrs	r3, r3, #3
 8002516:	f003 0201 	and.w	r2, r3, #1
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	2b03      	cmp	r3, #3
 8002536:	d017      	beq.n	8002568 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	2203      	movs	r2, #3
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43db      	mvns	r3, r3
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d123      	bne.n	80025bc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	08da      	lsrs	r2, r3, #3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3208      	adds	r2, #8
 800257c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002580:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	220f      	movs	r2, #15
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	08da      	lsrs	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3208      	adds	r2, #8
 80025b6:	6939      	ldr	r1, [r7, #16]
 80025b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	2203      	movs	r2, #3
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	43db      	mvns	r3, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0203 	and.w	r2, r3, #3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 80ac 	beq.w	8002756 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fe:	4b5f      	ldr	r3, [pc, #380]	@ (800277c <HAL_GPIO_Init+0x330>)
 8002600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002602:	4a5e      	ldr	r2, [pc, #376]	@ (800277c <HAL_GPIO_Init+0x330>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6613      	str	r3, [r2, #96]	@ 0x60
 800260a:	4b5c      	ldr	r3, [pc, #368]	@ (800277c <HAL_GPIO_Init+0x330>)
 800260c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002616:	4a5a      	ldr	r2, [pc, #360]	@ (8002780 <HAL_GPIO_Init+0x334>)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	089b      	lsrs	r3, r3, #2
 800261c:	3302      	adds	r3, #2
 800261e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002622:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	220f      	movs	r2, #15
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	4013      	ands	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002640:	d025      	beq.n	800268e <HAL_GPIO_Init+0x242>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4f      	ldr	r2, [pc, #316]	@ (8002784 <HAL_GPIO_Init+0x338>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d01f      	beq.n	800268a <HAL_GPIO_Init+0x23e>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4e      	ldr	r2, [pc, #312]	@ (8002788 <HAL_GPIO_Init+0x33c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d019      	beq.n	8002686 <HAL_GPIO_Init+0x23a>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4d      	ldr	r2, [pc, #308]	@ (800278c <HAL_GPIO_Init+0x340>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d013      	beq.n	8002682 <HAL_GPIO_Init+0x236>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a4c      	ldr	r2, [pc, #304]	@ (8002790 <HAL_GPIO_Init+0x344>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00d      	beq.n	800267e <HAL_GPIO_Init+0x232>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4b      	ldr	r2, [pc, #300]	@ (8002794 <HAL_GPIO_Init+0x348>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d007      	beq.n	800267a <HAL_GPIO_Init+0x22e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a4a      	ldr	r2, [pc, #296]	@ (8002798 <HAL_GPIO_Init+0x34c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d101      	bne.n	8002676 <HAL_GPIO_Init+0x22a>
 8002672:	2306      	movs	r3, #6
 8002674:	e00c      	b.n	8002690 <HAL_GPIO_Init+0x244>
 8002676:	2307      	movs	r3, #7
 8002678:	e00a      	b.n	8002690 <HAL_GPIO_Init+0x244>
 800267a:	2305      	movs	r3, #5
 800267c:	e008      	b.n	8002690 <HAL_GPIO_Init+0x244>
 800267e:	2304      	movs	r3, #4
 8002680:	e006      	b.n	8002690 <HAL_GPIO_Init+0x244>
 8002682:	2303      	movs	r3, #3
 8002684:	e004      	b.n	8002690 <HAL_GPIO_Init+0x244>
 8002686:	2302      	movs	r3, #2
 8002688:	e002      	b.n	8002690 <HAL_GPIO_Init+0x244>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <HAL_GPIO_Init+0x244>
 800268e:	2300      	movs	r3, #0
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	f002 0203 	and.w	r2, r2, #3
 8002696:	0092      	lsls	r2, r2, #2
 8002698:	4093      	lsls	r3, r2
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026a0:	4937      	ldr	r1, [pc, #220]	@ (8002780 <HAL_GPIO_Init+0x334>)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	089b      	lsrs	r3, r3, #2
 80026a6:	3302      	adds	r3, #2
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026ae:	4b3b      	ldr	r3, [pc, #236]	@ (800279c <HAL_GPIO_Init+0x350>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	43db      	mvns	r3, r3
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	4013      	ands	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026d2:	4a32      	ldr	r2, [pc, #200]	@ (800279c <HAL_GPIO_Init+0x350>)
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026d8:	4b30      	ldr	r3, [pc, #192]	@ (800279c <HAL_GPIO_Init+0x350>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	43db      	mvns	r3, r3
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	4013      	ands	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026fc:	4a27      	ldr	r2, [pc, #156]	@ (800279c <HAL_GPIO_Init+0x350>)
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002702:	4b26      	ldr	r3, [pc, #152]	@ (800279c <HAL_GPIO_Init+0x350>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	43db      	mvns	r3, r3
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4013      	ands	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4313      	orrs	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002726:	4a1d      	ldr	r2, [pc, #116]	@ (800279c <HAL_GPIO_Init+0x350>)
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800272c:	4b1b      	ldr	r3, [pc, #108]	@ (800279c <HAL_GPIO_Init+0x350>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	43db      	mvns	r3, r3
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	4013      	ands	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4313      	orrs	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002750:	4a12      	ldr	r2, [pc, #72]	@ (800279c <HAL_GPIO_Init+0x350>)
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	3301      	adds	r3, #1
 800275a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	fa22 f303 	lsr.w	r3, r2, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	f47f ae78 	bne.w	800245c <HAL_GPIO_Init+0x10>
  }
}
 800276c:	bf00      	nop
 800276e:	bf00      	nop
 8002770:	371c      	adds	r7, #28
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000
 8002780:	40010000 	.word	0x40010000
 8002784:	48000400 	.word	0x48000400
 8002788:	48000800 	.word	0x48000800
 800278c:	48000c00 	.word	0x48000c00
 8002790:	48001000 	.word	0x48001000
 8002794:	48001400 	.word	0x48001400
 8002798:	48001800 	.word	0x48001800
 800279c:	40010400 	.word	0x40010400

080027a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80027ae:	e0cd      	b.n	800294c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80027b0:	2201      	movs	r2, #1
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	4013      	ands	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 80c0 	beq.w	8002946 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80027c6:	4a68      	ldr	r2, [pc, #416]	@ (8002968 <HAL_GPIO_DeInit+0x1c8>)
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	089b      	lsrs	r3, r3, #2
 80027cc:	3302      	adds	r3, #2
 80027ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	220f      	movs	r2, #15
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4013      	ands	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80027ee:	d025      	beq.n	800283c <HAL_GPIO_DeInit+0x9c>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a5e      	ldr	r2, [pc, #376]	@ (800296c <HAL_GPIO_DeInit+0x1cc>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d01f      	beq.n	8002838 <HAL_GPIO_DeInit+0x98>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a5d      	ldr	r2, [pc, #372]	@ (8002970 <HAL_GPIO_DeInit+0x1d0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d019      	beq.n	8002834 <HAL_GPIO_DeInit+0x94>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a5c      	ldr	r2, [pc, #368]	@ (8002974 <HAL_GPIO_DeInit+0x1d4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d013      	beq.n	8002830 <HAL_GPIO_DeInit+0x90>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a5b      	ldr	r2, [pc, #364]	@ (8002978 <HAL_GPIO_DeInit+0x1d8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d00d      	beq.n	800282c <HAL_GPIO_DeInit+0x8c>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a5a      	ldr	r2, [pc, #360]	@ (800297c <HAL_GPIO_DeInit+0x1dc>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d007      	beq.n	8002828 <HAL_GPIO_DeInit+0x88>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a59      	ldr	r2, [pc, #356]	@ (8002980 <HAL_GPIO_DeInit+0x1e0>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d101      	bne.n	8002824 <HAL_GPIO_DeInit+0x84>
 8002820:	2306      	movs	r3, #6
 8002822:	e00c      	b.n	800283e <HAL_GPIO_DeInit+0x9e>
 8002824:	2307      	movs	r3, #7
 8002826:	e00a      	b.n	800283e <HAL_GPIO_DeInit+0x9e>
 8002828:	2305      	movs	r3, #5
 800282a:	e008      	b.n	800283e <HAL_GPIO_DeInit+0x9e>
 800282c:	2304      	movs	r3, #4
 800282e:	e006      	b.n	800283e <HAL_GPIO_DeInit+0x9e>
 8002830:	2303      	movs	r3, #3
 8002832:	e004      	b.n	800283e <HAL_GPIO_DeInit+0x9e>
 8002834:	2302      	movs	r3, #2
 8002836:	e002      	b.n	800283e <HAL_GPIO_DeInit+0x9e>
 8002838:	2301      	movs	r3, #1
 800283a:	e000      	b.n	800283e <HAL_GPIO_DeInit+0x9e>
 800283c:	2300      	movs	r3, #0
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	f002 0203 	and.w	r2, r2, #3
 8002844:	0092      	lsls	r2, r2, #2
 8002846:	4093      	lsls	r3, r2
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	429a      	cmp	r2, r3
 800284c:	d132      	bne.n	80028b4 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800284e:	4b4d      	ldr	r3, [pc, #308]	@ (8002984 <HAL_GPIO_DeInit+0x1e4>)
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	43db      	mvns	r3, r3
 8002856:	494b      	ldr	r1, [pc, #300]	@ (8002984 <HAL_GPIO_DeInit+0x1e4>)
 8002858:	4013      	ands	r3, r2
 800285a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800285c:	4b49      	ldr	r3, [pc, #292]	@ (8002984 <HAL_GPIO_DeInit+0x1e4>)
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	43db      	mvns	r3, r3
 8002864:	4947      	ldr	r1, [pc, #284]	@ (8002984 <HAL_GPIO_DeInit+0x1e4>)
 8002866:	4013      	ands	r3, r2
 8002868:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800286a:	4b46      	ldr	r3, [pc, #280]	@ (8002984 <HAL_GPIO_DeInit+0x1e4>)
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	43db      	mvns	r3, r3
 8002872:	4944      	ldr	r1, [pc, #272]	@ (8002984 <HAL_GPIO_DeInit+0x1e4>)
 8002874:	4013      	ands	r3, r2
 8002876:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002878:	4b42      	ldr	r3, [pc, #264]	@ (8002984 <HAL_GPIO_DeInit+0x1e4>)
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	43db      	mvns	r3, r3
 8002880:	4940      	ldr	r1, [pc, #256]	@ (8002984 <HAL_GPIO_DeInit+0x1e4>)
 8002882:	4013      	ands	r3, r2
 8002884:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	220f      	movs	r2, #15
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002896:	4a34      	ldr	r2, [pc, #208]	@ (8002968 <HAL_GPIO_DeInit+0x1c8>)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	089b      	lsrs	r3, r3, #2
 800289c:	3302      	adds	r3, #2
 800289e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	43da      	mvns	r2, r3
 80028a6:	4830      	ldr	r0, [pc, #192]	@ (8002968 <HAL_GPIO_DeInit+0x1c8>)
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	089b      	lsrs	r3, r3, #2
 80028ac:	400a      	ands	r2, r1
 80028ae:	3302      	adds	r3, #2
 80028b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	2103      	movs	r1, #3
 80028be:	fa01 f303 	lsl.w	r3, r1, r3
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	08da      	lsrs	r2, r3, #3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3208      	adds	r2, #8
 80028d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	220f      	movs	r2, #15
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	08d2      	lsrs	r2, r2, #3
 80028e8:	4019      	ands	r1, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3208      	adds	r2, #8
 80028ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	2103      	movs	r1, #3
 80028fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	401a      	ands	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	2101      	movs	r1, #1
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	fa01 f303 	lsl.w	r3, r1, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	401a      	ands	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	2103      	movs	r1, #3
 8002926:	fa01 f303 	lsl.w	r3, r1, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	401a      	ands	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002936:	2101      	movs	r1, #1
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa01 f303 	lsl.w	r3, r1, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	401a      	ands	r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	3301      	adds	r3, #1
 800294a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	f47f af2b 	bne.w	80027b0 <HAL_GPIO_DeInit+0x10>
  }
}
 800295a:	bf00      	nop
 800295c:	bf00      	nop
 800295e:	371c      	adds	r7, #28
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	40010000 	.word	0x40010000
 800296c:	48000400 	.word	0x48000400
 8002970:	48000800 	.word	0x48000800
 8002974:	48000c00 	.word	0x48000c00
 8002978:	48001000 	.word	0x48001000
 800297c:	48001400 	.word	0x48001400
 8002980:	48001800 	.word	0x48001800
 8002984:	40010400 	.word	0x40010400

08002988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	807b      	strh	r3, [r7, #2]
 8002994:	4613      	mov	r3, r2
 8002996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002998:	787b      	ldrb	r3, [r7, #1]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800299e:	887a      	ldrh	r2, [r7, #2]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029a4:	e002      	b.n	80029ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029a6:	887a      	ldrh	r2, [r7, #2]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029c2:	4b08      	ldr	r3, [pc, #32]	@ (80029e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	88fb      	ldrh	r3, [r7, #6]
 80029c8:	4013      	ands	r3, r2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d006      	beq.n	80029dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029ce:	4a05      	ldr	r2, [pc, #20]	@ (80029e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029d4:	88fb      	ldrh	r3, [r7, #6]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff f81a 	bl	8001a10 <HAL_GPIO_EXTI_Callback>
  }
}
 80029dc:	bf00      	nop
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40010400 	.word	0x40010400

080029e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e08d      	b.n	8002b16 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d106      	bne.n	8002a14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff f8cc 	bl	8001bac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2224      	movs	r2, #36	@ 0x24
 8002a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0201 	bic.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d107      	bne.n	8002a62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	e006      	b.n	8002a70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002a6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d108      	bne.n	8002a8a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a86:	605a      	str	r2, [r3, #4]
 8002a88:	e007      	b.n	8002a9a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6812      	ldr	r2, [r2, #0]
 8002aa4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002aa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002aac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002abc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	691a      	ldr	r2, [r3, #16]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69d9      	ldr	r1, [r3, #28]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1a      	ldr	r2, [r3, #32]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0201 	orr.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2220      	movs	r2, #32
 8002b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e021      	b.n	8002b74 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2224      	movs	r2, #36	@ 0x24
 8002b34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0201 	bic.w	r2, r2, #1
 8002b46:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff f88d 	bl	8001c68 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3708      	adds	r7, #8
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	4608      	mov	r0, r1
 8002b86:	4611      	mov	r1, r2
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	817b      	strh	r3, [r7, #10]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	813b      	strh	r3, [r7, #8]
 8002b92:	4613      	mov	r3, r2
 8002b94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b20      	cmp	r3, #32
 8002ba0:	f040 80f9 	bne.w	8002d96 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <HAL_I2C_Mem_Write+0x34>
 8002baa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d105      	bne.n	8002bbc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002bb6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0ed      	b.n	8002d98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_I2C_Mem_Write+0x4e>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e0e6      	b.n	8002d98 <HAL_I2C_Mem_Write+0x21c>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bd2:	f7ff fb29 	bl	8002228 <HAL_GetTick>
 8002bd6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	2319      	movs	r3, #25
 8002bde:	2201      	movs	r2, #1
 8002be0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 fbbb 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0d1      	b.n	8002d98 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2221      	movs	r2, #33	@ 0x21
 8002bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2240      	movs	r2, #64	@ 0x40
 8002c00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6a3a      	ldr	r2, [r7, #32]
 8002c0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002c14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c1c:	88f8      	ldrh	r0, [r7, #6]
 8002c1e:	893a      	ldrh	r2, [r7, #8]
 8002c20:	8979      	ldrh	r1, [r7, #10]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	9301      	str	r3, [sp, #4]
 8002c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 facb 	bl	80031c8 <I2C_RequestMemoryWrite>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0a9      	b.n	8002d98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	2bff      	cmp	r3, #255	@ 0xff
 8002c4c:	d90e      	bls.n	8002c6c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	22ff      	movs	r2, #255	@ 0xff
 8002c52:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	8979      	ldrh	r1, [r7, #10]
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 fd3f 	bl	80036e8 <I2C_TransferConfig>
 8002c6a:	e00f      	b.n	8002c8c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	8979      	ldrh	r1, [r7, #10]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 fd2e 	bl	80036e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 fbbe 	bl	8003412 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e07b      	b.n	8002d98 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca4:	781a      	ldrb	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb0:	1c5a      	adds	r2, r3, #1
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d034      	beq.n	8002d44 <HAL_I2C_Mem_Write+0x1c8>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d130      	bne.n	8002d44 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2180      	movs	r1, #128	@ 0x80
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 fb37 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e04d      	b.n	8002d98 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2bff      	cmp	r3, #255	@ 0xff
 8002d04:	d90e      	bls.n	8002d24 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	22ff      	movs	r2, #255	@ 0xff
 8002d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	8979      	ldrh	r1, [r7, #10]
 8002d14:	2300      	movs	r3, #0
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 fce3 	bl	80036e8 <I2C_TransferConfig>
 8002d22:	e00f      	b.n	8002d44 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	8979      	ldrh	r1, [r7, #10]
 8002d36:	2300      	movs	r3, #0
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 fcd2 	bl	80036e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d19e      	bne.n	8002c8c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d4e:	697a      	ldr	r2, [r7, #20]
 8002d50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 fba4 	bl	80034a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e01a      	b.n	8002d98 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2220      	movs	r2, #32
 8002d68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6859      	ldr	r1, [r3, #4]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4b0a      	ldr	r3, [pc, #40]	@ (8002da0 <HAL_I2C_Mem_Write+0x224>)
 8002d76:	400b      	ands	r3, r1
 8002d78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d92:	2300      	movs	r3, #0
 8002d94:	e000      	b.n	8002d98 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002d96:	2302      	movs	r3, #2
  }
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	fe00e800 	.word	0xfe00e800

08002da4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b088      	sub	sp, #32
 8002da8:	af02      	add	r7, sp, #8
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	4608      	mov	r0, r1
 8002dae:	4611      	mov	r1, r2
 8002db0:	461a      	mov	r2, r3
 8002db2:	4603      	mov	r3, r0
 8002db4:	817b      	strh	r3, [r7, #10]
 8002db6:	460b      	mov	r3, r1
 8002db8:	813b      	strh	r3, [r7, #8]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b20      	cmp	r3, #32
 8002dc8:	f040 80fd 	bne.w	8002fc6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <HAL_I2C_Mem_Read+0x34>
 8002dd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d105      	bne.n	8002de4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dde:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0f1      	b.n	8002fc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_I2C_Mem_Read+0x4e>
 8002dee:	2302      	movs	r3, #2
 8002df0:	e0ea      	b.n	8002fc8 <HAL_I2C_Mem_Read+0x224>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dfa:	f7ff fa15 	bl	8002228 <HAL_GetTick>
 8002dfe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	2319      	movs	r3, #25
 8002e06:	2201      	movs	r2, #1
 8002e08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 faa7 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0d5      	b.n	8002fc8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2222      	movs	r2, #34	@ 0x22
 8002e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2240      	movs	r2, #64	@ 0x40
 8002e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a3a      	ldr	r2, [r7, #32]
 8002e36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e44:	88f8      	ldrh	r0, [r7, #6]
 8002e46:	893a      	ldrh	r2, [r7, #8]
 8002e48:	8979      	ldrh	r1, [r7, #10]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	9301      	str	r3, [sp, #4]
 8002e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	4603      	mov	r3, r0
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f000 fa0b 	bl	8003270 <I2C_RequestMemoryRead>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d005      	beq.n	8002e6c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e0ad      	b.n	8002fc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2bff      	cmp	r3, #255	@ 0xff
 8002e74:	d90e      	bls.n	8002e94 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	8979      	ldrh	r1, [r7, #10]
 8002e84:	4b52      	ldr	r3, [pc, #328]	@ (8002fd0 <HAL_I2C_Mem_Read+0x22c>)
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 fc2b 	bl	80036e8 <I2C_TransferConfig>
 8002e92:	e00f      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	8979      	ldrh	r1, [r7, #10]
 8002ea6:	4b4a      	ldr	r3, [pc, #296]	@ (8002fd0 <HAL_I2C_Mem_Read+0x22c>)
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 fc1a 	bl	80036e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2104      	movs	r1, #4
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 fa4e 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e07c      	b.n	8002fc8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed8:	b2d2      	uxtb	r2, r2
 8002eda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d034      	beq.n	8002f74 <HAL_I2C_Mem_Read+0x1d0>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d130      	bne.n	8002f74 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f18:	2200      	movs	r2, #0
 8002f1a:	2180      	movs	r1, #128	@ 0x80
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 fa1f 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e04d      	b.n	8002fc8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	2bff      	cmp	r3, #255	@ 0xff
 8002f34:	d90e      	bls.n	8002f54 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	8979      	ldrh	r1, [r7, #10]
 8002f44:	2300      	movs	r3, #0
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 fbcb 	bl	80036e8 <I2C_TransferConfig>
 8002f52:	e00f      	b.n	8002f74 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	8979      	ldrh	r1, [r7, #10]
 8002f66:	2300      	movs	r3, #0
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 fbba 	bl	80036e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d19a      	bne.n	8002eb4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f7e:	697a      	ldr	r2, [r7, #20]
 8002f80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fa8c 	bl	80034a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e01a      	b.n	8002fc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2220      	movs	r2, #32
 8002f98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6859      	ldr	r1, [r3, #4]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002fd4 <HAL_I2C_Mem_Read+0x230>)
 8002fa6:	400b      	ands	r3, r1
 8002fa8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2220      	movs	r2, #32
 8002fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e000      	b.n	8002fc8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002fc6:	2302      	movs	r3, #2
  }
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	80002400 	.word	0x80002400
 8002fd4:	fe00e800 	.word	0xfe00e800

08002fd8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	@ 0x28
 8002fdc:	af02      	add	r7, sp, #8
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	607a      	str	r2, [r7, #4]
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	f040 80d6 	bne.w	80031a6 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003004:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003008:	d101      	bne.n	800300e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800300a:	2302      	movs	r3, #2
 800300c:	e0cc      	b.n	80031a8 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_I2C_IsDeviceReady+0x44>
 8003018:	2302      	movs	r3, #2
 800301a:	e0c5      	b.n	80031a8 <HAL_I2C_IsDeviceReady+0x1d0>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2224      	movs	r2, #36	@ 0x24
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d107      	bne.n	800304a <HAL_I2C_IsDeviceReady+0x72>
 800303a:	897b      	ldrh	r3, [r7, #10]
 800303c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003040:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003044:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003048:	e006      	b.n	8003058 <HAL_I2C_IsDeviceReady+0x80>
 800304a:	897b      	ldrh	r3, [r7, #10]
 800304c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003050:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003054:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800305e:	f7ff f8e3 	bl	8002228 <HAL_GetTick>
 8003062:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b20      	cmp	r3, #32
 8003070:	bf0c      	ite	eq
 8003072:	2301      	moveq	r3, #1
 8003074:	2300      	movne	r3, #0
 8003076:	b2db      	uxtb	r3, r3
 8003078:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	2b10      	cmp	r3, #16
 8003086:	bf0c      	ite	eq
 8003088:	2301      	moveq	r3, #1
 800308a:	2300      	movne	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003090:	e034      	b.n	80030fc <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003098:	d01a      	beq.n	80030d0 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800309a:	f7ff f8c5 	bl	8002228 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d302      	bcc.n	80030b0 <HAL_I2C_IsDeviceReady+0xd8>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d10f      	bne.n	80030d0 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030bc:	f043 0220 	orr.w	r2, r3, #32
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e06b      	b.n	80031a8 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f003 0320 	and.w	r3, r3, #32
 80030da:	2b20      	cmp	r3, #32
 80030dc:	bf0c      	ite	eq
 80030de:	2301      	moveq	r3, #1
 80030e0:	2300      	movne	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80030fc:	7ffb      	ldrb	r3, [r7, #31]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d102      	bne.n	8003108 <HAL_I2C_IsDeviceReady+0x130>
 8003102:	7fbb      	ldrb	r3, [r7, #30]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0c4      	beq.n	8003092 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	2b10      	cmp	r3, #16
 8003114:	d01a      	beq.n	800314c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2200      	movs	r2, #0
 800311e:	2120      	movs	r1, #32
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 f91d 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e03b      	b.n	80031a8 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2220      	movs	r2, #32
 8003136:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	e02d      	b.n	80031a8 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	9300      	str	r3, [sp, #0]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2200      	movs	r2, #0
 8003154:	2120      	movs	r1, #32
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 f902 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e020      	b.n	80031a8 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2210      	movs	r2, #16
 800316c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2220      	movs	r2, #32
 8003174:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	3301      	adds	r3, #1
 800317a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	429a      	cmp	r2, r3
 8003182:	f63f af56 	bhi.w	8003032 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003192:	f043 0220 	orr.w	r2, r3, #32
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80031a6:	2302      	movs	r3, #2
  }
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3720      	adds	r7, #32
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80031bc:	4618      	mov	r0, r3
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af02      	add	r7, sp, #8
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	4608      	mov	r0, r1
 80031d2:	4611      	mov	r1, r2
 80031d4:	461a      	mov	r2, r3
 80031d6:	4603      	mov	r3, r0
 80031d8:	817b      	strh	r3, [r7, #10]
 80031da:	460b      	mov	r3, r1
 80031dc:	813b      	strh	r3, [r7, #8]
 80031de:	4613      	mov	r3, r2
 80031e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	8979      	ldrh	r1, [r7, #10]
 80031e8:	4b20      	ldr	r3, [pc, #128]	@ (800326c <I2C_RequestMemoryWrite+0xa4>)
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 fa79 	bl	80036e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031f6:	69fa      	ldr	r2, [r7, #28]
 80031f8:	69b9      	ldr	r1, [r7, #24]
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 f909 	bl	8003412 <I2C_WaitOnTXISFlagUntilTimeout>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e02c      	b.n	8003264 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800320a:	88fb      	ldrh	r3, [r7, #6]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d105      	bne.n	800321c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003210:	893b      	ldrh	r3, [r7, #8]
 8003212:	b2da      	uxtb	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	629a      	str	r2, [r3, #40]	@ 0x28
 800321a:	e015      	b.n	8003248 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800321c:	893b      	ldrh	r3, [r7, #8]
 800321e:	0a1b      	lsrs	r3, r3, #8
 8003220:	b29b      	uxth	r3, r3
 8003222:	b2da      	uxtb	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800322a:	69fa      	ldr	r2, [r7, #28]
 800322c:	69b9      	ldr	r1, [r7, #24]
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 f8ef 	bl	8003412 <I2C_WaitOnTXISFlagUntilTimeout>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e012      	b.n	8003264 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800323e:	893b      	ldrh	r3, [r7, #8]
 8003240:	b2da      	uxtb	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	2200      	movs	r2, #0
 8003250:	2180      	movs	r1, #128	@ 0x80
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 f884 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	80002000 	.word	0x80002000

08003270 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af02      	add	r7, sp, #8
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	4608      	mov	r0, r1
 800327a:	4611      	mov	r1, r2
 800327c:	461a      	mov	r2, r3
 800327e:	4603      	mov	r3, r0
 8003280:	817b      	strh	r3, [r7, #10]
 8003282:	460b      	mov	r3, r1
 8003284:	813b      	strh	r3, [r7, #8]
 8003286:	4613      	mov	r3, r2
 8003288:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800328a:	88fb      	ldrh	r3, [r7, #6]
 800328c:	b2da      	uxtb	r2, r3
 800328e:	8979      	ldrh	r1, [r7, #10]
 8003290:	4b20      	ldr	r3, [pc, #128]	@ (8003314 <I2C_RequestMemoryRead+0xa4>)
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	2300      	movs	r3, #0
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 fa26 	bl	80036e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800329c:	69fa      	ldr	r2, [r7, #28]
 800329e:	69b9      	ldr	r1, [r7, #24]
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f8b6 	bl	8003412 <I2C_WaitOnTXISFlagUntilTimeout>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e02c      	b.n	800330a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032b0:	88fb      	ldrh	r3, [r7, #6]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d105      	bne.n	80032c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032b6:	893b      	ldrh	r3, [r7, #8]
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	629a      	str	r2, [r3, #40]	@ 0x28
 80032c0:	e015      	b.n	80032ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80032c2:	893b      	ldrh	r3, [r7, #8]
 80032c4:	0a1b      	lsrs	r3, r3, #8
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032d0:	69fa      	ldr	r2, [r7, #28]
 80032d2:	69b9      	ldr	r1, [r7, #24]
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 f89c 	bl	8003412 <I2C_WaitOnTXISFlagUntilTimeout>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e012      	b.n	800330a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032e4:	893b      	ldrh	r3, [r7, #8]
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	2200      	movs	r2, #0
 80032f6:	2140      	movs	r1, #64	@ 0x40
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 f831 	bl	8003360 <I2C_WaitOnFlagUntilTimeout>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	80002000 	.word	0x80002000

08003318 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b02      	cmp	r3, #2
 800332c:	d103      	bne.n	8003336 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2200      	movs	r2, #0
 8003334:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b01      	cmp	r3, #1
 8003342:	d007      	beq.n	8003354 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	619a      	str	r2, [r3, #24]
  }
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	4613      	mov	r3, r2
 800336e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003370:	e03b      	b.n	80033ea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	6839      	ldr	r1, [r7, #0]
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f8d6 	bl	8003528 <I2C_IsErrorOccurred>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e041      	b.n	800340a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800338c:	d02d      	beq.n	80033ea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800338e:	f7fe ff4b 	bl	8002228 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d302      	bcc.n	80033a4 <I2C_WaitOnFlagUntilTimeout+0x44>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d122      	bne.n	80033ea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	4013      	ands	r3, r2
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	bf0c      	ite	eq
 80033b4:	2301      	moveq	r3, #1
 80033b6:	2300      	movne	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	461a      	mov	r2, r3
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d113      	bne.n	80033ea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c6:	f043 0220 	orr.w	r2, r3, #32
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2220      	movs	r2, #32
 80033d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e00f      	b.n	800340a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699a      	ldr	r2, [r3, #24]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	4013      	ands	r3, r2
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	bf0c      	ite	eq
 80033fa:	2301      	moveq	r3, #1
 80033fc:	2300      	movne	r3, #0
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	429a      	cmp	r2, r3
 8003406:	d0b4      	beq.n	8003372 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b084      	sub	sp, #16
 8003416:	af00      	add	r7, sp, #0
 8003418:	60f8      	str	r0, [r7, #12]
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800341e:	e033      	b.n	8003488 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	68b9      	ldr	r1, [r7, #8]
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 f87f 	bl	8003528 <I2C_IsErrorOccurred>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e031      	b.n	8003498 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800343a:	d025      	beq.n	8003488 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800343c:	f7fe fef4 	bl	8002228 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	429a      	cmp	r2, r3
 800344a:	d302      	bcc.n	8003452 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d11a      	bne.n	8003488 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b02      	cmp	r3, #2
 800345e:	d013      	beq.n	8003488 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003464:	f043 0220 	orr.w	r2, r3, #32
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e007      	b.n	8003498 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b02      	cmp	r3, #2
 8003494:	d1c4      	bne.n	8003420 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034ac:	e02f      	b.n	800350e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 f838 	bl	8003528 <I2C_IsErrorOccurred>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e02d      	b.n	800351e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034c2:	f7fe feb1 	bl	8002228 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d302      	bcc.n	80034d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d11a      	bne.n	800350e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	d013      	beq.n	800350e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ea:	f043 0220 	orr.w	r2, r3, #32
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e007      	b.n	800351e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b20      	cmp	r3, #32
 800351a:	d1c8      	bne.n	80034ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08a      	sub	sp, #40	@ 0x28
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003534:	2300      	movs	r3, #0
 8003536:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	699b      	ldr	r3, [r3, #24]
 8003540:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003542:	2300      	movs	r3, #0
 8003544:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	f003 0310 	and.w	r3, r3, #16
 8003550:	2b00      	cmp	r3, #0
 8003552:	d068      	beq.n	8003626 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2210      	movs	r2, #16
 800355a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800355c:	e049      	b.n	80035f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003564:	d045      	beq.n	80035f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003566:	f7fe fe5f 	bl	8002228 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	429a      	cmp	r2, r3
 8003574:	d302      	bcc.n	800357c <I2C_IsErrorOccurred+0x54>
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d13a      	bne.n	80035f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003586:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800358e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800359a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800359e:	d121      	bne.n	80035e4 <I2C_IsErrorOccurred+0xbc>
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035a6:	d01d      	beq.n	80035e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80035a8:	7cfb      	ldrb	r3, [r7, #19]
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	d01a      	beq.n	80035e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80035be:	f7fe fe33 	bl	8002228 <HAL_GetTick>
 80035c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035c4:	e00e      	b.n	80035e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80035c6:	f7fe fe2f 	bl	8002228 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b19      	cmp	r3, #25
 80035d2:	d907      	bls.n	80035e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	f043 0320 	orr.w	r3, r3, #32
 80035da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80035e2:	e006      	b.n	80035f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b20      	cmp	r3, #32
 80035f0:	d1e9      	bne.n	80035c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	d003      	beq.n	8003608 <I2C_IsErrorOccurred+0xe0>
 8003600:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0aa      	beq.n	800355e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800360c:	2b00      	cmp	r3, #0
 800360e:	d103      	bne.n	8003618 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2220      	movs	r2, #32
 8003616:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	f043 0304 	orr.w	r3, r3, #4
 800361e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00b      	beq.n	8003650 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	f043 0301 	orr.w	r3, r3, #1
 800363e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003648:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00b      	beq.n	8003672 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	f043 0308 	orr.w	r3, r3, #8
 8003660:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800366a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00b      	beq.n	8003694 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	f043 0302 	orr.w	r3, r3, #2
 8003682:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800368c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003694:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003698:	2b00      	cmp	r3, #0
 800369a:	d01c      	beq.n	80036d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f7ff fe3b 	bl	8003318 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6859      	ldr	r1, [r3, #4]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	4b0d      	ldr	r3, [pc, #52]	@ (80036e4 <I2C_IsErrorOccurred+0x1bc>)
 80036ae:	400b      	ands	r3, r1
 80036b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	431a      	orrs	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80036d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3728      	adds	r7, #40	@ 0x28
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	fe00e800 	.word	0xfe00e800

080036e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	607b      	str	r3, [r7, #4]
 80036f2:	460b      	mov	r3, r1
 80036f4:	817b      	strh	r3, [r7, #10]
 80036f6:	4613      	mov	r3, r2
 80036f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036fa:	897b      	ldrh	r3, [r7, #10]
 80036fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003700:	7a7b      	ldrb	r3, [r7, #9]
 8003702:	041b      	lsls	r3, r3, #16
 8003704:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003708:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	4313      	orrs	r3, r2
 8003712:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003716:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	0d5b      	lsrs	r3, r3, #21
 8003722:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003726:	4b08      	ldr	r3, [pc, #32]	@ (8003748 <I2C_TransferConfig+0x60>)
 8003728:	430b      	orrs	r3, r1
 800372a:	43db      	mvns	r3, r3
 800372c:	ea02 0103 	and.w	r1, r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	430a      	orrs	r2, r1
 8003738:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800373a:	bf00      	nop
 800373c:	371c      	adds	r7, #28
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	03ff63ff 	.word	0x03ff63ff

0800374c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b20      	cmp	r3, #32
 8003760:	d138      	bne.n	80037d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800376c:	2302      	movs	r3, #2
 800376e:	e032      	b.n	80037d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2224      	movs	r2, #36	@ 0x24
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0201 	bic.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800379e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6819      	ldr	r1, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0201 	orr.w	r2, r2, #1
 80037be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	e000      	b.n	80037d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037d4:	2302      	movs	r3, #2
  }
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b085      	sub	sp, #20
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	d139      	bne.n	800386c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d101      	bne.n	8003806 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003802:	2302      	movs	r3, #2
 8003804:	e033      	b.n	800386e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2224      	movs	r2, #36	@ 0x24
 8003812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0201 	bic.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003834:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	021b      	lsls	r3, r3, #8
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4313      	orrs	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68fa      	ldr	r2, [r7, #12]
 8003846:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	e000      	b.n	800386e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800386c:	2302      	movs	r3, #2
  }
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
	...

0800387c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003880:	4b04      	ldr	r3, [pc, #16]	@ (8003894 <HAL_PWREx_GetVoltageRange+0x18>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003888:	4618      	mov	r0, r3
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40007000 	.word	0x40007000

08003898 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038a6:	d130      	bne.n	800390a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80038a8:	4b23      	ldr	r3, [pc, #140]	@ (8003938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038b4:	d038      	beq.n	8003928 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038b6:	4b20      	ldr	r3, [pc, #128]	@ (8003938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038be:	4a1e      	ldr	r2, [pc, #120]	@ (8003938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038c4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038c6:	4b1d      	ldr	r3, [pc, #116]	@ (800393c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2232      	movs	r2, #50	@ 0x32
 80038cc:	fb02 f303 	mul.w	r3, r2, r3
 80038d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003940 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80038d2:	fba2 2303 	umull	r2, r3, r2, r3
 80038d6:	0c9b      	lsrs	r3, r3, #18
 80038d8:	3301      	adds	r3, #1
 80038da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038dc:	e002      	b.n	80038e4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	3b01      	subs	r3, #1
 80038e2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038e4:	4b14      	ldr	r3, [pc, #80]	@ (8003938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038f0:	d102      	bne.n	80038f8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1f2      	bne.n	80038de <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003900:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003904:	d110      	bne.n	8003928 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e00f      	b.n	800392a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800390a:	4b0b      	ldr	r3, [pc, #44]	@ (8003938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003912:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003916:	d007      	beq.n	8003928 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003918:	4b07      	ldr	r3, [pc, #28]	@ (8003938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003920:	4a05      	ldr	r2, [pc, #20]	@ (8003938 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003922:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003926:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40007000 	.word	0x40007000
 800393c:	20000000 	.word	0x20000000
 8003940:	431bde83 	.word	0x431bde83

08003944 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e3ca      	b.n	80040ec <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003956:	4b97      	ldr	r3, [pc, #604]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
 800395e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003960:	4b94      	ldr	r3, [pc, #592]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0310 	and.w	r3, r3, #16
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 80e4 	beq.w	8003b40 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d007      	beq.n	800398e <HAL_RCC_OscConfig+0x4a>
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2b0c      	cmp	r3, #12
 8003982:	f040 808b 	bne.w	8003a9c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2b01      	cmp	r3, #1
 800398a:	f040 8087 	bne.w	8003a9c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800398e:	4b89      	ldr	r3, [pc, #548]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d005      	beq.n	80039a6 <HAL_RCC_OscConfig+0x62>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e3a2      	b.n	80040ec <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a1a      	ldr	r2, [r3, #32]
 80039aa:	4b82      	ldr	r3, [pc, #520]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d004      	beq.n	80039c0 <HAL_RCC_OscConfig+0x7c>
 80039b6:	4b7f      	ldr	r3, [pc, #508]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039be:	e005      	b.n	80039cc <HAL_RCC_OscConfig+0x88>
 80039c0:	4b7c      	ldr	r3, [pc, #496]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 80039c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039c6:	091b      	lsrs	r3, r3, #4
 80039c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d223      	bcs.n	8003a18 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 fd87 	bl	80044e8 <RCC_SetFlashLatencyFromMSIRange>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e383      	b.n	80040ec <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039e4:	4b73      	ldr	r3, [pc, #460]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a72      	ldr	r2, [pc, #456]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 80039ea:	f043 0308 	orr.w	r3, r3, #8
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	4b70      	ldr	r3, [pc, #448]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	496d      	ldr	r1, [pc, #436]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a02:	4b6c      	ldr	r3, [pc, #432]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	021b      	lsls	r3, r3, #8
 8003a10:	4968      	ldr	r1, [pc, #416]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	604b      	str	r3, [r1, #4]
 8003a16:	e025      	b.n	8003a64 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a18:	4b66      	ldr	r3, [pc, #408]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a65      	ldr	r2, [pc, #404]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003a1e:	f043 0308 	orr.w	r3, r3, #8
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	4b63      	ldr	r3, [pc, #396]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	4960      	ldr	r1, [pc, #384]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a36:	4b5f      	ldr	r3, [pc, #380]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	021b      	lsls	r3, r3, #8
 8003a44:	495b      	ldr	r1, [pc, #364]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d109      	bne.n	8003a64 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 fd47 	bl	80044e8 <RCC_SetFlashLatencyFromMSIRange>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e343      	b.n	80040ec <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a64:	f000 fc4a 	bl	80042fc <HAL_RCC_GetSysClockFreq>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	4b52      	ldr	r3, [pc, #328]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	091b      	lsrs	r3, r3, #4
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	4950      	ldr	r1, [pc, #320]	@ (8003bb8 <HAL_RCC_OscConfig+0x274>)
 8003a76:	5ccb      	ldrb	r3, [r1, r3]
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a80:	4a4e      	ldr	r2, [pc, #312]	@ (8003bbc <HAL_RCC_OscConfig+0x278>)
 8003a82:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a84:	4b4e      	ldr	r3, [pc, #312]	@ (8003bc0 <HAL_RCC_OscConfig+0x27c>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fe f9f7 	bl	8001e7c <HAL_InitTick>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d052      	beq.n	8003b3e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	e327      	b.n	80040ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d032      	beq.n	8003b0a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003aa4:	4b43      	ldr	r3, [pc, #268]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a42      	ldr	r2, [pc, #264]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ab0:	f7fe fbba 	bl	8002228 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ab8:	f7fe fbb6 	bl	8002228 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e310      	b.n	80040ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aca:	4b3a      	ldr	r3, [pc, #232]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0f0      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ad6:	4b37      	ldr	r3, [pc, #220]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a36      	ldr	r2, [pc, #216]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003adc:	f043 0308 	orr.w	r3, r3, #8
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	4b34      	ldr	r3, [pc, #208]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	4931      	ldr	r1, [pc, #196]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003af4:	4b2f      	ldr	r3, [pc, #188]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	021b      	lsls	r3, r3, #8
 8003b02:	492c      	ldr	r1, [pc, #176]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	604b      	str	r3, [r1, #4]
 8003b08:	e01a      	b.n	8003b40 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a29      	ldr	r2, [pc, #164]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003b10:	f023 0301 	bic.w	r3, r3, #1
 8003b14:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b16:	f7fe fb87 	bl	8002228 <HAL_GetTick>
 8003b1a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b1e:	f7fe fb83 	bl	8002228 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e2dd      	b.n	80040ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b30:	4b20      	ldr	r3, [pc, #128]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1f0      	bne.n	8003b1e <HAL_RCC_OscConfig+0x1da>
 8003b3c:	e000      	b.n	8003b40 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b3e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d074      	beq.n	8003c36 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d005      	beq.n	8003b5e <HAL_RCC_OscConfig+0x21a>
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	2b0c      	cmp	r3, #12
 8003b56:	d10e      	bne.n	8003b76 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d10b      	bne.n	8003b76 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b5e:	4b15      	ldr	r3, [pc, #84]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d064      	beq.n	8003c34 <HAL_RCC_OscConfig+0x2f0>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d160      	bne.n	8003c34 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e2ba      	b.n	80040ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b7e:	d106      	bne.n	8003b8e <HAL_RCC_OscConfig+0x24a>
 8003b80:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a0b      	ldr	r2, [pc, #44]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003b86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b8a:	6013      	str	r3, [r2, #0]
 8003b8c:	e026      	b.n	8003bdc <HAL_RCC_OscConfig+0x298>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b96:	d115      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x280>
 8003b98:	4b06      	ldr	r3, [pc, #24]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a05      	ldr	r2, [pc, #20]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003b9e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ba2:	6013      	str	r3, [r2, #0]
 8003ba4:	4b03      	ldr	r3, [pc, #12]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a02      	ldr	r2, [pc, #8]	@ (8003bb4 <HAL_RCC_OscConfig+0x270>)
 8003baa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	e014      	b.n	8003bdc <HAL_RCC_OscConfig+0x298>
 8003bb2:	bf00      	nop
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	0800d91c 	.word	0x0800d91c
 8003bbc:	20000000 	.word	0x20000000
 8003bc0:	20000004 	.word	0x20000004
 8003bc4:	4ba0      	ldr	r3, [pc, #640]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a9f      	ldr	r2, [pc, #636]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003bca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bce:	6013      	str	r3, [r2, #0]
 8003bd0:	4b9d      	ldr	r3, [pc, #628]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a9c      	ldr	r2, [pc, #624]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003bd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d013      	beq.n	8003c0c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be4:	f7fe fb20 	bl	8002228 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bec:	f7fe fb1c 	bl	8002228 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b64      	cmp	r3, #100	@ 0x64
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e276      	b.n	80040ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bfe:	4b92      	ldr	r3, [pc, #584]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d0f0      	beq.n	8003bec <HAL_RCC_OscConfig+0x2a8>
 8003c0a:	e014      	b.n	8003c36 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0c:	f7fe fb0c 	bl	8002228 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c14:	f7fe fb08 	bl	8002228 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b64      	cmp	r3, #100	@ 0x64
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e262      	b.n	80040ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c26:	4b88      	ldr	r3, [pc, #544]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0x2d0>
 8003c32:	e000      	b.n	8003c36 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d060      	beq.n	8003d04 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d005      	beq.n	8003c54 <HAL_RCC_OscConfig+0x310>
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	2b0c      	cmp	r3, #12
 8003c4c:	d119      	bne.n	8003c82 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d116      	bne.n	8003c82 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c54:	4b7c      	ldr	r3, [pc, #496]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_RCC_OscConfig+0x328>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e23f      	b.n	80040ec <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6c:	4b76      	ldr	r3, [pc, #472]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	061b      	lsls	r3, r3, #24
 8003c7a:	4973      	ldr	r1, [pc, #460]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c80:	e040      	b.n	8003d04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d023      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c8a:	4b6f      	ldr	r3, [pc, #444]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a6e      	ldr	r2, [pc, #440]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c96:	f7fe fac7 	bl	8002228 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c9e:	f7fe fac3 	bl	8002228 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e21d      	b.n	80040ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cb0:	4b65      	ldr	r3, [pc, #404]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0f0      	beq.n	8003c9e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cbc:	4b62      	ldr	r3, [pc, #392]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	061b      	lsls	r3, r3, #24
 8003cca:	495f      	ldr	r1, [pc, #380]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	604b      	str	r3, [r1, #4]
 8003cd0:	e018      	b.n	8003d04 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cd2:	4b5d      	ldr	r3, [pc, #372]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a5c      	ldr	r2, [pc, #368]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003cd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cde:	f7fe faa3 	bl	8002228 <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ce6:	f7fe fa9f 	bl	8002228 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e1f9      	b.n	80040ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cf8:	4b53      	ldr	r3, [pc, #332]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1f0      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d03c      	beq.n	8003d8a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d01c      	beq.n	8003d52 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d18:	4b4b      	ldr	r3, [pc, #300]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d1e:	4a4a      	ldr	r2, [pc, #296]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003d20:	f043 0301 	orr.w	r3, r3, #1
 8003d24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d28:	f7fe fa7e 	bl	8002228 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d30:	f7fe fa7a 	bl	8002228 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e1d4      	b.n	80040ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d42:	4b41      	ldr	r3, [pc, #260]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0ef      	beq.n	8003d30 <HAL_RCC_OscConfig+0x3ec>
 8003d50:	e01b      	b.n	8003d8a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d52:	4b3d      	ldr	r3, [pc, #244]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d58:	4a3b      	ldr	r2, [pc, #236]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003d5a:	f023 0301 	bic.w	r3, r3, #1
 8003d5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d62:	f7fe fa61 	bl	8002228 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d6a:	f7fe fa5d 	bl	8002228 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e1b7      	b.n	80040ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d7c:	4b32      	ldr	r3, [pc, #200]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1ef      	bne.n	8003d6a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 80a6 	beq.w	8003ee4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10d      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da8:	4b27      	ldr	r3, [pc, #156]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dac:	4a26      	ldr	r2, [pc, #152]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003dae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003db2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003db4:	4b24      	ldr	r3, [pc, #144]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dbc:	60bb      	str	r3, [r7, #8]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc4:	4b21      	ldr	r3, [pc, #132]	@ (8003e4c <HAL_RCC_OscConfig+0x508>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d118      	bne.n	8003e02 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dd0:	4b1e      	ldr	r3, [pc, #120]	@ (8003e4c <HAL_RCC_OscConfig+0x508>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1d      	ldr	r2, [pc, #116]	@ (8003e4c <HAL_RCC_OscConfig+0x508>)
 8003dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ddc:	f7fe fa24 	bl	8002228 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de4:	f7fe fa20 	bl	8002228 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e17a      	b.n	80040ec <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003df6:	4b15      	ldr	r3, [pc, #84]	@ (8003e4c <HAL_RCC_OscConfig+0x508>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0f0      	beq.n	8003de4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d108      	bne.n	8003e1c <HAL_RCC_OscConfig+0x4d8>
 8003e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e10:	4a0d      	ldr	r2, [pc, #52]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e1a:	e029      	b.n	8003e70 <HAL_RCC_OscConfig+0x52c>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b05      	cmp	r3, #5
 8003e22:	d115      	bne.n	8003e50 <HAL_RCC_OscConfig+0x50c>
 8003e24:	4b08      	ldr	r3, [pc, #32]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2a:	4a07      	ldr	r2, [pc, #28]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003e2c:	f043 0304 	orr.w	r3, r3, #4
 8003e30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e34:	4b04      	ldr	r3, [pc, #16]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e3a:	4a03      	ldr	r2, [pc, #12]	@ (8003e48 <HAL_RCC_OscConfig+0x504>)
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e44:	e014      	b.n	8003e70 <HAL_RCC_OscConfig+0x52c>
 8003e46:	bf00      	nop
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	40007000 	.word	0x40007000
 8003e50:	4b9c      	ldr	r3, [pc, #624]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 8003e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e56:	4a9b      	ldr	r2, [pc, #620]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 8003e58:	f023 0301 	bic.w	r3, r3, #1
 8003e5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e60:	4b98      	ldr	r3, [pc, #608]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e66:	4a97      	ldr	r2, [pc, #604]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 8003e68:	f023 0304 	bic.w	r3, r3, #4
 8003e6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d016      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e78:	f7fe f9d6 	bl	8002228 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e7e:	e00a      	b.n	8003e96 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e80:	f7fe f9d2 	bl	8002228 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e12a      	b.n	80040ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e96:	4b8b      	ldr	r3, [pc, #556]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 8003e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0ed      	beq.n	8003e80 <HAL_RCC_OscConfig+0x53c>
 8003ea4:	e015      	b.n	8003ed2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea6:	f7fe f9bf 	bl	8002228 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003eac:	e00a      	b.n	8003ec4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eae:	f7fe f9bb 	bl	8002228 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e113      	b.n	80040ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ec4:	4b7f      	ldr	r3, [pc, #508]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1ed      	bne.n	8003eae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ed2:	7ffb      	ldrb	r3, [r7, #31]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d105      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ed8:	4b7a      	ldr	r3, [pc, #488]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 8003eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003edc:	4a79      	ldr	r2, [pc, #484]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 8003ede:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ee2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 80fe 	beq.w	80040ea <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	f040 80d0 	bne.w	8004098 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ef8:	4b72      	ldr	r3, [pc, #456]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f003 0203 	and.w	r2, r3, #3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d130      	bne.n	8003f6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f16:	3b01      	subs	r3, #1
 8003f18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d127      	bne.n	8003f6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f28:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d11f      	bne.n	8003f6e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f38:	2a07      	cmp	r2, #7
 8003f3a:	bf14      	ite	ne
 8003f3c:	2201      	movne	r2, #1
 8003f3e:	2200      	moveq	r2, #0
 8003f40:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d113      	bne.n	8003f6e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f50:	085b      	lsrs	r3, r3, #1
 8003f52:	3b01      	subs	r3, #1
 8003f54:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d109      	bne.n	8003f6e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f64:	085b      	lsrs	r3, r3, #1
 8003f66:	3b01      	subs	r3, #1
 8003f68:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d06e      	beq.n	800404c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	2b0c      	cmp	r3, #12
 8003f72:	d069      	beq.n	8004048 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f74:	4b53      	ldr	r3, [pc, #332]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d105      	bne.n	8003f8c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f80:	4b50      	ldr	r3, [pc, #320]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e0ad      	b.n	80040ec <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f90:	4b4c      	ldr	r3, [pc, #304]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a4b      	ldr	r2, [pc, #300]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 8003f96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f9a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f9c:	f7fe f944 	bl	8002228 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa4:	f7fe f940 	bl	8002228 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e09a      	b.n	80040ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fb6:	4b43      	ldr	r3, [pc, #268]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f0      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fc2:	4b40      	ldr	r3, [pc, #256]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	4b40      	ldr	r3, [pc, #256]	@ (80040c8 <HAL_RCC_OscConfig+0x784>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003fd2:	3a01      	subs	r2, #1
 8003fd4:	0112      	lsls	r2, r2, #4
 8003fd6:	4311      	orrs	r1, r2
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003fdc:	0212      	lsls	r2, r2, #8
 8003fde:	4311      	orrs	r1, r2
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003fe4:	0852      	lsrs	r2, r2, #1
 8003fe6:	3a01      	subs	r2, #1
 8003fe8:	0552      	lsls	r2, r2, #21
 8003fea:	4311      	orrs	r1, r2
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003ff0:	0852      	lsrs	r2, r2, #1
 8003ff2:	3a01      	subs	r2, #1
 8003ff4:	0652      	lsls	r2, r2, #25
 8003ff6:	4311      	orrs	r1, r2
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ffc:	0912      	lsrs	r2, r2, #4
 8003ffe:	0452      	lsls	r2, r2, #17
 8004000:	430a      	orrs	r2, r1
 8004002:	4930      	ldr	r1, [pc, #192]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 8004004:	4313      	orrs	r3, r2
 8004006:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004008:	4b2e      	ldr	r3, [pc, #184]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a2d      	ldr	r2, [pc, #180]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 800400e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004012:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004014:	4b2b      	ldr	r3, [pc, #172]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	4a2a      	ldr	r2, [pc, #168]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 800401a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800401e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004020:	f7fe f902 	bl	8002228 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004028:	f7fe f8fe 	bl	8002228 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e058      	b.n	80040ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800403a:	4b22      	ldr	r3, [pc, #136]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f0      	beq.n	8004028 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004046:	e050      	b.n	80040ea <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e04f      	b.n	80040ec <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800404c:	4b1d      	ldr	r3, [pc, #116]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d148      	bne.n	80040ea <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004058:	4b1a      	ldr	r3, [pc, #104]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a19      	ldr	r2, [pc, #100]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 800405e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004062:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004064:	4b17      	ldr	r3, [pc, #92]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	4a16      	ldr	r2, [pc, #88]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 800406a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800406e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004070:	f7fe f8da 	bl	8002228 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004078:	f7fe f8d6 	bl	8002228 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e030      	b.n	80040ec <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800408a:	4b0e      	ldr	r3, [pc, #56]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0f0      	beq.n	8004078 <HAL_RCC_OscConfig+0x734>
 8004096:	e028      	b.n	80040ea <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	2b0c      	cmp	r3, #12
 800409c:	d023      	beq.n	80040e6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800409e:	4b09      	ldr	r3, [pc, #36]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a08      	ldr	r2, [pc, #32]	@ (80040c4 <HAL_RCC_OscConfig+0x780>)
 80040a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040aa:	f7fe f8bd 	bl	8002228 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b0:	e00c      	b.n	80040cc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b2:	f7fe f8b9 	bl	8002228 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d905      	bls.n	80040cc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e013      	b.n	80040ec <HAL_RCC_OscConfig+0x7a8>
 80040c4:	40021000 	.word	0x40021000
 80040c8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040cc:	4b09      	ldr	r3, [pc, #36]	@ (80040f4 <HAL_RCC_OscConfig+0x7b0>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1ec      	bne.n	80040b2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80040d8:	4b06      	ldr	r3, [pc, #24]	@ (80040f4 <HAL_RCC_OscConfig+0x7b0>)
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	4905      	ldr	r1, [pc, #20]	@ (80040f4 <HAL_RCC_OscConfig+0x7b0>)
 80040de:	4b06      	ldr	r3, [pc, #24]	@ (80040f8 <HAL_RCC_OscConfig+0x7b4>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	60cb      	str	r3, [r1, #12]
 80040e4:	e001      	b.n	80040ea <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e000      	b.n	80040ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3720      	adds	r7, #32
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40021000 	.word	0x40021000
 80040f8:	feeefffc 	.word	0xfeeefffc

080040fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e0e7      	b.n	80042e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004110:	4b75      	ldr	r3, [pc, #468]	@ (80042e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d910      	bls.n	8004140 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411e:	4b72      	ldr	r3, [pc, #456]	@ (80042e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f023 0207 	bic.w	r2, r3, #7
 8004126:	4970      	ldr	r1, [pc, #448]	@ (80042e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	4313      	orrs	r3, r2
 800412c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800412e:	4b6e      	ldr	r3, [pc, #440]	@ (80042e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0307 	and.w	r3, r3, #7
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	429a      	cmp	r2, r3
 800413a:	d001      	beq.n	8004140 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e0cf      	b.n	80042e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d010      	beq.n	800416e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	4b66      	ldr	r3, [pc, #408]	@ (80042ec <HAL_RCC_ClockConfig+0x1f0>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004158:	429a      	cmp	r2, r3
 800415a:	d908      	bls.n	800416e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800415c:	4b63      	ldr	r3, [pc, #396]	@ (80042ec <HAL_RCC_ClockConfig+0x1f0>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	4960      	ldr	r1, [pc, #384]	@ (80042ec <HAL_RCC_ClockConfig+0x1f0>)
 800416a:	4313      	orrs	r3, r2
 800416c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d04c      	beq.n	8004214 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b03      	cmp	r3, #3
 8004180:	d107      	bne.n	8004192 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004182:	4b5a      	ldr	r3, [pc, #360]	@ (80042ec <HAL_RCC_ClockConfig+0x1f0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d121      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e0a6      	b.n	80042e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d107      	bne.n	80041aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800419a:	4b54      	ldr	r3, [pc, #336]	@ (80042ec <HAL_RCC_ClockConfig+0x1f0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d115      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e09a      	b.n	80042e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d107      	bne.n	80041c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041b2:	4b4e      	ldr	r3, [pc, #312]	@ (80042ec <HAL_RCC_ClockConfig+0x1f0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d109      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e08e      	b.n	80042e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041c2:	4b4a      	ldr	r3, [pc, #296]	@ (80042ec <HAL_RCC_ClockConfig+0x1f0>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e086      	b.n	80042e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041d2:	4b46      	ldr	r3, [pc, #280]	@ (80042ec <HAL_RCC_ClockConfig+0x1f0>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f023 0203 	bic.w	r2, r3, #3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	4943      	ldr	r1, [pc, #268]	@ (80042ec <HAL_RCC_ClockConfig+0x1f0>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e4:	f7fe f820 	bl	8002228 <HAL_GetTick>
 80041e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ea:	e00a      	b.n	8004202 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ec:	f7fe f81c 	bl	8002228 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d901      	bls.n	8004202 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e06e      	b.n	80042e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004202:	4b3a      	ldr	r3, [pc, #232]	@ (80042ec <HAL_RCC_ClockConfig+0x1f0>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 020c 	and.w	r2, r3, #12
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	429a      	cmp	r2, r3
 8004212:	d1eb      	bne.n	80041ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0302 	and.w	r3, r3, #2
 800421c:	2b00      	cmp	r3, #0
 800421e:	d010      	beq.n	8004242 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	4b31      	ldr	r3, [pc, #196]	@ (80042ec <HAL_RCC_ClockConfig+0x1f0>)
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800422c:	429a      	cmp	r2, r3
 800422e:	d208      	bcs.n	8004242 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004230:	4b2e      	ldr	r3, [pc, #184]	@ (80042ec <HAL_RCC_ClockConfig+0x1f0>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	492b      	ldr	r1, [pc, #172]	@ (80042ec <HAL_RCC_ClockConfig+0x1f0>)
 800423e:	4313      	orrs	r3, r2
 8004240:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004242:	4b29      	ldr	r3, [pc, #164]	@ (80042e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d210      	bcs.n	8004272 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004250:	4b25      	ldr	r3, [pc, #148]	@ (80042e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f023 0207 	bic.w	r2, r3, #7
 8004258:	4923      	ldr	r1, [pc, #140]	@ (80042e8 <HAL_RCC_ClockConfig+0x1ec>)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	4313      	orrs	r3, r2
 800425e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004260:	4b21      	ldr	r3, [pc, #132]	@ (80042e8 <HAL_RCC_ClockConfig+0x1ec>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d001      	beq.n	8004272 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e036      	b.n	80042e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800427e:	4b1b      	ldr	r3, [pc, #108]	@ (80042ec <HAL_RCC_ClockConfig+0x1f0>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	4918      	ldr	r1, [pc, #96]	@ (80042ec <HAL_RCC_ClockConfig+0x1f0>)
 800428c:	4313      	orrs	r3, r2
 800428e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	2b00      	cmp	r3, #0
 800429a:	d009      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800429c:	4b13      	ldr	r3, [pc, #76]	@ (80042ec <HAL_RCC_ClockConfig+0x1f0>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	4910      	ldr	r1, [pc, #64]	@ (80042ec <HAL_RCC_ClockConfig+0x1f0>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042b0:	f000 f824 	bl	80042fc <HAL_RCC_GetSysClockFreq>
 80042b4:	4602      	mov	r2, r0
 80042b6:	4b0d      	ldr	r3, [pc, #52]	@ (80042ec <HAL_RCC_ClockConfig+0x1f0>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	091b      	lsrs	r3, r3, #4
 80042bc:	f003 030f 	and.w	r3, r3, #15
 80042c0:	490b      	ldr	r1, [pc, #44]	@ (80042f0 <HAL_RCC_ClockConfig+0x1f4>)
 80042c2:	5ccb      	ldrb	r3, [r1, r3]
 80042c4:	f003 031f 	and.w	r3, r3, #31
 80042c8:	fa22 f303 	lsr.w	r3, r2, r3
 80042cc:	4a09      	ldr	r2, [pc, #36]	@ (80042f4 <HAL_RCC_ClockConfig+0x1f8>)
 80042ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042d0:	4b09      	ldr	r3, [pc, #36]	@ (80042f8 <HAL_RCC_ClockConfig+0x1fc>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7fd fdd1 	bl	8001e7c <HAL_InitTick>
 80042da:	4603      	mov	r3, r0
 80042dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80042de:	7afb      	ldrb	r3, [r7, #11]
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40022000 	.word	0x40022000
 80042ec:	40021000 	.word	0x40021000
 80042f0:	0800d91c 	.word	0x0800d91c
 80042f4:	20000000 	.word	0x20000000
 80042f8:	20000004 	.word	0x20000004

080042fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b089      	sub	sp, #36	@ 0x24
 8004300:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004302:	2300      	movs	r3, #0
 8004304:	61fb      	str	r3, [r7, #28]
 8004306:	2300      	movs	r3, #0
 8004308:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800430a:	4b3e      	ldr	r3, [pc, #248]	@ (8004404 <HAL_RCC_GetSysClockFreq+0x108>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 030c 	and.w	r3, r3, #12
 8004312:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004314:	4b3b      	ldr	r3, [pc, #236]	@ (8004404 <HAL_RCC_GetSysClockFreq+0x108>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f003 0303 	and.w	r3, r3, #3
 800431c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_RCC_GetSysClockFreq+0x34>
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	2b0c      	cmp	r3, #12
 8004328:	d121      	bne.n	800436e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d11e      	bne.n	800436e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004330:	4b34      	ldr	r3, [pc, #208]	@ (8004404 <HAL_RCC_GetSysClockFreq+0x108>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b00      	cmp	r3, #0
 800433a:	d107      	bne.n	800434c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800433c:	4b31      	ldr	r3, [pc, #196]	@ (8004404 <HAL_RCC_GetSysClockFreq+0x108>)
 800433e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004342:	0a1b      	lsrs	r3, r3, #8
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	61fb      	str	r3, [r7, #28]
 800434a:	e005      	b.n	8004358 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800434c:	4b2d      	ldr	r3, [pc, #180]	@ (8004404 <HAL_RCC_GetSysClockFreq+0x108>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	091b      	lsrs	r3, r3, #4
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004358:	4a2b      	ldr	r2, [pc, #172]	@ (8004408 <HAL_RCC_GetSysClockFreq+0x10c>)
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004360:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10d      	bne.n	8004384 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800436c:	e00a      	b.n	8004384 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	2b04      	cmp	r3, #4
 8004372:	d102      	bne.n	800437a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004374:	4b25      	ldr	r3, [pc, #148]	@ (800440c <HAL_RCC_GetSysClockFreq+0x110>)
 8004376:	61bb      	str	r3, [r7, #24]
 8004378:	e004      	b.n	8004384 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2b08      	cmp	r3, #8
 800437e:	d101      	bne.n	8004384 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004380:	4b23      	ldr	r3, [pc, #140]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x114>)
 8004382:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	2b0c      	cmp	r3, #12
 8004388:	d134      	bne.n	80043f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800438a:	4b1e      	ldr	r3, [pc, #120]	@ (8004404 <HAL_RCC_GetSysClockFreq+0x108>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2b02      	cmp	r3, #2
 8004398:	d003      	beq.n	80043a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	2b03      	cmp	r3, #3
 800439e:	d003      	beq.n	80043a8 <HAL_RCC_GetSysClockFreq+0xac>
 80043a0:	e005      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043a2:	4b1a      	ldr	r3, [pc, #104]	@ (800440c <HAL_RCC_GetSysClockFreq+0x110>)
 80043a4:	617b      	str	r3, [r7, #20]
      break;
 80043a6:	e005      	b.n	80043b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043a8:	4b19      	ldr	r3, [pc, #100]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x114>)
 80043aa:	617b      	str	r3, [r7, #20]
      break;
 80043ac:	e002      	b.n	80043b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	617b      	str	r3, [r7, #20]
      break;
 80043b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043b4:	4b13      	ldr	r3, [pc, #76]	@ (8004404 <HAL_RCC_GetSysClockFreq+0x108>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	091b      	lsrs	r3, r3, #4
 80043ba:	f003 0307 	and.w	r3, r3, #7
 80043be:	3301      	adds	r3, #1
 80043c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043c2:	4b10      	ldr	r3, [pc, #64]	@ (8004404 <HAL_RCC_GetSysClockFreq+0x108>)
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	0a1b      	lsrs	r3, r3, #8
 80043c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	fb03 f202 	mul.w	r2, r3, r2
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043da:	4b0a      	ldr	r3, [pc, #40]	@ (8004404 <HAL_RCC_GetSysClockFreq+0x108>)
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	0e5b      	lsrs	r3, r3, #25
 80043e0:	f003 0303 	and.w	r3, r3, #3
 80043e4:	3301      	adds	r3, #1
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043f4:	69bb      	ldr	r3, [r7, #24]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3724      	adds	r7, #36	@ 0x24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40021000 	.word	0x40021000
 8004408:	0800d934 	.word	0x0800d934
 800440c:	00f42400 	.word	0x00f42400
 8004410:	007a1200 	.word	0x007a1200

08004414 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004414:	b480      	push	{r7}
 8004416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004418:	4b03      	ldr	r3, [pc, #12]	@ (8004428 <HAL_RCC_GetHCLKFreq+0x14>)
 800441a:	681b      	ldr	r3, [r3, #0]
}
 800441c:	4618      	mov	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	20000000 	.word	0x20000000

0800442c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004430:	f7ff fff0 	bl	8004414 <HAL_RCC_GetHCLKFreq>
 8004434:	4602      	mov	r2, r0
 8004436:	4b06      	ldr	r3, [pc, #24]	@ (8004450 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	0a1b      	lsrs	r3, r3, #8
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	4904      	ldr	r1, [pc, #16]	@ (8004454 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004442:	5ccb      	ldrb	r3, [r1, r3]
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800444c:	4618      	mov	r0, r3
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40021000 	.word	0x40021000
 8004454:	0800d92c 	.word	0x0800d92c

08004458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800445c:	f7ff ffda 	bl	8004414 <HAL_RCC_GetHCLKFreq>
 8004460:	4602      	mov	r2, r0
 8004462:	4b06      	ldr	r3, [pc, #24]	@ (800447c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	0adb      	lsrs	r3, r3, #11
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	4904      	ldr	r1, [pc, #16]	@ (8004480 <HAL_RCC_GetPCLK2Freq+0x28>)
 800446e:	5ccb      	ldrb	r3, [r1, r3]
 8004470:	f003 031f 	and.w	r3, r3, #31
 8004474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004478:	4618      	mov	r0, r3
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40021000 	.word	0x40021000
 8004480:	0800d92c 	.word	0x0800d92c

08004484 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	220f      	movs	r2, #15
 8004492:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004494:	4b12      	ldr	r3, [pc, #72]	@ (80044e0 <HAL_RCC_GetClockConfig+0x5c>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 0203 	and.w	r2, r3, #3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80044a0:	4b0f      	ldr	r3, [pc, #60]	@ (80044e0 <HAL_RCC_GetClockConfig+0x5c>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80044ac:	4b0c      	ldr	r3, [pc, #48]	@ (80044e0 <HAL_RCC_GetClockConfig+0x5c>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80044b8:	4b09      	ldr	r3, [pc, #36]	@ (80044e0 <HAL_RCC_GetClockConfig+0x5c>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	08db      	lsrs	r3, r3, #3
 80044be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80044c6:	4b07      	ldr	r3, [pc, #28]	@ (80044e4 <HAL_RCC_GetClockConfig+0x60>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0207 	and.w	r2, r3, #7
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	601a      	str	r2, [r3, #0]
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	40021000 	.word	0x40021000
 80044e4:	40022000 	.word	0x40022000

080044e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044f0:	2300      	movs	r3, #0
 80044f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044f4:	4b2a      	ldr	r3, [pc, #168]	@ (80045a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004500:	f7ff f9bc 	bl	800387c <HAL_PWREx_GetVoltageRange>
 8004504:	6178      	str	r0, [r7, #20]
 8004506:	e014      	b.n	8004532 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004508:	4b25      	ldr	r3, [pc, #148]	@ (80045a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800450a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800450c:	4a24      	ldr	r2, [pc, #144]	@ (80045a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800450e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004512:	6593      	str	r3, [r2, #88]	@ 0x58
 8004514:	4b22      	ldr	r3, [pc, #136]	@ (80045a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800451c:	60fb      	str	r3, [r7, #12]
 800451e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004520:	f7ff f9ac 	bl	800387c <HAL_PWREx_GetVoltageRange>
 8004524:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004526:	4b1e      	ldr	r3, [pc, #120]	@ (80045a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800452a:	4a1d      	ldr	r2, [pc, #116]	@ (80045a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800452c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004530:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004538:	d10b      	bne.n	8004552 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b80      	cmp	r3, #128	@ 0x80
 800453e:	d919      	bls.n	8004574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2ba0      	cmp	r3, #160	@ 0xa0
 8004544:	d902      	bls.n	800454c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004546:	2302      	movs	r3, #2
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	e013      	b.n	8004574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800454c:	2301      	movs	r3, #1
 800454e:	613b      	str	r3, [r7, #16]
 8004550:	e010      	b.n	8004574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b80      	cmp	r3, #128	@ 0x80
 8004556:	d902      	bls.n	800455e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004558:	2303      	movs	r3, #3
 800455a:	613b      	str	r3, [r7, #16]
 800455c:	e00a      	b.n	8004574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b80      	cmp	r3, #128	@ 0x80
 8004562:	d102      	bne.n	800456a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004564:	2302      	movs	r3, #2
 8004566:	613b      	str	r3, [r7, #16]
 8004568:	e004      	b.n	8004574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b70      	cmp	r3, #112	@ 0x70
 800456e:	d101      	bne.n	8004574 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004570:	2301      	movs	r3, #1
 8004572:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004574:	4b0b      	ldr	r3, [pc, #44]	@ (80045a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f023 0207 	bic.w	r2, r3, #7
 800457c:	4909      	ldr	r1, [pc, #36]	@ (80045a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004584:	4b07      	ldr	r3, [pc, #28]	@ (80045a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	429a      	cmp	r2, r3
 8004590:	d001      	beq.n	8004596 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40021000 	.word	0x40021000
 80045a4:	40022000 	.word	0x40022000

080045a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045b0:	2300      	movs	r3, #0
 80045b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045b4:	2300      	movs	r3, #0
 80045b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d041      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045c8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80045cc:	d02a      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80045ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80045d2:	d824      	bhi.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80045d8:	d008      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80045de:	d81e      	bhi.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80045e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045e8:	d010      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045ea:	e018      	b.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045ec:	4b86      	ldr	r3, [pc, #536]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	4a85      	ldr	r2, [pc, #532]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045f8:	e015      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3304      	adds	r3, #4
 80045fe:	2100      	movs	r1, #0
 8004600:	4618      	mov	r0, r3
 8004602:	f000 fabb 	bl	8004b7c <RCCEx_PLLSAI1_Config>
 8004606:	4603      	mov	r3, r0
 8004608:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800460a:	e00c      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3320      	adds	r3, #32
 8004610:	2100      	movs	r1, #0
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fba6 	bl	8004d64 <RCCEx_PLLSAI2_Config>
 8004618:	4603      	mov	r3, r0
 800461a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800461c:	e003      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	74fb      	strb	r3, [r7, #19]
      break;
 8004622:	e000      	b.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004624:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004626:	7cfb      	ldrb	r3, [r7, #19]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10b      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800462c:	4b76      	ldr	r3, [pc, #472]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800462e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004632:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800463a:	4973      	ldr	r1, [pc, #460]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004642:	e001      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004644:	7cfb      	ldrb	r3, [r7, #19]
 8004646:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d041      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004658:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800465c:	d02a      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800465e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004662:	d824      	bhi.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004664:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004668:	d008      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800466a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800466e:	d81e      	bhi.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004678:	d010      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800467a:	e018      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800467c:	4b62      	ldr	r3, [pc, #392]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4a61      	ldr	r2, [pc, #388]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004682:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004686:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004688:	e015      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	3304      	adds	r3, #4
 800468e:	2100      	movs	r1, #0
 8004690:	4618      	mov	r0, r3
 8004692:	f000 fa73 	bl	8004b7c <RCCEx_PLLSAI1_Config>
 8004696:	4603      	mov	r3, r0
 8004698:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800469a:	e00c      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3320      	adds	r3, #32
 80046a0:	2100      	movs	r1, #0
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fb5e 	bl	8004d64 <RCCEx_PLLSAI2_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046ac:	e003      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	74fb      	strb	r3, [r7, #19]
      break;
 80046b2:	e000      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80046b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046b6:	7cfb      	ldrb	r3, [r7, #19]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10b      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046bc:	4b52      	ldr	r3, [pc, #328]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046ca:	494f      	ldr	r1, [pc, #316]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80046d2:	e001      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d4:	7cfb      	ldrb	r3, [r7, #19]
 80046d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 80a0 	beq.w	8004826 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046e6:	2300      	movs	r3, #0
 80046e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046ea:	4b47      	ldr	r3, [pc, #284]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80046f6:	2301      	movs	r3, #1
 80046f8:	e000      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80046fa:	2300      	movs	r3, #0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00d      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004700:	4b41      	ldr	r3, [pc, #260]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004704:	4a40      	ldr	r2, [pc, #256]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800470a:	6593      	str	r3, [r2, #88]	@ 0x58
 800470c:	4b3e      	ldr	r3, [pc, #248]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800470e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004710:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004714:	60bb      	str	r3, [r7, #8]
 8004716:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004718:	2301      	movs	r3, #1
 800471a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800471c:	4b3b      	ldr	r3, [pc, #236]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a3a      	ldr	r2, [pc, #232]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004726:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004728:	f7fd fd7e 	bl	8002228 <HAL_GetTick>
 800472c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800472e:	e009      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004730:	f7fd fd7a 	bl	8002228 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d902      	bls.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	74fb      	strb	r3, [r7, #19]
        break;
 8004742:	e005      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004744:	4b31      	ldr	r3, [pc, #196]	@ (800480c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0ef      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004750:	7cfb      	ldrb	r3, [r7, #19]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d15c      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004756:	4b2c      	ldr	r3, [pc, #176]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800475c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004760:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d01f      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	429a      	cmp	r2, r3
 8004772:	d019      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004774:	4b24      	ldr	r3, [pc, #144]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800477a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800477e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004780:	4b21      	ldr	r3, [pc, #132]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004786:	4a20      	ldr	r2, [pc, #128]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800478c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004790:	4b1d      	ldr	r3, [pc, #116]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004796:	4a1c      	ldr	r2, [pc, #112]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004798:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800479c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047a0:	4a19      	ldr	r2, [pc, #100]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d016      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b2:	f7fd fd39 	bl	8002228 <HAL_GetTick>
 80047b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047b8:	e00b      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ba:	f7fd fd35 	bl	8002228 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d902      	bls.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	74fb      	strb	r3, [r7, #19]
            break;
 80047d0:	e006      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0ec      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80047e0:	7cfb      	ldrb	r3, [r7, #19]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10c      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047e6:	4b08      	ldr	r3, [pc, #32]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047f6:	4904      	ldr	r1, [pc, #16]	@ (8004808 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80047fe:	e009      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004800:	7cfb      	ldrb	r3, [r7, #19]
 8004802:	74bb      	strb	r3, [r7, #18]
 8004804:	e006      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004806:	bf00      	nop
 8004808:	40021000 	.word	0x40021000
 800480c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004810:	7cfb      	ldrb	r3, [r7, #19]
 8004812:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004814:	7c7b      	ldrb	r3, [r7, #17]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d105      	bne.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800481a:	4b9e      	ldr	r3, [pc, #632]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800481c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481e:	4a9d      	ldr	r2, [pc, #628]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004820:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004824:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004832:	4b98      	ldr	r3, [pc, #608]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004838:	f023 0203 	bic.w	r2, r3, #3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004840:	4994      	ldr	r1, [pc, #592]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00a      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004854:	4b8f      	ldr	r3, [pc, #572]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800485a:	f023 020c 	bic.w	r2, r3, #12
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004862:	498c      	ldr	r1, [pc, #560]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004864:	4313      	orrs	r3, r2
 8004866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004876:	4b87      	ldr	r3, [pc, #540]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800487c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004884:	4983      	ldr	r1, [pc, #524]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004898:	4b7e      	ldr	r3, [pc, #504]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a6:	497b      	ldr	r1, [pc, #492]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0310 	and.w	r3, r3, #16
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048ba:	4b76      	ldr	r3, [pc, #472]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048c8:	4972      	ldr	r1, [pc, #456]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00a      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048dc:	4b6d      	ldr	r3, [pc, #436]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ea:	496a      	ldr	r1, [pc, #424]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048fe:	4b65      	ldr	r3, [pc, #404]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004904:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800490c:	4961      	ldr	r1, [pc, #388]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490e:	4313      	orrs	r3, r2
 8004910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004920:	4b5c      	ldr	r3, [pc, #368]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004926:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800492e:	4959      	ldr	r1, [pc, #356]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004930:	4313      	orrs	r3, r2
 8004932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004942:	4b54      	ldr	r3, [pc, #336]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004944:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004948:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004950:	4950      	ldr	r1, [pc, #320]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00a      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004964:	4b4b      	ldr	r3, [pc, #300]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800496a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004972:	4948      	ldr	r1, [pc, #288]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004974:	4313      	orrs	r3, r2
 8004976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004986:	4b43      	ldr	r3, [pc, #268]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004994:	493f      	ldr	r1, [pc, #252]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004996:	4313      	orrs	r3, r2
 8004998:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d028      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049a8:	4b3a      	ldr	r3, [pc, #232]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049b6:	4937      	ldr	r1, [pc, #220]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049c6:	d106      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049c8:	4b32      	ldr	r3, [pc, #200]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	4a31      	ldr	r2, [pc, #196]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049d2:	60d3      	str	r3, [r2, #12]
 80049d4:	e011      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049de:	d10c      	bne.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3304      	adds	r3, #4
 80049e4:	2101      	movs	r1, #1
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 f8c8 	bl	8004b7c <RCCEx_PLLSAI1_Config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80049f0:	7cfb      	ldrb	r3, [r7, #19]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80049f6:	7cfb      	ldrb	r3, [r7, #19]
 80049f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d028      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a06:	4b23      	ldr	r3, [pc, #140]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a14:	491f      	ldr	r1, [pc, #124]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a24:	d106      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a26:	4b1b      	ldr	r3, [pc, #108]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	4a1a      	ldr	r2, [pc, #104]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a30:	60d3      	str	r3, [r2, #12]
 8004a32:	e011      	b.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a3c:	d10c      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3304      	adds	r3, #4
 8004a42:	2101      	movs	r1, #1
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 f899 	bl	8004b7c <RCCEx_PLLSAI1_Config>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a4e:	7cfb      	ldrb	r3, [r7, #19]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004a54:	7cfb      	ldrb	r3, [r7, #19]
 8004a56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d02b      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a64:	4b0b      	ldr	r3, [pc, #44]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a72:	4908      	ldr	r1, [pc, #32]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a82:	d109      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a84:	4b03      	ldr	r3, [pc, #12]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	4a02      	ldr	r2, [pc, #8]	@ (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a8e:	60d3      	str	r3, [r2, #12]
 8004a90:	e014      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004a92:	bf00      	nop
 8004a94:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004aa0:	d10c      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 f867 	bl	8004b7c <RCCEx_PLLSAI1_Config>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ab2:	7cfb      	ldrb	r3, [r7, #19]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004ab8:	7cfb      	ldrb	r3, [r7, #19]
 8004aba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d02f      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ace:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ad6:	4928      	ldr	r1, [pc, #160]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ae2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ae6:	d10d      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3304      	adds	r3, #4
 8004aec:	2102      	movs	r1, #2
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 f844 	bl	8004b7c <RCCEx_PLLSAI1_Config>
 8004af4:	4603      	mov	r3, r0
 8004af6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004af8:	7cfb      	ldrb	r3, [r7, #19]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d014      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004afe:	7cfb      	ldrb	r3, [r7, #19]
 8004b00:	74bb      	strb	r3, [r7, #18]
 8004b02:	e011      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b0c:	d10c      	bne.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3320      	adds	r3, #32
 8004b12:	2102      	movs	r1, #2
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 f925 	bl	8004d64 <RCCEx_PLLSAI2_Config>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b1e:	7cfb      	ldrb	r3, [r7, #19]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b24:	7cfb      	ldrb	r3, [r7, #19]
 8004b26:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00a      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b34:	4b10      	ldr	r3, [pc, #64]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b42:	490d      	ldr	r1, [pc, #52]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00b      	beq.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b56:	4b08      	ldr	r3, [pc, #32]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b66:	4904      	ldr	r1, [pc, #16]	@ (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b6e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	40021000 	.word	0x40021000

08004b7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b8a:	4b75      	ldr	r3, [pc, #468]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d018      	beq.n	8004bc8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b96:	4b72      	ldr	r3, [pc, #456]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f003 0203 	and.w	r2, r3, #3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d10d      	bne.n	8004bc2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
       ||
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d009      	beq.n	8004bc2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004bae:	4b6c      	ldr	r3, [pc, #432]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	091b      	lsrs	r3, r3, #4
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
       ||
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d047      	beq.n	8004c52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	73fb      	strb	r3, [r7, #15]
 8004bc6:	e044      	b.n	8004c52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b03      	cmp	r3, #3
 8004bce:	d018      	beq.n	8004c02 <RCCEx_PLLSAI1_Config+0x86>
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d825      	bhi.n	8004c20 <RCCEx_PLLSAI1_Config+0xa4>
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d002      	beq.n	8004bde <RCCEx_PLLSAI1_Config+0x62>
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d009      	beq.n	8004bf0 <RCCEx_PLLSAI1_Config+0x74>
 8004bdc:	e020      	b.n	8004c20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bde:	4b60      	ldr	r3, [pc, #384]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d11d      	bne.n	8004c26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bee:	e01a      	b.n	8004c26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bf0:	4b5b      	ldr	r3, [pc, #364]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d116      	bne.n	8004c2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c00:	e013      	b.n	8004c2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c02:	4b57      	ldr	r3, [pc, #348]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10f      	bne.n	8004c2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c0e:	4b54      	ldr	r3, [pc, #336]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d109      	bne.n	8004c2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c1e:	e006      	b.n	8004c2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	73fb      	strb	r3, [r7, #15]
      break;
 8004c24:	e004      	b.n	8004c30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c26:	bf00      	nop
 8004c28:	e002      	b.n	8004c30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c2a:	bf00      	nop
 8004c2c:	e000      	b.n	8004c30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c30:	7bfb      	ldrb	r3, [r7, #15]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10d      	bne.n	8004c52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c36:	4b4a      	ldr	r3, [pc, #296]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6819      	ldr	r1, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	3b01      	subs	r3, #1
 8004c48:	011b      	lsls	r3, r3, #4
 8004c4a:	430b      	orrs	r3, r1
 8004c4c:	4944      	ldr	r1, [pc, #272]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d17d      	bne.n	8004d54 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c58:	4b41      	ldr	r3, [pc, #260]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a40      	ldr	r2, [pc, #256]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c64:	f7fd fae0 	bl	8002228 <HAL_GetTick>
 8004c68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c6a:	e009      	b.n	8004c80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c6c:	f7fd fadc 	bl	8002228 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d902      	bls.n	8004c80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	73fb      	strb	r3, [r7, #15]
        break;
 8004c7e:	e005      	b.n	8004c8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c80:	4b37      	ldr	r3, [pc, #220]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1ef      	bne.n	8004c6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d160      	bne.n	8004d54 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d111      	bne.n	8004cbc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c98:	4b31      	ldr	r3, [pc, #196]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004ca0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6892      	ldr	r2, [r2, #8]
 8004ca8:	0211      	lsls	r1, r2, #8
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	68d2      	ldr	r2, [r2, #12]
 8004cae:	0912      	lsrs	r2, r2, #4
 8004cb0:	0452      	lsls	r2, r2, #17
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	492a      	ldr	r1, [pc, #168]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	610b      	str	r3, [r1, #16]
 8004cba:	e027      	b.n	8004d0c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d112      	bne.n	8004ce8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cc2:	4b27      	ldr	r3, [pc, #156]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004cca:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6892      	ldr	r2, [r2, #8]
 8004cd2:	0211      	lsls	r1, r2, #8
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6912      	ldr	r2, [r2, #16]
 8004cd8:	0852      	lsrs	r2, r2, #1
 8004cda:	3a01      	subs	r2, #1
 8004cdc:	0552      	lsls	r2, r2, #21
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	491f      	ldr	r1, [pc, #124]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	610b      	str	r3, [r1, #16]
 8004ce6:	e011      	b.n	8004d0c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004cf0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6892      	ldr	r2, [r2, #8]
 8004cf8:	0211      	lsls	r1, r2, #8
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	6952      	ldr	r2, [r2, #20]
 8004cfe:	0852      	lsrs	r2, r2, #1
 8004d00:	3a01      	subs	r2, #1
 8004d02:	0652      	lsls	r2, r2, #25
 8004d04:	430a      	orrs	r2, r1
 8004d06:	4916      	ldr	r1, [pc, #88]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d0c:	4b14      	ldr	r3, [pc, #80]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a13      	ldr	r2, [pc, #76]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d12:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d18:	f7fd fa86 	bl	8002228 <HAL_GetTick>
 8004d1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d1e:	e009      	b.n	8004d34 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d20:	f7fd fa82 	bl	8002228 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d902      	bls.n	8004d34 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	73fb      	strb	r3, [r7, #15]
          break;
 8004d32:	e005      	b.n	8004d40 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d34:	4b0a      	ldr	r3, [pc, #40]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0ef      	beq.n	8004d20 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d106      	bne.n	8004d54 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d46:	4b06      	ldr	r3, [pc, #24]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d48:	691a      	ldr	r2, [r3, #16]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	4904      	ldr	r1, [pc, #16]	@ (8004d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	40021000 	.word	0x40021000

08004d64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d72:	4b6a      	ldr	r3, [pc, #424]	@ (8004f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f003 0303 	and.w	r3, r3, #3
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d018      	beq.n	8004db0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d7e:	4b67      	ldr	r3, [pc, #412]	@ (8004f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f003 0203 	and.w	r2, r3, #3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d10d      	bne.n	8004daa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
       ||
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d009      	beq.n	8004daa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d96:	4b61      	ldr	r3, [pc, #388]	@ (8004f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	091b      	lsrs	r3, r3, #4
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	1c5a      	adds	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
       ||
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d047      	beq.n	8004e3a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	73fb      	strb	r3, [r7, #15]
 8004dae:	e044      	b.n	8004e3a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d018      	beq.n	8004dea <RCCEx_PLLSAI2_Config+0x86>
 8004db8:	2b03      	cmp	r3, #3
 8004dba:	d825      	bhi.n	8004e08 <RCCEx_PLLSAI2_Config+0xa4>
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d002      	beq.n	8004dc6 <RCCEx_PLLSAI2_Config+0x62>
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d009      	beq.n	8004dd8 <RCCEx_PLLSAI2_Config+0x74>
 8004dc4:	e020      	b.n	8004e08 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dc6:	4b55      	ldr	r3, [pc, #340]	@ (8004f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d11d      	bne.n	8004e0e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dd6:	e01a      	b.n	8004e0e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004dd8:	4b50      	ldr	r3, [pc, #320]	@ (8004f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d116      	bne.n	8004e12 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004de8:	e013      	b.n	8004e12 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004dea:	4b4c      	ldr	r3, [pc, #304]	@ (8004f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10f      	bne.n	8004e16 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004df6:	4b49      	ldr	r3, [pc, #292]	@ (8004f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d109      	bne.n	8004e16 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e06:	e006      	b.n	8004e16 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e0c:	e004      	b.n	8004e18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e0e:	bf00      	nop
 8004e10:	e002      	b.n	8004e18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e12:	bf00      	nop
 8004e14:	e000      	b.n	8004e18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e16:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10d      	bne.n	8004e3a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e1e:	4b3f      	ldr	r3, [pc, #252]	@ (8004f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6819      	ldr	r1, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	011b      	lsls	r3, r3, #4
 8004e32:	430b      	orrs	r3, r1
 8004e34:	4939      	ldr	r1, [pc, #228]	@ (8004f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e3a:	7bfb      	ldrb	r3, [r7, #15]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d167      	bne.n	8004f10 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e40:	4b36      	ldr	r3, [pc, #216]	@ (8004f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a35      	ldr	r2, [pc, #212]	@ (8004f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e4c:	f7fd f9ec 	bl	8002228 <HAL_GetTick>
 8004e50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e52:	e009      	b.n	8004e68 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e54:	f7fd f9e8 	bl	8002228 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d902      	bls.n	8004e68 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	73fb      	strb	r3, [r7, #15]
        break;
 8004e66:	e005      	b.n	8004e74 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e68:	4b2c      	ldr	r3, [pc, #176]	@ (8004f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1ef      	bne.n	8004e54 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d14a      	bne.n	8004f10 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d111      	bne.n	8004ea4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e80:	4b26      	ldr	r3, [pc, #152]	@ (8004f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004e88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	6892      	ldr	r2, [r2, #8]
 8004e90:	0211      	lsls	r1, r2, #8
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	68d2      	ldr	r2, [r2, #12]
 8004e96:	0912      	lsrs	r2, r2, #4
 8004e98:	0452      	lsls	r2, r2, #17
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	491f      	ldr	r1, [pc, #124]	@ (8004f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	614b      	str	r3, [r1, #20]
 8004ea2:	e011      	b.n	8004ec8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8004f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004eac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	6892      	ldr	r2, [r2, #8]
 8004eb4:	0211      	lsls	r1, r2, #8
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6912      	ldr	r2, [r2, #16]
 8004eba:	0852      	lsrs	r2, r2, #1
 8004ebc:	3a01      	subs	r2, #1
 8004ebe:	0652      	lsls	r2, r2, #25
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	4916      	ldr	r1, [pc, #88]	@ (8004f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ec8:	4b14      	ldr	r3, [pc, #80]	@ (8004f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a13      	ldr	r2, [pc, #76]	@ (8004f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ece:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ed2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed4:	f7fd f9a8 	bl	8002228 <HAL_GetTick>
 8004ed8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004eda:	e009      	b.n	8004ef0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004edc:	f7fd f9a4 	bl	8002228 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d902      	bls.n	8004ef0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	73fb      	strb	r3, [r7, #15]
          break;
 8004eee:	e005      	b.n	8004efc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8004f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d0ef      	beq.n	8004edc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d106      	bne.n	8004f10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f02:	4b06      	ldr	r3, [pc, #24]	@ (8004f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f04:	695a      	ldr	r2, [r3, #20]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	4904      	ldr	r1, [pc, #16]	@ (8004f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	40021000 	.word	0x40021000

08004f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e049      	b.n	8004fc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f841 	bl	8004fce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	f000 fb4a 	bl	80055f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b083      	sub	sp, #12
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
	...

08004fe4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d001      	beq.n	8004ffc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e04f      	b.n	800509c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0201 	orr.w	r2, r2, #1
 8005012:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a23      	ldr	r2, [pc, #140]	@ (80050a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d01d      	beq.n	800505a <HAL_TIM_Base_Start_IT+0x76>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005026:	d018      	beq.n	800505a <HAL_TIM_Base_Start_IT+0x76>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a1f      	ldr	r2, [pc, #124]	@ (80050ac <HAL_TIM_Base_Start_IT+0xc8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d013      	beq.n	800505a <HAL_TIM_Base_Start_IT+0x76>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a1e      	ldr	r2, [pc, #120]	@ (80050b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d00e      	beq.n	800505a <HAL_TIM_Base_Start_IT+0x76>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a1c      	ldr	r2, [pc, #112]	@ (80050b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d009      	beq.n	800505a <HAL_TIM_Base_Start_IT+0x76>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a1b      	ldr	r2, [pc, #108]	@ (80050b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d004      	beq.n	800505a <HAL_TIM_Base_Start_IT+0x76>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a19      	ldr	r2, [pc, #100]	@ (80050bc <HAL_TIM_Base_Start_IT+0xd8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d115      	bne.n	8005086 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689a      	ldr	r2, [r3, #8]
 8005060:	4b17      	ldr	r3, [pc, #92]	@ (80050c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005062:	4013      	ands	r3, r2
 8005064:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b06      	cmp	r3, #6
 800506a:	d015      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0xb4>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005072:	d011      	beq.n	8005098 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0201 	orr.w	r2, r2, #1
 8005082:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005084:	e008      	b.n	8005098 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f042 0201 	orr.w	r2, r2, #1
 8005094:	601a      	str	r2, [r3, #0]
 8005096:	e000      	b.n	800509a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005098:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3714      	adds	r7, #20
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	40012c00 	.word	0x40012c00
 80050ac:	40000400 	.word	0x40000400
 80050b0:	40000800 	.word	0x40000800
 80050b4:	40000c00 	.word	0x40000c00
 80050b8:	40013400 	.word	0x40013400
 80050bc:	40014000 	.word	0x40014000
 80050c0:	00010007 	.word	0x00010007

080050c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e049      	b.n	800516a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d106      	bne.n	80050f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7fc fdde 	bl	8001cac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3304      	adds	r3, #4
 8005100:	4619      	mov	r1, r3
 8005102:	4610      	mov	r0, r2
 8005104:	f000 fa78 	bl	80055f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b084      	sub	sp, #16
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d020      	beq.n	80051d6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d01b      	beq.n	80051d6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f06f 0202 	mvn.w	r2, #2
 80051a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	f003 0303 	and.w	r3, r3, #3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d003      	beq.n	80051c4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f9fd 	bl	80055bc <HAL_TIM_IC_CaptureCallback>
 80051c2:	e005      	b.n	80051d0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f9ef 	bl	80055a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fa00 	bl	80055d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d020      	beq.n	8005222 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d01b      	beq.n	8005222 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f06f 0204 	mvn.w	r2, #4
 80051f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f9d7 	bl	80055bc <HAL_TIM_IC_CaptureCallback>
 800520e:	e005      	b.n	800521c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f9c9 	bl	80055a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f9da 	bl	80055d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	f003 0308 	and.w	r3, r3, #8
 8005228:	2b00      	cmp	r3, #0
 800522a:	d020      	beq.n	800526e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	2b00      	cmp	r3, #0
 8005234:	d01b      	beq.n	800526e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f06f 0208 	mvn.w	r2, #8
 800523e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2204      	movs	r2, #4
 8005244:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	f003 0303 	and.w	r3, r3, #3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d003      	beq.n	800525c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f9b1 	bl	80055bc <HAL_TIM_IC_CaptureCallback>
 800525a:	e005      	b.n	8005268 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f9a3 	bl	80055a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f9b4 	bl	80055d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f003 0310 	and.w	r3, r3, #16
 8005274:	2b00      	cmp	r3, #0
 8005276:	d020      	beq.n	80052ba <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f003 0310 	and.w	r3, r3, #16
 800527e:	2b00      	cmp	r3, #0
 8005280:	d01b      	beq.n	80052ba <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f06f 0210 	mvn.w	r2, #16
 800528a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2208      	movs	r2, #8
 8005290:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f98b 	bl	80055bc <HAL_TIM_IC_CaptureCallback>
 80052a6:	e005      	b.n	80052b4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f97d 	bl	80055a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f98e 	bl	80055d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00c      	beq.n	80052de <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d007      	beq.n	80052de <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f06f 0201 	mvn.w	r2, #1
 80052d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f7fc fc27 	bl	8001b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d104      	bne.n	80052f2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00c      	beq.n	800530c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d007      	beq.n	800530c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fd84 	bl	8005e14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00c      	beq.n	8005330 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800531c:	2b00      	cmp	r3, #0
 800531e:	d007      	beq.n	8005330 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fd7c 	bl	8005e28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00c      	beq.n	8005354 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005340:	2b00      	cmp	r3, #0
 8005342:	d007      	beq.n	8005354 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800534c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f948 	bl	80055e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f003 0320 	and.w	r3, r3, #32
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00c      	beq.n	8005378 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f003 0320 	and.w	r3, r3, #32
 8005364:	2b00      	cmp	r3, #0
 8005366:	d007      	beq.n	8005378 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f06f 0220 	mvn.w	r2, #32
 8005370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 fd44 	bl	8005e00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005378:	bf00      	nop
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800538c:	2300      	movs	r3, #0
 800538e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005396:	2b01      	cmp	r3, #1
 8005398:	d101      	bne.n	800539e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800539a:	2302      	movs	r3, #2
 800539c:	e0ff      	b.n	800559e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b14      	cmp	r3, #20
 80053aa:	f200 80f0 	bhi.w	800558e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80053ae:	a201      	add	r2, pc, #4	@ (adr r2, 80053b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b4:	08005409 	.word	0x08005409
 80053b8:	0800558f 	.word	0x0800558f
 80053bc:	0800558f 	.word	0x0800558f
 80053c0:	0800558f 	.word	0x0800558f
 80053c4:	08005449 	.word	0x08005449
 80053c8:	0800558f 	.word	0x0800558f
 80053cc:	0800558f 	.word	0x0800558f
 80053d0:	0800558f 	.word	0x0800558f
 80053d4:	0800548b 	.word	0x0800548b
 80053d8:	0800558f 	.word	0x0800558f
 80053dc:	0800558f 	.word	0x0800558f
 80053e0:	0800558f 	.word	0x0800558f
 80053e4:	080054cb 	.word	0x080054cb
 80053e8:	0800558f 	.word	0x0800558f
 80053ec:	0800558f 	.word	0x0800558f
 80053f0:	0800558f 	.word	0x0800558f
 80053f4:	0800550d 	.word	0x0800550d
 80053f8:	0800558f 	.word	0x0800558f
 80053fc:	0800558f 	.word	0x0800558f
 8005400:	0800558f 	.word	0x0800558f
 8005404:	0800554d 	.word	0x0800554d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68b9      	ldr	r1, [r7, #8]
 800540e:	4618      	mov	r0, r3
 8005410:	f000 f998 	bl	8005744 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	699a      	ldr	r2, [r3, #24]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0208 	orr.w	r2, r2, #8
 8005422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0204 	bic.w	r2, r2, #4
 8005432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6999      	ldr	r1, [r3, #24]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	691a      	ldr	r2, [r3, #16]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	619a      	str	r2, [r3, #24]
      break;
 8005446:	e0a5      	b.n	8005594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68b9      	ldr	r1, [r7, #8]
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fa08 	bl	8005864 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699a      	ldr	r2, [r3, #24]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699a      	ldr	r2, [r3, #24]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6999      	ldr	r1, [r3, #24]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	021a      	lsls	r2, r3, #8
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	619a      	str	r2, [r3, #24]
      break;
 8005488:	e084      	b.n	8005594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68b9      	ldr	r1, [r7, #8]
 8005490:	4618      	mov	r0, r3
 8005492:	f000 fa71 	bl	8005978 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69da      	ldr	r2, [r3, #28]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f042 0208 	orr.w	r2, r2, #8
 80054a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	69da      	ldr	r2, [r3, #28]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0204 	bic.w	r2, r2, #4
 80054b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69d9      	ldr	r1, [r3, #28]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	691a      	ldr	r2, [r3, #16]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	61da      	str	r2, [r3, #28]
      break;
 80054c8:	e064      	b.n	8005594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 fad9 	bl	8005a88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69da      	ldr	r2, [r3, #28]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	69da      	ldr	r2, [r3, #28]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69d9      	ldr	r1, [r3, #28]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	021a      	lsls	r2, r3, #8
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	430a      	orrs	r2, r1
 8005508:	61da      	str	r2, [r3, #28]
      break;
 800550a:	e043      	b.n	8005594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68b9      	ldr	r1, [r7, #8]
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fb22 	bl	8005b5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0208 	orr.w	r2, r2, #8
 8005526:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0204 	bic.w	r2, r2, #4
 8005536:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800554a:	e023      	b.n	8005594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68b9      	ldr	r1, [r7, #8]
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fb66 	bl	8005c24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005566:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005576:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	021a      	lsls	r2, r3, #8
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800558c:	e002      	b.n	8005594 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	75fb      	strb	r3, [r7, #23]
      break;
 8005592:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800559c:	7dfb      	ldrb	r3, [r7, #23]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop

080055a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055d8:	bf00      	nop
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a46      	ldr	r2, [pc, #280]	@ (8005724 <TIM_Base_SetConfig+0x12c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d013      	beq.n	8005638 <TIM_Base_SetConfig+0x40>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005616:	d00f      	beq.n	8005638 <TIM_Base_SetConfig+0x40>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a43      	ldr	r2, [pc, #268]	@ (8005728 <TIM_Base_SetConfig+0x130>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d00b      	beq.n	8005638 <TIM_Base_SetConfig+0x40>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a42      	ldr	r2, [pc, #264]	@ (800572c <TIM_Base_SetConfig+0x134>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d007      	beq.n	8005638 <TIM_Base_SetConfig+0x40>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a41      	ldr	r2, [pc, #260]	@ (8005730 <TIM_Base_SetConfig+0x138>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d003      	beq.n	8005638 <TIM_Base_SetConfig+0x40>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a40      	ldr	r2, [pc, #256]	@ (8005734 <TIM_Base_SetConfig+0x13c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d108      	bne.n	800564a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800563e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a35      	ldr	r2, [pc, #212]	@ (8005724 <TIM_Base_SetConfig+0x12c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d01f      	beq.n	8005692 <TIM_Base_SetConfig+0x9a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005658:	d01b      	beq.n	8005692 <TIM_Base_SetConfig+0x9a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a32      	ldr	r2, [pc, #200]	@ (8005728 <TIM_Base_SetConfig+0x130>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d017      	beq.n	8005692 <TIM_Base_SetConfig+0x9a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a31      	ldr	r2, [pc, #196]	@ (800572c <TIM_Base_SetConfig+0x134>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d013      	beq.n	8005692 <TIM_Base_SetConfig+0x9a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a30      	ldr	r2, [pc, #192]	@ (8005730 <TIM_Base_SetConfig+0x138>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d00f      	beq.n	8005692 <TIM_Base_SetConfig+0x9a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a2f      	ldr	r2, [pc, #188]	@ (8005734 <TIM_Base_SetConfig+0x13c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00b      	beq.n	8005692 <TIM_Base_SetConfig+0x9a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a2e      	ldr	r2, [pc, #184]	@ (8005738 <TIM_Base_SetConfig+0x140>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d007      	beq.n	8005692 <TIM_Base_SetConfig+0x9a>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a2d      	ldr	r2, [pc, #180]	@ (800573c <TIM_Base_SetConfig+0x144>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d003      	beq.n	8005692 <TIM_Base_SetConfig+0x9a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a2c      	ldr	r2, [pc, #176]	@ (8005740 <TIM_Base_SetConfig+0x148>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d108      	bne.n	80056a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	689a      	ldr	r2, [r3, #8]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a16      	ldr	r2, [pc, #88]	@ (8005724 <TIM_Base_SetConfig+0x12c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d00f      	beq.n	80056f0 <TIM_Base_SetConfig+0xf8>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a18      	ldr	r2, [pc, #96]	@ (8005734 <TIM_Base_SetConfig+0x13c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d00b      	beq.n	80056f0 <TIM_Base_SetConfig+0xf8>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a17      	ldr	r2, [pc, #92]	@ (8005738 <TIM_Base_SetConfig+0x140>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d007      	beq.n	80056f0 <TIM_Base_SetConfig+0xf8>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a16      	ldr	r2, [pc, #88]	@ (800573c <TIM_Base_SetConfig+0x144>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d003      	beq.n	80056f0 <TIM_Base_SetConfig+0xf8>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a15      	ldr	r2, [pc, #84]	@ (8005740 <TIM_Base_SetConfig+0x148>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d103      	bne.n	80056f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	691a      	ldr	r2, [r3, #16]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b01      	cmp	r3, #1
 8005708:	d105      	bne.n	8005716 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	f023 0201 	bic.w	r2, r3, #1
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	611a      	str	r2, [r3, #16]
  }
}
 8005716:	bf00      	nop
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	40012c00 	.word	0x40012c00
 8005728:	40000400 	.word	0x40000400
 800572c:	40000800 	.word	0x40000800
 8005730:	40000c00 	.word	0x40000c00
 8005734:	40013400 	.word	0x40013400
 8005738:	40014000 	.word	0x40014000
 800573c:	40014400 	.word	0x40014400
 8005740:	40014800 	.word	0x40014800

08005744 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	f023 0201 	bic.w	r2, r3, #1
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0303 	bic.w	r3, r3, #3
 800577e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f023 0302 	bic.w	r3, r3, #2
 8005790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	4313      	orrs	r3, r2
 800579a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a2c      	ldr	r2, [pc, #176]	@ (8005850 <TIM_OC1_SetConfig+0x10c>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00f      	beq.n	80057c4 <TIM_OC1_SetConfig+0x80>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a2b      	ldr	r2, [pc, #172]	@ (8005854 <TIM_OC1_SetConfig+0x110>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d00b      	beq.n	80057c4 <TIM_OC1_SetConfig+0x80>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a2a      	ldr	r2, [pc, #168]	@ (8005858 <TIM_OC1_SetConfig+0x114>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d007      	beq.n	80057c4 <TIM_OC1_SetConfig+0x80>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a29      	ldr	r2, [pc, #164]	@ (800585c <TIM_OC1_SetConfig+0x118>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d003      	beq.n	80057c4 <TIM_OC1_SetConfig+0x80>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a28      	ldr	r2, [pc, #160]	@ (8005860 <TIM_OC1_SetConfig+0x11c>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d10c      	bne.n	80057de <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f023 0308 	bic.w	r3, r3, #8
 80057ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f023 0304 	bic.w	r3, r3, #4
 80057dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005850 <TIM_OC1_SetConfig+0x10c>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00f      	beq.n	8005806 <TIM_OC1_SetConfig+0xc2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a1a      	ldr	r2, [pc, #104]	@ (8005854 <TIM_OC1_SetConfig+0x110>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d00b      	beq.n	8005806 <TIM_OC1_SetConfig+0xc2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a19      	ldr	r2, [pc, #100]	@ (8005858 <TIM_OC1_SetConfig+0x114>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d007      	beq.n	8005806 <TIM_OC1_SetConfig+0xc2>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a18      	ldr	r2, [pc, #96]	@ (800585c <TIM_OC1_SetConfig+0x118>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d003      	beq.n	8005806 <TIM_OC1_SetConfig+0xc2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a17      	ldr	r2, [pc, #92]	@ (8005860 <TIM_OC1_SetConfig+0x11c>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d111      	bne.n	800582a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800580c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005814:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	4313      	orrs	r3, r2
 8005828:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	621a      	str	r2, [r3, #32]
}
 8005844:	bf00      	nop
 8005846:	371c      	adds	r7, #28
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	40012c00 	.word	0x40012c00
 8005854:	40013400 	.word	0x40013400
 8005858:	40014000 	.word	0x40014000
 800585c:	40014400 	.word	0x40014400
 8005860:	40014800 	.word	0x40014800

08005864 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	f023 0210 	bic.w	r2, r3, #16
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005892:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800589e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	021b      	lsls	r3, r3, #8
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f023 0320 	bic.w	r3, r3, #32
 80058b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	011b      	lsls	r3, r3, #4
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4313      	orrs	r3, r2
 80058be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a28      	ldr	r2, [pc, #160]	@ (8005964 <TIM_OC2_SetConfig+0x100>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d003      	beq.n	80058d0 <TIM_OC2_SetConfig+0x6c>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a27      	ldr	r2, [pc, #156]	@ (8005968 <TIM_OC2_SetConfig+0x104>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d10d      	bne.n	80058ec <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a1d      	ldr	r2, [pc, #116]	@ (8005964 <TIM_OC2_SetConfig+0x100>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d00f      	beq.n	8005914 <TIM_OC2_SetConfig+0xb0>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a1c      	ldr	r2, [pc, #112]	@ (8005968 <TIM_OC2_SetConfig+0x104>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d00b      	beq.n	8005914 <TIM_OC2_SetConfig+0xb0>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a1b      	ldr	r2, [pc, #108]	@ (800596c <TIM_OC2_SetConfig+0x108>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d007      	beq.n	8005914 <TIM_OC2_SetConfig+0xb0>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a1a      	ldr	r2, [pc, #104]	@ (8005970 <TIM_OC2_SetConfig+0x10c>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d003      	beq.n	8005914 <TIM_OC2_SetConfig+0xb0>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a19      	ldr	r2, [pc, #100]	@ (8005974 <TIM_OC2_SetConfig+0x110>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d113      	bne.n	800593c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800591a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005922:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	4313      	orrs	r3, r2
 800592e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4313      	orrs	r3, r2
 800593a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	621a      	str	r2, [r3, #32]
}
 8005956:	bf00      	nop
 8005958:	371c      	adds	r7, #28
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	40012c00 	.word	0x40012c00
 8005968:	40013400 	.word	0x40013400
 800596c:	40014000 	.word	0x40014000
 8005970:	40014400 	.word	0x40014400
 8005974:	40014800 	.word	0x40014800

08005978 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f023 0303 	bic.w	r3, r3, #3
 80059b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80059c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	021b      	lsls	r3, r3, #8
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a27      	ldr	r2, [pc, #156]	@ (8005a74 <TIM_OC3_SetConfig+0xfc>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d003      	beq.n	80059e2 <TIM_OC3_SetConfig+0x6a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a26      	ldr	r2, [pc, #152]	@ (8005a78 <TIM_OC3_SetConfig+0x100>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d10d      	bne.n	80059fe <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	021b      	lsls	r3, r3, #8
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a1c      	ldr	r2, [pc, #112]	@ (8005a74 <TIM_OC3_SetConfig+0xfc>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d00f      	beq.n	8005a26 <TIM_OC3_SetConfig+0xae>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a1b      	ldr	r2, [pc, #108]	@ (8005a78 <TIM_OC3_SetConfig+0x100>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d00b      	beq.n	8005a26 <TIM_OC3_SetConfig+0xae>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a1a      	ldr	r2, [pc, #104]	@ (8005a7c <TIM_OC3_SetConfig+0x104>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d007      	beq.n	8005a26 <TIM_OC3_SetConfig+0xae>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a19      	ldr	r2, [pc, #100]	@ (8005a80 <TIM_OC3_SetConfig+0x108>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d003      	beq.n	8005a26 <TIM_OC3_SetConfig+0xae>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a18      	ldr	r2, [pc, #96]	@ (8005a84 <TIM_OC3_SetConfig+0x10c>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d113      	bne.n	8005a4e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	011b      	lsls	r3, r3, #4
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	621a      	str	r2, [r3, #32]
}
 8005a68:	bf00      	nop
 8005a6a:	371c      	adds	r7, #28
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	40012c00 	.word	0x40012c00
 8005a78:	40013400 	.word	0x40013400
 8005a7c:	40014000 	.word	0x40014000
 8005a80:	40014400 	.word	0x40014400
 8005a84:	40014800 	.word	0x40014800

08005a88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ab6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	021b      	lsls	r3, r3, #8
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ad6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	031b      	lsls	r3, r3, #12
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a18      	ldr	r2, [pc, #96]	@ (8005b48 <TIM_OC4_SetConfig+0xc0>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d00f      	beq.n	8005b0c <TIM_OC4_SetConfig+0x84>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a17      	ldr	r2, [pc, #92]	@ (8005b4c <TIM_OC4_SetConfig+0xc4>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d00b      	beq.n	8005b0c <TIM_OC4_SetConfig+0x84>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a16      	ldr	r2, [pc, #88]	@ (8005b50 <TIM_OC4_SetConfig+0xc8>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d007      	beq.n	8005b0c <TIM_OC4_SetConfig+0x84>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a15      	ldr	r2, [pc, #84]	@ (8005b54 <TIM_OC4_SetConfig+0xcc>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d003      	beq.n	8005b0c <TIM_OC4_SetConfig+0x84>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a14      	ldr	r2, [pc, #80]	@ (8005b58 <TIM_OC4_SetConfig+0xd0>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d109      	bne.n	8005b20 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	019b      	lsls	r3, r3, #6
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	621a      	str	r2, [r3, #32]
}
 8005b3a:	bf00      	nop
 8005b3c:	371c      	adds	r7, #28
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	40012c00 	.word	0x40012c00
 8005b4c:	40013400 	.word	0x40013400
 8005b50:	40014000 	.word	0x40014000
 8005b54:	40014400 	.word	0x40014400
 8005b58:	40014800 	.word	0x40014800

08005b5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005ba0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	041b      	lsls	r3, r3, #16
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a17      	ldr	r2, [pc, #92]	@ (8005c10 <TIM_OC5_SetConfig+0xb4>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d00f      	beq.n	8005bd6 <TIM_OC5_SetConfig+0x7a>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a16      	ldr	r2, [pc, #88]	@ (8005c14 <TIM_OC5_SetConfig+0xb8>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00b      	beq.n	8005bd6 <TIM_OC5_SetConfig+0x7a>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a15      	ldr	r2, [pc, #84]	@ (8005c18 <TIM_OC5_SetConfig+0xbc>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d007      	beq.n	8005bd6 <TIM_OC5_SetConfig+0x7a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a14      	ldr	r2, [pc, #80]	@ (8005c1c <TIM_OC5_SetConfig+0xc0>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d003      	beq.n	8005bd6 <TIM_OC5_SetConfig+0x7a>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a13      	ldr	r2, [pc, #76]	@ (8005c20 <TIM_OC5_SetConfig+0xc4>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d109      	bne.n	8005bea <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bdc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	021b      	lsls	r3, r3, #8
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	621a      	str	r2, [r3, #32]
}
 8005c04:	bf00      	nop
 8005c06:	371c      	adds	r7, #28
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	40012c00 	.word	0x40012c00
 8005c14:	40013400 	.word	0x40013400
 8005c18:	40014000 	.word	0x40014000
 8005c1c:	40014400 	.word	0x40014400
 8005c20:	40014800 	.word	0x40014800

08005c24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b087      	sub	sp, #28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	021b      	lsls	r3, r3, #8
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005c6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	051b      	lsls	r3, r3, #20
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a18      	ldr	r2, [pc, #96]	@ (8005cdc <TIM_OC6_SetConfig+0xb8>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d00f      	beq.n	8005ca0 <TIM_OC6_SetConfig+0x7c>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a17      	ldr	r2, [pc, #92]	@ (8005ce0 <TIM_OC6_SetConfig+0xbc>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00b      	beq.n	8005ca0 <TIM_OC6_SetConfig+0x7c>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a16      	ldr	r2, [pc, #88]	@ (8005ce4 <TIM_OC6_SetConfig+0xc0>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d007      	beq.n	8005ca0 <TIM_OC6_SetConfig+0x7c>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a15      	ldr	r2, [pc, #84]	@ (8005ce8 <TIM_OC6_SetConfig+0xc4>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d003      	beq.n	8005ca0 <TIM_OC6_SetConfig+0x7c>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a14      	ldr	r2, [pc, #80]	@ (8005cec <TIM_OC6_SetConfig+0xc8>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d109      	bne.n	8005cb4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ca6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	029b      	lsls	r3, r3, #10
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	621a      	str	r2, [r3, #32]
}
 8005cce:	bf00      	nop
 8005cd0:	371c      	adds	r7, #28
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	40012c00 	.word	0x40012c00
 8005ce0:	40013400 	.word	0x40013400
 8005ce4:	40014000 	.word	0x40014000
 8005ce8:	40014400 	.word	0x40014400
 8005cec:	40014800 	.word	0x40014800

08005cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d101      	bne.n	8005d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d04:	2302      	movs	r3, #2
 8005d06:	e068      	b.n	8005dda <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a2e      	ldr	r2, [pc, #184]	@ (8005de8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d004      	beq.n	8005d3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a2d      	ldr	r2, [pc, #180]	@ (8005dec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d108      	bne.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005d42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8005de8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d01d      	beq.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d7a:	d018      	beq.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a1b      	ldr	r2, [pc, #108]	@ (8005df0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d013      	beq.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a1a      	ldr	r2, [pc, #104]	@ (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d00e      	beq.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a18      	ldr	r2, [pc, #96]	@ (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d009      	beq.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a13      	ldr	r2, [pc, #76]	@ (8005dec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d004      	beq.n	8005dae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a14      	ldr	r2, [pc, #80]	@ (8005dfc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d10c      	bne.n	8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005db4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	40012c00 	.word	0x40012c00
 8005dec:	40013400 	.word	0x40013400
 8005df0:	40000400 	.word	0x40000400
 8005df4:	40000800 	.word	0x40000800
 8005df8:	40000c00 	.word	0x40000c00
 8005dfc:	40014000 	.word	0x40014000

08005e00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e040      	b.n	8005ed0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7fb ffb0 	bl	8001dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2224      	movs	r2, #36	@ 0x24
 8005e68:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 0201 	bic.w	r2, r2, #1
 8005e78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d002      	beq.n	8005e88 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 fb6a 	bl	800655c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f8af 	bl	8005fec <UART_SetConfig>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d101      	bne.n	8005e98 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e01b      	b.n	8005ed0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ea6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689a      	ldr	r2, [r3, #8]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005eb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0201 	orr.w	r2, r2, #1
 8005ec6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 fbe9 	bl	80066a0 <UART_CheckIdleState>
 8005ece:	4603      	mov	r3, r0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b08a      	sub	sp, #40	@ 0x28
 8005edc:	af02      	add	r7, sp, #8
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	603b      	str	r3, [r7, #0]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005eec:	2b20      	cmp	r3, #32
 8005eee:	d177      	bne.n	8005fe0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d002      	beq.n	8005efc <HAL_UART_Transmit+0x24>
 8005ef6:	88fb      	ldrh	r3, [r7, #6]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e070      	b.n	8005fe2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2221      	movs	r2, #33	@ 0x21
 8005f0c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f0e:	f7fc f98b 	bl	8002228 <HAL_GetTick>
 8005f12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	88fa      	ldrh	r2, [r7, #6]
 8005f18:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	88fa      	ldrh	r2, [r7, #6]
 8005f20:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f2c:	d108      	bne.n	8005f40 <HAL_UART_Transmit+0x68>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d104      	bne.n	8005f40 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005f36:	2300      	movs	r3, #0
 8005f38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	61bb      	str	r3, [r7, #24]
 8005f3e:	e003      	b.n	8005f48 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f44:	2300      	movs	r3, #0
 8005f46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f48:	e02f      	b.n	8005faa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2200      	movs	r2, #0
 8005f52:	2180      	movs	r1, #128	@ 0x80
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 fc4b 	bl	80067f0 <UART_WaitOnFlagUntilTimeout>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d004      	beq.n	8005f6a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2220      	movs	r2, #32
 8005f64:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e03b      	b.n	8005fe2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10b      	bne.n	8005f88 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	881a      	ldrh	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f7c:	b292      	uxth	r2, r2
 8005f7e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	3302      	adds	r3, #2
 8005f84:	61bb      	str	r3, [r7, #24]
 8005f86:	e007      	b.n	8005f98 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	781a      	ldrb	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	3301      	adds	r3, #1
 8005f96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1c9      	bne.n	8005f4a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	2140      	movs	r1, #64	@ 0x40
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 fc15 	bl	80067f0 <UART_WaitOnFlagUntilTimeout>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d004      	beq.n	8005fd6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2220      	movs	r2, #32
 8005fd0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e005      	b.n	8005fe2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	e000      	b.n	8005fe2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005fe0:	2302      	movs	r3, #2
  }
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3720      	adds	r7, #32
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
	...

08005fec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ff0:	b08a      	sub	sp, #40	@ 0x28
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	431a      	orrs	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	431a      	orrs	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	4313      	orrs	r3, r2
 8006012:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	4ba4      	ldr	r3, [pc, #656]	@ (80062ac <UART_SetConfig+0x2c0>)
 800601c:	4013      	ands	r3, r2
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	6812      	ldr	r2, [r2, #0]
 8006022:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006024:	430b      	orrs	r3, r1
 8006026:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	68da      	ldr	r2, [r3, #12]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a99      	ldr	r2, [pc, #612]	@ (80062b0 <UART_SetConfig+0x2c4>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d004      	beq.n	8006058 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006054:	4313      	orrs	r3, r2
 8006056:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006068:	430a      	orrs	r2, r1
 800606a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a90      	ldr	r2, [pc, #576]	@ (80062b4 <UART_SetConfig+0x2c8>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d126      	bne.n	80060c4 <UART_SetConfig+0xd8>
 8006076:	4b90      	ldr	r3, [pc, #576]	@ (80062b8 <UART_SetConfig+0x2cc>)
 8006078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800607c:	f003 0303 	and.w	r3, r3, #3
 8006080:	2b03      	cmp	r3, #3
 8006082:	d81b      	bhi.n	80060bc <UART_SetConfig+0xd0>
 8006084:	a201      	add	r2, pc, #4	@ (adr r2, 800608c <UART_SetConfig+0xa0>)
 8006086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608a:	bf00      	nop
 800608c:	0800609d 	.word	0x0800609d
 8006090:	080060ad 	.word	0x080060ad
 8006094:	080060a5 	.word	0x080060a5
 8006098:	080060b5 	.word	0x080060b5
 800609c:	2301      	movs	r3, #1
 800609e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060a2:	e116      	b.n	80062d2 <UART_SetConfig+0x2e6>
 80060a4:	2302      	movs	r3, #2
 80060a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060aa:	e112      	b.n	80062d2 <UART_SetConfig+0x2e6>
 80060ac:	2304      	movs	r3, #4
 80060ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060b2:	e10e      	b.n	80062d2 <UART_SetConfig+0x2e6>
 80060b4:	2308      	movs	r3, #8
 80060b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060ba:	e10a      	b.n	80062d2 <UART_SetConfig+0x2e6>
 80060bc:	2310      	movs	r3, #16
 80060be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060c2:	e106      	b.n	80062d2 <UART_SetConfig+0x2e6>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a7c      	ldr	r2, [pc, #496]	@ (80062bc <UART_SetConfig+0x2d0>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d138      	bne.n	8006140 <UART_SetConfig+0x154>
 80060ce:	4b7a      	ldr	r3, [pc, #488]	@ (80062b8 <UART_SetConfig+0x2cc>)
 80060d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d4:	f003 030c 	and.w	r3, r3, #12
 80060d8:	2b0c      	cmp	r3, #12
 80060da:	d82d      	bhi.n	8006138 <UART_SetConfig+0x14c>
 80060dc:	a201      	add	r2, pc, #4	@ (adr r2, 80060e4 <UART_SetConfig+0xf8>)
 80060de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e2:	bf00      	nop
 80060e4:	08006119 	.word	0x08006119
 80060e8:	08006139 	.word	0x08006139
 80060ec:	08006139 	.word	0x08006139
 80060f0:	08006139 	.word	0x08006139
 80060f4:	08006129 	.word	0x08006129
 80060f8:	08006139 	.word	0x08006139
 80060fc:	08006139 	.word	0x08006139
 8006100:	08006139 	.word	0x08006139
 8006104:	08006121 	.word	0x08006121
 8006108:	08006139 	.word	0x08006139
 800610c:	08006139 	.word	0x08006139
 8006110:	08006139 	.word	0x08006139
 8006114:	08006131 	.word	0x08006131
 8006118:	2300      	movs	r3, #0
 800611a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800611e:	e0d8      	b.n	80062d2 <UART_SetConfig+0x2e6>
 8006120:	2302      	movs	r3, #2
 8006122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006126:	e0d4      	b.n	80062d2 <UART_SetConfig+0x2e6>
 8006128:	2304      	movs	r3, #4
 800612a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800612e:	e0d0      	b.n	80062d2 <UART_SetConfig+0x2e6>
 8006130:	2308      	movs	r3, #8
 8006132:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006136:	e0cc      	b.n	80062d2 <UART_SetConfig+0x2e6>
 8006138:	2310      	movs	r3, #16
 800613a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800613e:	e0c8      	b.n	80062d2 <UART_SetConfig+0x2e6>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a5e      	ldr	r2, [pc, #376]	@ (80062c0 <UART_SetConfig+0x2d4>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d125      	bne.n	8006196 <UART_SetConfig+0x1aa>
 800614a:	4b5b      	ldr	r3, [pc, #364]	@ (80062b8 <UART_SetConfig+0x2cc>)
 800614c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006150:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006154:	2b30      	cmp	r3, #48	@ 0x30
 8006156:	d016      	beq.n	8006186 <UART_SetConfig+0x19a>
 8006158:	2b30      	cmp	r3, #48	@ 0x30
 800615a:	d818      	bhi.n	800618e <UART_SetConfig+0x1a2>
 800615c:	2b20      	cmp	r3, #32
 800615e:	d00a      	beq.n	8006176 <UART_SetConfig+0x18a>
 8006160:	2b20      	cmp	r3, #32
 8006162:	d814      	bhi.n	800618e <UART_SetConfig+0x1a2>
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <UART_SetConfig+0x182>
 8006168:	2b10      	cmp	r3, #16
 800616a:	d008      	beq.n	800617e <UART_SetConfig+0x192>
 800616c:	e00f      	b.n	800618e <UART_SetConfig+0x1a2>
 800616e:	2300      	movs	r3, #0
 8006170:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006174:	e0ad      	b.n	80062d2 <UART_SetConfig+0x2e6>
 8006176:	2302      	movs	r3, #2
 8006178:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800617c:	e0a9      	b.n	80062d2 <UART_SetConfig+0x2e6>
 800617e:	2304      	movs	r3, #4
 8006180:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006184:	e0a5      	b.n	80062d2 <UART_SetConfig+0x2e6>
 8006186:	2308      	movs	r3, #8
 8006188:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800618c:	e0a1      	b.n	80062d2 <UART_SetConfig+0x2e6>
 800618e:	2310      	movs	r3, #16
 8006190:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006194:	e09d      	b.n	80062d2 <UART_SetConfig+0x2e6>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a4a      	ldr	r2, [pc, #296]	@ (80062c4 <UART_SetConfig+0x2d8>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d125      	bne.n	80061ec <UART_SetConfig+0x200>
 80061a0:	4b45      	ldr	r3, [pc, #276]	@ (80062b8 <UART_SetConfig+0x2cc>)
 80061a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80061aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80061ac:	d016      	beq.n	80061dc <UART_SetConfig+0x1f0>
 80061ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80061b0:	d818      	bhi.n	80061e4 <UART_SetConfig+0x1f8>
 80061b2:	2b80      	cmp	r3, #128	@ 0x80
 80061b4:	d00a      	beq.n	80061cc <UART_SetConfig+0x1e0>
 80061b6:	2b80      	cmp	r3, #128	@ 0x80
 80061b8:	d814      	bhi.n	80061e4 <UART_SetConfig+0x1f8>
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d002      	beq.n	80061c4 <UART_SetConfig+0x1d8>
 80061be:	2b40      	cmp	r3, #64	@ 0x40
 80061c0:	d008      	beq.n	80061d4 <UART_SetConfig+0x1e8>
 80061c2:	e00f      	b.n	80061e4 <UART_SetConfig+0x1f8>
 80061c4:	2300      	movs	r3, #0
 80061c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ca:	e082      	b.n	80062d2 <UART_SetConfig+0x2e6>
 80061cc:	2302      	movs	r3, #2
 80061ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061d2:	e07e      	b.n	80062d2 <UART_SetConfig+0x2e6>
 80061d4:	2304      	movs	r3, #4
 80061d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061da:	e07a      	b.n	80062d2 <UART_SetConfig+0x2e6>
 80061dc:	2308      	movs	r3, #8
 80061de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061e2:	e076      	b.n	80062d2 <UART_SetConfig+0x2e6>
 80061e4:	2310      	movs	r3, #16
 80061e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ea:	e072      	b.n	80062d2 <UART_SetConfig+0x2e6>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a35      	ldr	r2, [pc, #212]	@ (80062c8 <UART_SetConfig+0x2dc>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d12a      	bne.n	800624c <UART_SetConfig+0x260>
 80061f6:	4b30      	ldr	r3, [pc, #192]	@ (80062b8 <UART_SetConfig+0x2cc>)
 80061f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006200:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006204:	d01a      	beq.n	800623c <UART_SetConfig+0x250>
 8006206:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800620a:	d81b      	bhi.n	8006244 <UART_SetConfig+0x258>
 800620c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006210:	d00c      	beq.n	800622c <UART_SetConfig+0x240>
 8006212:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006216:	d815      	bhi.n	8006244 <UART_SetConfig+0x258>
 8006218:	2b00      	cmp	r3, #0
 800621a:	d003      	beq.n	8006224 <UART_SetConfig+0x238>
 800621c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006220:	d008      	beq.n	8006234 <UART_SetConfig+0x248>
 8006222:	e00f      	b.n	8006244 <UART_SetConfig+0x258>
 8006224:	2300      	movs	r3, #0
 8006226:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800622a:	e052      	b.n	80062d2 <UART_SetConfig+0x2e6>
 800622c:	2302      	movs	r3, #2
 800622e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006232:	e04e      	b.n	80062d2 <UART_SetConfig+0x2e6>
 8006234:	2304      	movs	r3, #4
 8006236:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800623a:	e04a      	b.n	80062d2 <UART_SetConfig+0x2e6>
 800623c:	2308      	movs	r3, #8
 800623e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006242:	e046      	b.n	80062d2 <UART_SetConfig+0x2e6>
 8006244:	2310      	movs	r3, #16
 8006246:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800624a:	e042      	b.n	80062d2 <UART_SetConfig+0x2e6>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a17      	ldr	r2, [pc, #92]	@ (80062b0 <UART_SetConfig+0x2c4>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d13a      	bne.n	80062cc <UART_SetConfig+0x2e0>
 8006256:	4b18      	ldr	r3, [pc, #96]	@ (80062b8 <UART_SetConfig+0x2cc>)
 8006258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800625c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006260:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006264:	d01a      	beq.n	800629c <UART_SetConfig+0x2b0>
 8006266:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800626a:	d81b      	bhi.n	80062a4 <UART_SetConfig+0x2b8>
 800626c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006270:	d00c      	beq.n	800628c <UART_SetConfig+0x2a0>
 8006272:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006276:	d815      	bhi.n	80062a4 <UART_SetConfig+0x2b8>
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <UART_SetConfig+0x298>
 800627c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006280:	d008      	beq.n	8006294 <UART_SetConfig+0x2a8>
 8006282:	e00f      	b.n	80062a4 <UART_SetConfig+0x2b8>
 8006284:	2300      	movs	r3, #0
 8006286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800628a:	e022      	b.n	80062d2 <UART_SetConfig+0x2e6>
 800628c:	2302      	movs	r3, #2
 800628e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006292:	e01e      	b.n	80062d2 <UART_SetConfig+0x2e6>
 8006294:	2304      	movs	r3, #4
 8006296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800629a:	e01a      	b.n	80062d2 <UART_SetConfig+0x2e6>
 800629c:	2308      	movs	r3, #8
 800629e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062a2:	e016      	b.n	80062d2 <UART_SetConfig+0x2e6>
 80062a4:	2310      	movs	r3, #16
 80062a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062aa:	e012      	b.n	80062d2 <UART_SetConfig+0x2e6>
 80062ac:	efff69f3 	.word	0xefff69f3
 80062b0:	40008000 	.word	0x40008000
 80062b4:	40013800 	.word	0x40013800
 80062b8:	40021000 	.word	0x40021000
 80062bc:	40004400 	.word	0x40004400
 80062c0:	40004800 	.word	0x40004800
 80062c4:	40004c00 	.word	0x40004c00
 80062c8:	40005000 	.word	0x40005000
 80062cc:	2310      	movs	r3, #16
 80062ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a9f      	ldr	r2, [pc, #636]	@ (8006554 <UART_SetConfig+0x568>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d17a      	bne.n	80063d2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	d824      	bhi.n	800632e <UART_SetConfig+0x342>
 80062e4:	a201      	add	r2, pc, #4	@ (adr r2, 80062ec <UART_SetConfig+0x300>)
 80062e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ea:	bf00      	nop
 80062ec:	08006311 	.word	0x08006311
 80062f0:	0800632f 	.word	0x0800632f
 80062f4:	08006319 	.word	0x08006319
 80062f8:	0800632f 	.word	0x0800632f
 80062fc:	0800631f 	.word	0x0800631f
 8006300:	0800632f 	.word	0x0800632f
 8006304:	0800632f 	.word	0x0800632f
 8006308:	0800632f 	.word	0x0800632f
 800630c:	08006327 	.word	0x08006327
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006310:	f7fe f88c 	bl	800442c <HAL_RCC_GetPCLK1Freq>
 8006314:	61f8      	str	r0, [r7, #28]
        break;
 8006316:	e010      	b.n	800633a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006318:	4b8f      	ldr	r3, [pc, #572]	@ (8006558 <UART_SetConfig+0x56c>)
 800631a:	61fb      	str	r3, [r7, #28]
        break;
 800631c:	e00d      	b.n	800633a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800631e:	f7fd ffed 	bl	80042fc <HAL_RCC_GetSysClockFreq>
 8006322:	61f8      	str	r0, [r7, #28]
        break;
 8006324:	e009      	b.n	800633a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006326:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800632a:	61fb      	str	r3, [r7, #28]
        break;
 800632c:	e005      	b.n	800633a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800632e:	2300      	movs	r3, #0
 8006330:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006338:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 80fb 	beq.w	8006538 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	4613      	mov	r3, r2
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	4413      	add	r3, r2
 800634c:	69fa      	ldr	r2, [r7, #28]
 800634e:	429a      	cmp	r2, r3
 8006350:	d305      	bcc.n	800635e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006358:	69fa      	ldr	r2, [r7, #28]
 800635a:	429a      	cmp	r2, r3
 800635c:	d903      	bls.n	8006366 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006364:	e0e8      	b.n	8006538 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	2200      	movs	r2, #0
 800636a:	461c      	mov	r4, r3
 800636c:	4615      	mov	r5, r2
 800636e:	f04f 0200 	mov.w	r2, #0
 8006372:	f04f 0300 	mov.w	r3, #0
 8006376:	022b      	lsls	r3, r5, #8
 8006378:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800637c:	0222      	lsls	r2, r4, #8
 800637e:	68f9      	ldr	r1, [r7, #12]
 8006380:	6849      	ldr	r1, [r1, #4]
 8006382:	0849      	lsrs	r1, r1, #1
 8006384:	2000      	movs	r0, #0
 8006386:	4688      	mov	r8, r1
 8006388:	4681      	mov	r9, r0
 800638a:	eb12 0a08 	adds.w	sl, r2, r8
 800638e:	eb43 0b09 	adc.w	fp, r3, r9
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	603b      	str	r3, [r7, #0]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063a0:	4650      	mov	r0, sl
 80063a2:	4659      	mov	r1, fp
 80063a4:	f7fa fc50 	bl	8000c48 <__aeabi_uldivmod>
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	4613      	mov	r3, r2
 80063ae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063b6:	d308      	bcc.n	80063ca <UART_SetConfig+0x3de>
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063be:	d204      	bcs.n	80063ca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	60da      	str	r2, [r3, #12]
 80063c8:	e0b6      	b.n	8006538 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80063d0:	e0b2      	b.n	8006538 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063da:	d15e      	bne.n	800649a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80063dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80063e0:	2b08      	cmp	r3, #8
 80063e2:	d828      	bhi.n	8006436 <UART_SetConfig+0x44a>
 80063e4:	a201      	add	r2, pc, #4	@ (adr r2, 80063ec <UART_SetConfig+0x400>)
 80063e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ea:	bf00      	nop
 80063ec:	08006411 	.word	0x08006411
 80063f0:	08006419 	.word	0x08006419
 80063f4:	08006421 	.word	0x08006421
 80063f8:	08006437 	.word	0x08006437
 80063fc:	08006427 	.word	0x08006427
 8006400:	08006437 	.word	0x08006437
 8006404:	08006437 	.word	0x08006437
 8006408:	08006437 	.word	0x08006437
 800640c:	0800642f 	.word	0x0800642f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006410:	f7fe f80c 	bl	800442c <HAL_RCC_GetPCLK1Freq>
 8006414:	61f8      	str	r0, [r7, #28]
        break;
 8006416:	e014      	b.n	8006442 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006418:	f7fe f81e 	bl	8004458 <HAL_RCC_GetPCLK2Freq>
 800641c:	61f8      	str	r0, [r7, #28]
        break;
 800641e:	e010      	b.n	8006442 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006420:	4b4d      	ldr	r3, [pc, #308]	@ (8006558 <UART_SetConfig+0x56c>)
 8006422:	61fb      	str	r3, [r7, #28]
        break;
 8006424:	e00d      	b.n	8006442 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006426:	f7fd ff69 	bl	80042fc <HAL_RCC_GetSysClockFreq>
 800642a:	61f8      	str	r0, [r7, #28]
        break;
 800642c:	e009      	b.n	8006442 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800642e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006432:	61fb      	str	r3, [r7, #28]
        break;
 8006434:	e005      	b.n	8006442 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006436:	2300      	movs	r3, #0
 8006438:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006440:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d077      	beq.n	8006538 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	005a      	lsls	r2, r3, #1
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	085b      	lsrs	r3, r3, #1
 8006452:	441a      	add	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	fbb2 f3f3 	udiv	r3, r2, r3
 800645c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	2b0f      	cmp	r3, #15
 8006462:	d916      	bls.n	8006492 <UART_SetConfig+0x4a6>
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800646a:	d212      	bcs.n	8006492 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	b29b      	uxth	r3, r3
 8006470:	f023 030f 	bic.w	r3, r3, #15
 8006474:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	085b      	lsrs	r3, r3, #1
 800647a:	b29b      	uxth	r3, r3
 800647c:	f003 0307 	and.w	r3, r3, #7
 8006480:	b29a      	uxth	r2, r3
 8006482:	8afb      	ldrh	r3, [r7, #22]
 8006484:	4313      	orrs	r3, r2
 8006486:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	8afa      	ldrh	r2, [r7, #22]
 800648e:	60da      	str	r2, [r3, #12]
 8006490:	e052      	b.n	8006538 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006498:	e04e      	b.n	8006538 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800649a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800649e:	2b08      	cmp	r3, #8
 80064a0:	d827      	bhi.n	80064f2 <UART_SetConfig+0x506>
 80064a2:	a201      	add	r2, pc, #4	@ (adr r2, 80064a8 <UART_SetConfig+0x4bc>)
 80064a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a8:	080064cd 	.word	0x080064cd
 80064ac:	080064d5 	.word	0x080064d5
 80064b0:	080064dd 	.word	0x080064dd
 80064b4:	080064f3 	.word	0x080064f3
 80064b8:	080064e3 	.word	0x080064e3
 80064bc:	080064f3 	.word	0x080064f3
 80064c0:	080064f3 	.word	0x080064f3
 80064c4:	080064f3 	.word	0x080064f3
 80064c8:	080064eb 	.word	0x080064eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064cc:	f7fd ffae 	bl	800442c <HAL_RCC_GetPCLK1Freq>
 80064d0:	61f8      	str	r0, [r7, #28]
        break;
 80064d2:	e014      	b.n	80064fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064d4:	f7fd ffc0 	bl	8004458 <HAL_RCC_GetPCLK2Freq>
 80064d8:	61f8      	str	r0, [r7, #28]
        break;
 80064da:	e010      	b.n	80064fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064dc:	4b1e      	ldr	r3, [pc, #120]	@ (8006558 <UART_SetConfig+0x56c>)
 80064de:	61fb      	str	r3, [r7, #28]
        break;
 80064e0:	e00d      	b.n	80064fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064e2:	f7fd ff0b 	bl	80042fc <HAL_RCC_GetSysClockFreq>
 80064e6:	61f8      	str	r0, [r7, #28]
        break;
 80064e8:	e009      	b.n	80064fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064ee:	61fb      	str	r3, [r7, #28]
        break;
 80064f0:	e005      	b.n	80064fe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80064fc:	bf00      	nop
    }

    if (pclk != 0U)
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d019      	beq.n	8006538 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	085a      	lsrs	r2, r3, #1
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	441a      	add	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	fbb2 f3f3 	udiv	r3, r2, r3
 8006516:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	2b0f      	cmp	r3, #15
 800651c:	d909      	bls.n	8006532 <UART_SetConfig+0x546>
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006524:	d205      	bcs.n	8006532 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	b29a      	uxth	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	60da      	str	r2, [r3, #12]
 8006530:	e002      	b.n	8006538 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006544:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006548:	4618      	mov	r0, r3
 800654a:	3728      	adds	r7, #40	@ 0x28
 800654c:	46bd      	mov	sp, r7
 800654e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006552:	bf00      	nop
 8006554:	40008000 	.word	0x40008000
 8006558:	00f42400 	.word	0x00f42400

0800655c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006568:	f003 0308 	and.w	r3, r3, #8
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00a      	beq.n	8006586 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00a      	beq.n	80065a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00a      	beq.n	80065ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ce:	f003 0304 	and.w	r3, r3, #4
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f0:	f003 0310 	and.w	r3, r3, #16
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00a      	beq.n	800660e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006612:	f003 0320 	and.w	r3, r3, #32
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00a      	beq.n	8006630 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	430a      	orrs	r2, r1
 800662e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006638:	2b00      	cmp	r3, #0
 800663a:	d01a      	beq.n	8006672 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	430a      	orrs	r2, r1
 8006650:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006656:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800665a:	d10a      	bne.n	8006672 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00a      	beq.n	8006694 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	430a      	orrs	r2, r1
 8006692:	605a      	str	r2, [r3, #4]
  }
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b098      	sub	sp, #96	@ 0x60
 80066a4:	af02      	add	r7, sp, #8
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066b0:	f7fb fdba 	bl	8002228 <HAL_GetTick>
 80066b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0308 	and.w	r3, r3, #8
 80066c0:	2b08      	cmp	r3, #8
 80066c2:	d12e      	bne.n	8006722 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066cc:	2200      	movs	r2, #0
 80066ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f88c 	bl	80067f0 <UART_WaitOnFlagUntilTimeout>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d021      	beq.n	8006722 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e6:	e853 3f00 	ldrex	r3, [r3]
 80066ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	461a      	mov	r2, r3
 80066fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80066fe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006700:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006702:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006704:	e841 2300 	strex	r3, r2, [r1]
 8006708:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800670a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1e6      	bne.n	80066de <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2220      	movs	r2, #32
 8006714:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e062      	b.n	80067e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b04      	cmp	r3, #4
 800672e:	d149      	bne.n	80067c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006730:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006738:	2200      	movs	r2, #0
 800673a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f856 	bl	80067f0 <UART_WaitOnFlagUntilTimeout>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d03c      	beq.n	80067c4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006752:	e853 3f00 	ldrex	r3, [r3]
 8006756:	623b      	str	r3, [r7, #32]
   return(result);
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800675e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	461a      	mov	r2, r3
 8006766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006768:	633b      	str	r3, [r7, #48]	@ 0x30
 800676a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800676e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006770:	e841 2300 	strex	r3, r2, [r1]
 8006774:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1e6      	bne.n	800674a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	3308      	adds	r3, #8
 8006782:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	e853 3f00 	ldrex	r3, [r3]
 800678a:	60fb      	str	r3, [r7, #12]
   return(result);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 0301 	bic.w	r3, r3, #1
 8006792:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	3308      	adds	r3, #8
 800679a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800679c:	61fa      	str	r2, [r7, #28]
 800679e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a0:	69b9      	ldr	r1, [r7, #24]
 80067a2:	69fa      	ldr	r2, [r7, #28]
 80067a4:	e841 2300 	strex	r3, r2, [r1]
 80067a8:	617b      	str	r3, [r7, #20]
   return(result);
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d1e5      	bne.n	800677c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2220      	movs	r2, #32
 80067b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e011      	b.n	80067e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2220      	movs	r2, #32
 80067c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3758      	adds	r7, #88	@ 0x58
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	603b      	str	r3, [r7, #0]
 80067fc:	4613      	mov	r3, r2
 80067fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006800:	e04f      	b.n	80068a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006808:	d04b      	beq.n	80068a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800680a:	f7fb fd0d 	bl	8002228 <HAL_GetTick>
 800680e:	4602      	mov	r2, r0
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	69ba      	ldr	r2, [r7, #24]
 8006816:	429a      	cmp	r2, r3
 8006818:	d302      	bcc.n	8006820 <UART_WaitOnFlagUntilTimeout+0x30>
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e04e      	b.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0304 	and.w	r3, r3, #4
 800682e:	2b00      	cmp	r3, #0
 8006830:	d037      	beq.n	80068a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2b80      	cmp	r3, #128	@ 0x80
 8006836:	d034      	beq.n	80068a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2b40      	cmp	r3, #64	@ 0x40
 800683c:	d031      	beq.n	80068a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	69db      	ldr	r3, [r3, #28]
 8006844:	f003 0308 	and.w	r3, r3, #8
 8006848:	2b08      	cmp	r3, #8
 800684a:	d110      	bne.n	800686e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2208      	movs	r2, #8
 8006852:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 f838 	bl	80068ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2208      	movs	r2, #8
 800685e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e029      	b.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	69db      	ldr	r3, [r3, #28]
 8006874:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006878:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800687c:	d111      	bne.n	80068a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006886:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 f81e 	bl	80068ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2220      	movs	r2, #32
 8006892:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e00f      	b.n	80068c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	69da      	ldr	r2, [r3, #28]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	4013      	ands	r3, r2
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	bf0c      	ite	eq
 80068b2:	2301      	moveq	r3, #1
 80068b4:	2300      	movne	r3, #0
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	461a      	mov	r2, r3
 80068ba:	79fb      	ldrb	r3, [r7, #7]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d0a0      	beq.n	8006802 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068ca:	b480      	push	{r7}
 80068cc:	b095      	sub	sp, #84	@ 0x54
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068da:	e853 3f00 	ldrex	r3, [r3]
 80068de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	461a      	mov	r2, r3
 80068ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80068f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068f8:	e841 2300 	strex	r3, r2, [r1]
 80068fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1e6      	bne.n	80068d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3308      	adds	r3, #8
 800690a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	e853 3f00 	ldrex	r3, [r3]
 8006912:	61fb      	str	r3, [r7, #28]
   return(result);
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	f023 0301 	bic.w	r3, r3, #1
 800691a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3308      	adds	r3, #8
 8006922:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006924:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006926:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006928:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800692a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800692c:	e841 2300 	strex	r3, r2, [r1]
 8006930:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1e5      	bne.n	8006904 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800693c:	2b01      	cmp	r3, #1
 800693e:	d118      	bne.n	8006972 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	e853 3f00 	ldrex	r3, [r3]
 800694c:	60bb      	str	r3, [r7, #8]
   return(result);
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	f023 0310 	bic.w	r3, r3, #16
 8006954:	647b      	str	r3, [r7, #68]	@ 0x44
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	461a      	mov	r2, r3
 800695c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800695e:	61bb      	str	r3, [r7, #24]
 8006960:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006962:	6979      	ldr	r1, [r7, #20]
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	e841 2300 	strex	r3, r2, [r1]
 800696a:	613b      	str	r3, [r7, #16]
   return(result);
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1e6      	bne.n	8006940 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2220      	movs	r2, #32
 8006976:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006986:	bf00      	nop
 8006988:	3754      	adds	r7, #84	@ 0x54
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
	...

08006994 <__NVIC_SetPriority>:
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	4603      	mov	r3, r0
 800699c:	6039      	str	r1, [r7, #0]
 800699e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	db0a      	blt.n	80069be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	490c      	ldr	r1, [pc, #48]	@ (80069e0 <__NVIC_SetPriority+0x4c>)
 80069ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069b2:	0112      	lsls	r2, r2, #4
 80069b4:	b2d2      	uxtb	r2, r2
 80069b6:	440b      	add	r3, r1
 80069b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80069bc:	e00a      	b.n	80069d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	4908      	ldr	r1, [pc, #32]	@ (80069e4 <__NVIC_SetPriority+0x50>)
 80069c4:	79fb      	ldrb	r3, [r7, #7]
 80069c6:	f003 030f 	and.w	r3, r3, #15
 80069ca:	3b04      	subs	r3, #4
 80069cc:	0112      	lsls	r2, r2, #4
 80069ce:	b2d2      	uxtb	r2, r2
 80069d0:	440b      	add	r3, r1
 80069d2:	761a      	strb	r2, [r3, #24]
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	e000e100 	.word	0xe000e100
 80069e4:	e000ed00 	.word	0xe000ed00

080069e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80069e8:	b580      	push	{r7, lr}
 80069ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80069ec:	4b05      	ldr	r3, [pc, #20]	@ (8006a04 <SysTick_Handler+0x1c>)
 80069ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80069f0:	f002 fb94 	bl	800911c <xTaskGetSchedulerState>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d001      	beq.n	80069fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80069fa:	f003 fa8d 	bl	8009f18 <xPortSysTickHandler>
  }
}
 80069fe:	bf00      	nop
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	e000e010 	.word	0xe000e010

08006a08 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	f06f 0004 	mvn.w	r0, #4
 8006a12:	f7ff ffbf 	bl	8006994 <__NVIC_SetPriority>
#endif
}
 8006a16:	bf00      	nop
 8006a18:	bd80      	pop	{r7, pc}
	...

08006a1c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a22:	f3ef 8305 	mrs	r3, IPSR
 8006a26:	603b      	str	r3, [r7, #0]
  return(result);
 8006a28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d003      	beq.n	8006a36 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006a2e:	f06f 0305 	mvn.w	r3, #5
 8006a32:	607b      	str	r3, [r7, #4]
 8006a34:	e00c      	b.n	8006a50 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a36:	4b0a      	ldr	r3, [pc, #40]	@ (8006a60 <osKernelInitialize+0x44>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d105      	bne.n	8006a4a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006a3e:	4b08      	ldr	r3, [pc, #32]	@ (8006a60 <osKernelInitialize+0x44>)
 8006a40:	2201      	movs	r2, #1
 8006a42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a44:	2300      	movs	r3, #0
 8006a46:	607b      	str	r3, [r7, #4]
 8006a48:	e002      	b.n	8006a50 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006a4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006a4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006a50:	687b      	ldr	r3, [r7, #4]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	200003f4 	.word	0x200003f4

08006a64 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a6a:	f3ef 8305 	mrs	r3, IPSR
 8006a6e:	603b      	str	r3, [r7, #0]
  return(result);
 8006a70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006a76:	f06f 0305 	mvn.w	r3, #5
 8006a7a:	607b      	str	r3, [r7, #4]
 8006a7c:	e010      	b.n	8006aa0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006aac <osKernelStart+0x48>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d109      	bne.n	8006a9a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006a86:	f7ff ffbf 	bl	8006a08 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006a8a:	4b08      	ldr	r3, [pc, #32]	@ (8006aac <osKernelStart+0x48>)
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006a90:	f001 febe 	bl	8008810 <vTaskStartScheduler>
      stat = osOK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	607b      	str	r3, [r7, #4]
 8006a98:	e002      	b.n	8006aa0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006a9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006a9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006aa0:	687b      	ldr	r3, [r7, #4]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	200003f4 	.word	0x200003f4

08006ab0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ab6:	f3ef 8305 	mrs	r3, IPSR
 8006aba:	603b      	str	r3, [r7, #0]
  return(result);
 8006abc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8006ac2:	f001 ffd1 	bl	8008a68 <xTaskGetTickCountFromISR>
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	e002      	b.n	8006ad0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8006aca:	f001 ffbd 	bl	8008a48 <xTaskGetTickCount>
 8006ace:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8006ad0:	687b      	ldr	r3, [r7, #4]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b08e      	sub	sp, #56	@ 0x38
 8006ade:	af04      	add	r7, sp, #16
 8006ae0:	60f8      	str	r0, [r7, #12]
 8006ae2:	60b9      	str	r1, [r7, #8]
 8006ae4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aea:	f3ef 8305 	mrs	r3, IPSR
 8006aee:	617b      	str	r3, [r7, #20]
  return(result);
 8006af0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d17e      	bne.n	8006bf4 <osThreadNew+0x11a>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d07b      	beq.n	8006bf4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006afc:	2380      	movs	r3, #128	@ 0x80
 8006afe:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006b00:	2318      	movs	r3, #24
 8006b02:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006b04:	2300      	movs	r3, #0
 8006b06:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006b08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b0c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d045      	beq.n	8006ba0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d002      	beq.n	8006b22 <osThreadNew+0x48>
        name = attr->name;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d002      	beq.n	8006b30 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d008      	beq.n	8006b48 <osThreadNew+0x6e>
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	2b38      	cmp	r3, #56	@ 0x38
 8006b3a:	d805      	bhi.n	8006b48 <osThreadNew+0x6e>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <osThreadNew+0x72>
        return (NULL);
 8006b48:	2300      	movs	r3, #0
 8006b4a:	e054      	b.n	8006bf6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	695b      	ldr	r3, [r3, #20]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	695b      	ldr	r3, [r3, #20]
 8006b58:	089b      	lsrs	r3, r3, #2
 8006b5a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00e      	beq.n	8006b82 <osThreadNew+0xa8>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	2ba7      	cmp	r3, #167	@ 0xa7
 8006b6a:	d90a      	bls.n	8006b82 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d006      	beq.n	8006b82 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d002      	beq.n	8006b82 <osThreadNew+0xa8>
        mem = 1;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	61bb      	str	r3, [r7, #24]
 8006b80:	e010      	b.n	8006ba4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10c      	bne.n	8006ba4 <osThreadNew+0xca>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d108      	bne.n	8006ba4 <osThreadNew+0xca>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d104      	bne.n	8006ba4 <osThreadNew+0xca>
          mem = 0;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	61bb      	str	r3, [r7, #24]
 8006b9e:	e001      	b.n	8006ba4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d110      	bne.n	8006bcc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bb2:	9202      	str	r2, [sp, #8]
 8006bb4:	9301      	str	r3, [sp, #4]
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	6a3a      	ldr	r2, [r7, #32]
 8006bbe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f001 fc31 	bl	8008428 <xTaskCreateStatic>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	613b      	str	r3, [r7, #16]
 8006bca:	e013      	b.n	8006bf4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d110      	bne.n	8006bf4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	f107 0310 	add.w	r3, r7, #16
 8006bda:	9301      	str	r3, [sp, #4]
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f001 fc7f 	bl	80084e8 <xTaskCreate>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d001      	beq.n	8006bf4 <osThreadNew+0x11a>
            hTask = NULL;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006bf4:	693b      	ldr	r3, [r7, #16]
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3728      	adds	r7, #40	@ 0x28
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b084      	sub	sp, #16
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c06:	f3ef 8305 	mrs	r3, IPSR
 8006c0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <osDelay+0x1c>
    stat = osErrorISR;
 8006c12:	f06f 0305 	mvn.w	r3, #5
 8006c16:	60fb      	str	r3, [r7, #12]
 8006c18:	e007      	b.n	8006c2a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d002      	beq.n	8006c2a <osDelay+0x2c>
      vTaskDelay(ticks);
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f001 fdbd 	bl	80087a4 <vTaskDelay>
    }
  }

  return (stat);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b088      	sub	sp, #32
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c40:	f3ef 8305 	mrs	r3, IPSR
 8006c44:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c46:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d174      	bne.n	8006d36 <osMutexNew+0x102>
    if (attr != NULL) {
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <osMutexNew+0x26>
      type = attr->attr_bits;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	61bb      	str	r3, [r7, #24]
 8006c58:	e001      	b.n	8006c5e <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d002      	beq.n	8006c6e <osMutexNew+0x3a>
      rmtx = 1U;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	617b      	str	r3, [r7, #20]
 8006c6c:	e001      	b.n	8006c72 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	f003 0308 	and.w	r3, r3, #8
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d15c      	bne.n	8006d36 <osMutexNew+0x102>
      mem = -1;
 8006c7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006c80:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d015      	beq.n	8006cb4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d006      	beq.n	8006c9e <osMutexNew+0x6a>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	2b4f      	cmp	r3, #79	@ 0x4f
 8006c96:	d902      	bls.n	8006c9e <osMutexNew+0x6a>
          mem = 1;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	613b      	str	r3, [r7, #16]
 8006c9c:	e00c      	b.n	8006cb8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d108      	bne.n	8006cb8 <osMutexNew+0x84>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d104      	bne.n	8006cb8 <osMutexNew+0x84>
            mem = 0;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	613b      	str	r3, [r7, #16]
 8006cb2:	e001      	b.n	8006cb8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d112      	bne.n	8006ce4 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d007      	beq.n	8006cd4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	4619      	mov	r1, r3
 8006cca:	2004      	movs	r0, #4
 8006ccc:	f000 fc3f 	bl	800754e <xQueueCreateMutexStatic>
 8006cd0:	61f8      	str	r0, [r7, #28]
 8006cd2:	e016      	b.n	8006d02 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	4619      	mov	r1, r3
 8006cda:	2001      	movs	r0, #1
 8006cdc:	f000 fc37 	bl	800754e <xQueueCreateMutexStatic>
 8006ce0:	61f8      	str	r0, [r7, #28]
 8006ce2:	e00e      	b.n	8006d02 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10b      	bne.n	8006d02 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d004      	beq.n	8006cfa <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006cf0:	2004      	movs	r0, #4
 8006cf2:	f000 fc14 	bl	800751e <xQueueCreateMutex>
 8006cf6:	61f8      	str	r0, [r7, #28]
 8006cf8:	e003      	b.n	8006d02 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006cfa:	2001      	movs	r0, #1
 8006cfc:	f000 fc0f 	bl	800751e <xQueueCreateMutex>
 8006d00:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00c      	beq.n	8006d22 <osMutexNew+0xee>
        if (attr != NULL) {
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d003      	beq.n	8006d16 <osMutexNew+0xe2>
          name = attr->name;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	60fb      	str	r3, [r7, #12]
 8006d14:	e001      	b.n	8006d1a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006d1a:	68f9      	ldr	r1, [r7, #12]
 8006d1c:	69f8      	ldr	r0, [r7, #28]
 8006d1e:	f001 fafb 	bl	8008318 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d006      	beq.n	8006d36 <osMutexNew+0x102>
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	f043 0301 	orr.w	r3, r3, #1
 8006d34:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006d36:	69fb      	ldr	r3, [r7, #28]
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3720      	adds	r7, #32
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f023 0301 	bic.w	r3, r3, #1
 8006d50:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d5e:	f3ef 8305 	mrs	r3, IPSR
 8006d62:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d64:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d003      	beq.n	8006d72 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006d6a:	f06f 0305 	mvn.w	r3, #5
 8006d6e:	617b      	str	r3, [r7, #20]
 8006d70:	e02c      	b.n	8006dcc <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d103      	bne.n	8006d80 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006d78:	f06f 0303 	mvn.w	r3, #3
 8006d7c:	617b      	str	r3, [r7, #20]
 8006d7e:	e025      	b.n	8006dcc <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d011      	beq.n	8006daa <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	6938      	ldr	r0, [r7, #16]
 8006d8a:	f000 fc30 	bl	80075ee <xQueueTakeMutexRecursive>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d01b      	beq.n	8006dcc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006d9a:	f06f 0301 	mvn.w	r3, #1
 8006d9e:	617b      	str	r3, [r7, #20]
 8006da0:	e014      	b.n	8006dcc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006da2:	f06f 0302 	mvn.w	r3, #2
 8006da6:	617b      	str	r3, [r7, #20]
 8006da8:	e010      	b.n	8006dcc <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006daa:	6839      	ldr	r1, [r7, #0]
 8006dac:	6938      	ldr	r0, [r7, #16]
 8006dae:	f000 ffd5 	bl	8007d5c <xQueueSemaphoreTake>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d009      	beq.n	8006dcc <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006dbe:	f06f 0301 	mvn.w	r3, #1
 8006dc2:	617b      	str	r3, [r7, #20]
 8006dc4:	e002      	b.n	8006dcc <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006dc6:	f06f 0302 	mvn.w	r3, #2
 8006dca:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006dcc:	697b      	ldr	r3, [r7, #20]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3718      	adds	r7, #24
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b086      	sub	sp, #24
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f023 0301 	bic.w	r3, r3, #1
 8006de4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006df2:	f3ef 8305 	mrs	r3, IPSR
 8006df6:	60bb      	str	r3, [r7, #8]
  return(result);
 8006df8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <osMutexRelease+0x30>
    stat = osErrorISR;
 8006dfe:	f06f 0305 	mvn.w	r3, #5
 8006e02:	617b      	str	r3, [r7, #20]
 8006e04:	e01f      	b.n	8006e46 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d103      	bne.n	8006e14 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006e0c:	f06f 0303 	mvn.w	r3, #3
 8006e10:	617b      	str	r3, [r7, #20]
 8006e12:	e018      	b.n	8006e46 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d009      	beq.n	8006e2e <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006e1a:	6938      	ldr	r0, [r7, #16]
 8006e1c:	f000 fbb2 	bl	8007584 <xQueueGiveMutexRecursive>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d00f      	beq.n	8006e46 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006e26:	f06f 0302 	mvn.w	r3, #2
 8006e2a:	617b      	str	r3, [r7, #20]
 8006e2c:	e00b      	b.n	8006e46 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006e2e:	2300      	movs	r3, #0
 8006e30:	2200      	movs	r2, #0
 8006e32:	2100      	movs	r1, #0
 8006e34:	6938      	ldr	r0, [r7, #16]
 8006e36:	f000 fc7f 	bl	8007738 <xQueueGenericSend>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d002      	beq.n	8006e46 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006e40:	f06f 0302 	mvn.w	r3, #2
 8006e44:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006e46:	697b      	ldr	r3, [r7, #20]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3718      	adds	r7, #24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b08a      	sub	sp, #40	@ 0x28
 8006e54:	af02      	add	r7, sp, #8
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e60:	f3ef 8305 	mrs	r3, IPSR
 8006e64:	613b      	str	r3, [r7, #16]
  return(result);
 8006e66:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d175      	bne.n	8006f58 <osSemaphoreNew+0x108>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d072      	beq.n	8006f58 <osSemaphoreNew+0x108>
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d86e      	bhi.n	8006f58 <osSemaphoreNew+0x108>
    mem = -1;
 8006e7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e7e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d015      	beq.n	8006eb2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d006      	beq.n	8006e9c <osSemaphoreNew+0x4c>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	2b4f      	cmp	r3, #79	@ 0x4f
 8006e94:	d902      	bls.n	8006e9c <osSemaphoreNew+0x4c>
        mem = 1;
 8006e96:	2301      	movs	r3, #1
 8006e98:	61bb      	str	r3, [r7, #24]
 8006e9a:	e00c      	b.n	8006eb6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d108      	bne.n	8006eb6 <osSemaphoreNew+0x66>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d104      	bne.n	8006eb6 <osSemaphoreNew+0x66>
          mem = 0;
 8006eac:	2300      	movs	r3, #0
 8006eae:	61bb      	str	r3, [r7, #24]
 8006eb0:	e001      	b.n	8006eb6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ebc:	d04c      	beq.n	8006f58 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d128      	bne.n	8006f16 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d10a      	bne.n	8006ee0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	2203      	movs	r2, #3
 8006ed0:	9200      	str	r2, [sp, #0]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	2001      	movs	r0, #1
 8006ed8:	f000 fa2c 	bl	8007334 <xQueueGenericCreateStatic>
 8006edc:	61f8      	str	r0, [r7, #28]
 8006ede:	e005      	b.n	8006eec <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006ee0:	2203      	movs	r2, #3
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	2001      	movs	r0, #1
 8006ee6:	f000 faa2 	bl	800742e <xQueueGenericCreate>
 8006eea:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d022      	beq.n	8006f38 <osSemaphoreNew+0xe8>
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d01f      	beq.n	8006f38 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006ef8:	2300      	movs	r3, #0
 8006efa:	2200      	movs	r2, #0
 8006efc:	2100      	movs	r1, #0
 8006efe:	69f8      	ldr	r0, [r7, #28]
 8006f00:	f000 fc1a 	bl	8007738 <xQueueGenericSend>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d016      	beq.n	8006f38 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006f0a:	69f8      	ldr	r0, [r7, #28]
 8006f0c:	f001 f8b8 	bl	8008080 <vQueueDelete>
            hSemaphore = NULL;
 8006f10:	2300      	movs	r3, #0
 8006f12:	61fb      	str	r3, [r7, #28]
 8006f14:	e010      	b.n	8006f38 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d108      	bne.n	8006f2e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	461a      	mov	r2, r3
 8006f22:	68b9      	ldr	r1, [r7, #8]
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f000 fb99 	bl	800765c <xQueueCreateCountingSemaphoreStatic>
 8006f2a:	61f8      	str	r0, [r7, #28]
 8006f2c:	e004      	b.n	8006f38 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006f2e:	68b9      	ldr	r1, [r7, #8]
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 fbcc 	bl	80076ce <xQueueCreateCountingSemaphore>
 8006f36:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00c      	beq.n	8006f58 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d003      	beq.n	8006f4c <osSemaphoreNew+0xfc>
          name = attr->name;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	617b      	str	r3, [r7, #20]
 8006f4a:	e001      	b.n	8006f50 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006f50:	6979      	ldr	r1, [r7, #20]
 8006f52:	69f8      	ldr	r0, [r7, #28]
 8006f54:	f001 f9e0 	bl	8008318 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006f58:	69fb      	ldr	r3, [r7, #28]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3720      	adds	r7, #32
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
	...

08006f64 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b086      	sub	sp, #24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006f72:	2300      	movs	r3, #0
 8006f74:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d103      	bne.n	8006f84 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006f7c:	f06f 0303 	mvn.w	r3, #3
 8006f80:	617b      	str	r3, [r7, #20]
 8006f82:	e039      	b.n	8006ff8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f84:	f3ef 8305 	mrs	r3, IPSR
 8006f88:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d022      	beq.n	8006fd6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006f96:	f06f 0303 	mvn.w	r3, #3
 8006f9a:	617b      	str	r3, [r7, #20]
 8006f9c:	e02c      	b.n	8006ff8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006fa2:	f107 0308 	add.w	r3, r7, #8
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	2100      	movs	r1, #0
 8006faa:	6938      	ldr	r0, [r7, #16]
 8006fac:	f000 ffe6 	bl	8007f7c <xQueueReceiveFromISR>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d003      	beq.n	8006fbe <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006fb6:	f06f 0302 	mvn.w	r3, #2
 8006fba:	617b      	str	r3, [r7, #20]
 8006fbc:	e01c      	b.n	8006ff8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d019      	beq.n	8006ff8 <osSemaphoreAcquire+0x94>
 8006fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8007004 <osSemaphoreAcquire+0xa0>)
 8006fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	f3bf 8f4f 	dsb	sy
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	e010      	b.n	8006ff8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6938      	ldr	r0, [r7, #16]
 8006fda:	f000 febf 	bl	8007d5c <xQueueSemaphoreTake>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d009      	beq.n	8006ff8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d003      	beq.n	8006ff2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006fea:	f06f 0301 	mvn.w	r3, #1
 8006fee:	617b      	str	r3, [r7, #20]
 8006ff0:	e002      	b.n	8006ff8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006ff2:	f06f 0302 	mvn.w	r3, #2
 8006ff6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006ff8:	697b      	ldr	r3, [r7, #20]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3718      	adds	r7, #24
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	e000ed04 	.word	0xe000ed04

08007008 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007014:	2300      	movs	r3, #0
 8007016:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d103      	bne.n	8007026 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800701e:	f06f 0303 	mvn.w	r3, #3
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	e02c      	b.n	8007080 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007026:	f3ef 8305 	mrs	r3, IPSR
 800702a:	60fb      	str	r3, [r7, #12]
  return(result);
 800702c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800702e:	2b00      	cmp	r3, #0
 8007030:	d01a      	beq.n	8007068 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8007032:	2300      	movs	r3, #0
 8007034:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007036:	f107 0308 	add.w	r3, r7, #8
 800703a:	4619      	mov	r1, r3
 800703c:	6938      	ldr	r0, [r7, #16]
 800703e:	f000 fd1b 	bl	8007a78 <xQueueGiveFromISR>
 8007042:	4603      	mov	r3, r0
 8007044:	2b01      	cmp	r3, #1
 8007046:	d003      	beq.n	8007050 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8007048:	f06f 0302 	mvn.w	r3, #2
 800704c:	617b      	str	r3, [r7, #20]
 800704e:	e017      	b.n	8007080 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d014      	beq.n	8007080 <osSemaphoreRelease+0x78>
 8007056:	4b0d      	ldr	r3, [pc, #52]	@ (800708c <osSemaphoreRelease+0x84>)
 8007058:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	e00b      	b.n	8007080 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007068:	2300      	movs	r3, #0
 800706a:	2200      	movs	r2, #0
 800706c:	2100      	movs	r1, #0
 800706e:	6938      	ldr	r0, [r7, #16]
 8007070:	f000 fb62 	bl	8007738 <xQueueGenericSend>
 8007074:	4603      	mov	r3, r0
 8007076:	2b01      	cmp	r3, #1
 8007078:	d002      	beq.n	8007080 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800707a:	f06f 0302 	mvn.w	r3, #2
 800707e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007080:	697b      	ldr	r3, [r7, #20]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3718      	adds	r7, #24
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	e000ed04 	.word	0xe000ed04

08007090 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4a07      	ldr	r2, [pc, #28]	@ (80070bc <vApplicationGetIdleTaskMemory+0x2c>)
 80070a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	4a06      	ldr	r2, [pc, #24]	@ (80070c0 <vApplicationGetIdleTaskMemory+0x30>)
 80070a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2280      	movs	r2, #128	@ 0x80
 80070ac:	601a      	str	r2, [r3, #0]
}
 80070ae:	bf00      	nop
 80070b0:	3714      	adds	r7, #20
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	200003f8 	.word	0x200003f8
 80070c0:	200004a0 	.word	0x200004a0

080070c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	4a07      	ldr	r2, [pc, #28]	@ (80070f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80070d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	4a06      	ldr	r2, [pc, #24]	@ (80070f4 <vApplicationGetTimerTaskMemory+0x30>)
 80070da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80070e2:	601a      	str	r2, [r3, #0]
}
 80070e4:	bf00      	nop
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	200006a0 	.word	0x200006a0
 80070f4:	20000748 	.word	0x20000748

080070f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f103 0208 	add.w	r2, r3, #8
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007110:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f103 0208 	add.w	r2, r3, #8
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f103 0208 	add.w	r2, r3, #8
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007146:	bf00      	nop
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007152:	b480      	push	{r7}
 8007154:	b085      	sub	sp, #20
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
 800715a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	689a      	ldr	r2, [r3, #8]
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	683a      	ldr	r2, [r7, #0]
 800717c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	1c5a      	adds	r2, r3, #1
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	601a      	str	r2, [r3, #0]
}
 800718e:	bf00      	nop
 8007190:	3714      	adds	r7, #20
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800719a:	b480      	push	{r7}
 800719c:	b085      	sub	sp, #20
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071b0:	d103      	bne.n	80071ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	60fb      	str	r3, [r7, #12]
 80071b8:	e00c      	b.n	80071d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	3308      	adds	r3, #8
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	e002      	b.n	80071c8 <vListInsert+0x2e>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	60fb      	str	r3, [r7, #12]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d2f6      	bcs.n	80071c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	683a      	ldr	r2, [r7, #0]
 80071e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	68fa      	ldr	r2, [r7, #12]
 80071e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	1c5a      	adds	r2, r3, #1
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	601a      	str	r2, [r3, #0]
}
 8007200:	bf00      	nop
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	6892      	ldr	r2, [r2, #8]
 8007222:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	6852      	ldr	r2, [r2, #4]
 800722c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	429a      	cmp	r2, r3
 8007236:	d103      	bne.n	8007240 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689a      	ldr	r2, [r3, #8]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	1e5a      	subs	r2, r3, #1
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
}
 8007254:	4618      	mov	r0, r3
 8007256:	3714      	adds	r7, #20
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10b      	bne.n	800728c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007278:	f383 8811 	msr	BASEPRI, r3
 800727c:	f3bf 8f6f 	isb	sy
 8007280:	f3bf 8f4f 	dsb	sy
 8007284:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007286:	bf00      	nop
 8007288:	bf00      	nop
 800728a:	e7fd      	b.n	8007288 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800728c:	f002 fdb4 	bl	8009df8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007298:	68f9      	ldr	r1, [r7, #12]
 800729a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800729c:	fb01 f303 	mul.w	r3, r1, r3
 80072a0:	441a      	add	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072bc:	3b01      	subs	r3, #1
 80072be:	68f9      	ldr	r1, [r7, #12]
 80072c0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80072c2:	fb01 f303 	mul.w	r3, r1, r3
 80072c6:	441a      	add	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	22ff      	movs	r2, #255	@ 0xff
 80072d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	22ff      	movs	r2, #255	@ 0xff
 80072d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d114      	bne.n	800730c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d01a      	beq.n	8007320 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	3310      	adds	r3, #16
 80072ee:	4618      	mov	r0, r3
 80072f0:	f001 fd3e 	bl	8008d70 <xTaskRemoveFromEventList>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d012      	beq.n	8007320 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80072fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007330 <xQueueGenericReset+0xd0>)
 80072fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007300:	601a      	str	r2, [r3, #0]
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	e009      	b.n	8007320 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	3310      	adds	r3, #16
 8007310:	4618      	mov	r0, r3
 8007312:	f7ff fef1 	bl	80070f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3324      	adds	r3, #36	@ 0x24
 800731a:	4618      	mov	r0, r3
 800731c:	f7ff feec 	bl	80070f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007320:	f002 fd9c 	bl	8009e5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007324:	2301      	movs	r3, #1
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	e000ed04 	.word	0xe000ed04

08007334 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007334:	b580      	push	{r7, lr}
 8007336:	b08e      	sub	sp, #56	@ 0x38
 8007338:	af02      	add	r7, sp, #8
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
 8007340:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10b      	bne.n	8007360 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800734c:	f383 8811 	msr	BASEPRI, r3
 8007350:	f3bf 8f6f 	isb	sy
 8007354:	f3bf 8f4f 	dsb	sy
 8007358:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800735a:	bf00      	nop
 800735c:	bf00      	nop
 800735e:	e7fd      	b.n	800735c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10b      	bne.n	800737e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800736a:	f383 8811 	msr	BASEPRI, r3
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f3bf 8f4f 	dsb	sy
 8007376:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007378:	bf00      	nop
 800737a:	bf00      	nop
 800737c:	e7fd      	b.n	800737a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <xQueueGenericCreateStatic+0x56>
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d001      	beq.n	800738e <xQueueGenericCreateStatic+0x5a>
 800738a:	2301      	movs	r3, #1
 800738c:	e000      	b.n	8007390 <xQueueGenericCreateStatic+0x5c>
 800738e:	2300      	movs	r3, #0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10b      	bne.n	80073ac <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007398:	f383 8811 	msr	BASEPRI, r3
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	623b      	str	r3, [r7, #32]
}
 80073a6:	bf00      	nop
 80073a8:	bf00      	nop
 80073aa:	e7fd      	b.n	80073a8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d102      	bne.n	80073b8 <xQueueGenericCreateStatic+0x84>
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d101      	bne.n	80073bc <xQueueGenericCreateStatic+0x88>
 80073b8:	2301      	movs	r3, #1
 80073ba:	e000      	b.n	80073be <xQueueGenericCreateStatic+0x8a>
 80073bc:	2300      	movs	r3, #0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10b      	bne.n	80073da <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80073c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c6:	f383 8811 	msr	BASEPRI, r3
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	61fb      	str	r3, [r7, #28]
}
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop
 80073d8:	e7fd      	b.n	80073d6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80073da:	2350      	movs	r3, #80	@ 0x50
 80073dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2b50      	cmp	r3, #80	@ 0x50
 80073e2:	d00b      	beq.n	80073fc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80073e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e8:	f383 8811 	msr	BASEPRI, r3
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	61bb      	str	r3, [r7, #24]
}
 80073f6:	bf00      	nop
 80073f8:	bf00      	nop
 80073fa:	e7fd      	b.n	80073f8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80073fc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00d      	beq.n	8007424 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800740a:	2201      	movs	r2, #1
 800740c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007410:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	4613      	mov	r3, r2
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	68b9      	ldr	r1, [r7, #8]
 800741e:	68f8      	ldr	r0, [r7, #12]
 8007420:	f000 f840 	bl	80074a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007426:	4618      	mov	r0, r3
 8007428:	3730      	adds	r7, #48	@ 0x30
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}

0800742e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800742e:	b580      	push	{r7, lr}
 8007430:	b08a      	sub	sp, #40	@ 0x28
 8007432:	af02      	add	r7, sp, #8
 8007434:	60f8      	str	r0, [r7, #12]
 8007436:	60b9      	str	r1, [r7, #8]
 8007438:	4613      	mov	r3, r2
 800743a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10b      	bne.n	800745a <xQueueGenericCreate+0x2c>
	__asm volatile
 8007442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007446:	f383 8811 	msr	BASEPRI, r3
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	613b      	str	r3, [r7, #16]
}
 8007454:	bf00      	nop
 8007456:	bf00      	nop
 8007458:	e7fd      	b.n	8007456 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	fb02 f303 	mul.w	r3, r2, r3
 8007462:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	3350      	adds	r3, #80	@ 0x50
 8007468:	4618      	mov	r0, r3
 800746a:	f002 fde7 	bl	800a03c <pvPortMalloc>
 800746e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d011      	beq.n	800749a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	3350      	adds	r3, #80	@ 0x50
 800747e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007488:	79fa      	ldrb	r2, [r7, #7]
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	4613      	mov	r3, r2
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	68b9      	ldr	r1, [r7, #8]
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 f805 	bl	80074a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800749a:	69bb      	ldr	r3, [r7, #24]
	}
 800749c:	4618      	mov	r0, r3
 800749e:	3720      	adds	r7, #32
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
 80074b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d103      	bne.n	80074c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	69ba      	ldr	r2, [r7, #24]
 80074bc:	601a      	str	r2, [r3, #0]
 80074be:	e002      	b.n	80074c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80074d2:	2101      	movs	r1, #1
 80074d4:	69b8      	ldr	r0, [r7, #24]
 80074d6:	f7ff fec3 	bl	8007260 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	78fa      	ldrb	r2, [r7, #3]
 80074de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80074e2:	bf00      	nop
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b082      	sub	sp, #8
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00e      	beq.n	8007516 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800750a:	2300      	movs	r3, #0
 800750c:	2200      	movs	r2, #0
 800750e:	2100      	movs	r1, #0
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f911 	bl	8007738 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007516:	bf00      	nop
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800751e:	b580      	push	{r7, lr}
 8007520:	b086      	sub	sp, #24
 8007522:	af00      	add	r7, sp, #0
 8007524:	4603      	mov	r3, r0
 8007526:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007528:	2301      	movs	r3, #1
 800752a:	617b      	str	r3, [r7, #20]
 800752c:	2300      	movs	r3, #0
 800752e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007530:	79fb      	ldrb	r3, [r7, #7]
 8007532:	461a      	mov	r2, r3
 8007534:	6939      	ldr	r1, [r7, #16]
 8007536:	6978      	ldr	r0, [r7, #20]
 8007538:	f7ff ff79 	bl	800742e <xQueueGenericCreate>
 800753c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f7ff ffd3 	bl	80074ea <prvInitialiseMutex>

		return xNewQueue;
 8007544:	68fb      	ldr	r3, [r7, #12]
	}
 8007546:	4618      	mov	r0, r3
 8007548:	3718      	adds	r7, #24
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}

0800754e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800754e:	b580      	push	{r7, lr}
 8007550:	b088      	sub	sp, #32
 8007552:	af02      	add	r7, sp, #8
 8007554:	4603      	mov	r3, r0
 8007556:	6039      	str	r1, [r7, #0]
 8007558:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800755a:	2301      	movs	r3, #1
 800755c:	617b      	str	r3, [r7, #20]
 800755e:	2300      	movs	r3, #0
 8007560:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007562:	79fb      	ldrb	r3, [r7, #7]
 8007564:	9300      	str	r3, [sp, #0]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2200      	movs	r2, #0
 800756a:	6939      	ldr	r1, [r7, #16]
 800756c:	6978      	ldr	r0, [r7, #20]
 800756e:	f7ff fee1 	bl	8007334 <xQueueGenericCreateStatic>
 8007572:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f7ff ffb8 	bl	80074ea <prvInitialiseMutex>

		return xNewQueue;
 800757a:	68fb      	ldr	r3, [r7, #12]
	}
 800757c:	4618      	mov	r0, r3
 800757e:	3718      	adds	r7, #24
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007584:	b590      	push	{r4, r7, lr}
 8007586:	b087      	sub	sp, #28
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10b      	bne.n	80075ae <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8007596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800759a:	f383 8811 	msr	BASEPRI, r3
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	f3bf 8f4f 	dsb	sy
 80075a6:	60fb      	str	r3, [r7, #12]
}
 80075a8:	bf00      	nop
 80075aa:	bf00      	nop
 80075ac:	e7fd      	b.n	80075aa <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	689c      	ldr	r4, [r3, #8]
 80075b2:	f001 fda3 	bl	80090fc <xTaskGetCurrentTaskHandle>
 80075b6:	4603      	mov	r3, r0
 80075b8:	429c      	cmp	r4, r3
 80075ba:	d111      	bne.n	80075e0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	1e5a      	subs	r2, r3, #1
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d105      	bne.n	80075da <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80075ce:	2300      	movs	r3, #0
 80075d0:	2200      	movs	r2, #0
 80075d2:	2100      	movs	r1, #0
 80075d4:	6938      	ldr	r0, [r7, #16]
 80075d6:	f000 f8af 	bl	8007738 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80075da:	2301      	movs	r3, #1
 80075dc:	617b      	str	r3, [r7, #20]
 80075de:	e001      	b.n	80075e4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80075e0:	2300      	movs	r3, #0
 80075e2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80075e4:	697b      	ldr	r3, [r7, #20]
	}
 80075e6:	4618      	mov	r0, r3
 80075e8:	371c      	adds	r7, #28
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd90      	pop	{r4, r7, pc}

080075ee <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80075ee:	b590      	push	{r4, r7, lr}
 80075f0:	b087      	sub	sp, #28
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10b      	bne.n	800761a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	60fb      	str	r3, [r7, #12]
}
 8007614:	bf00      	nop
 8007616:	bf00      	nop
 8007618:	e7fd      	b.n	8007616 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	689c      	ldr	r4, [r3, #8]
 800761e:	f001 fd6d 	bl	80090fc <xTaskGetCurrentTaskHandle>
 8007622:	4603      	mov	r3, r0
 8007624:	429c      	cmp	r4, r3
 8007626:	d107      	bne.n	8007638 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007632:	2301      	movs	r3, #1
 8007634:	617b      	str	r3, [r7, #20]
 8007636:	e00c      	b.n	8007652 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	6938      	ldr	r0, [r7, #16]
 800763c:	f000 fb8e 	bl	8007d5c <xQueueSemaphoreTake>
 8007640:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d004      	beq.n	8007652 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	1c5a      	adds	r2, r3, #1
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007652:	697b      	ldr	r3, [r7, #20]
	}
 8007654:	4618      	mov	r0, r3
 8007656:	371c      	adds	r7, #28
 8007658:	46bd      	mov	sp, r7
 800765a:	bd90      	pop	{r4, r7, pc}

0800765c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800765c:	b580      	push	{r7, lr}
 800765e:	b08a      	sub	sp, #40	@ 0x28
 8007660:	af02      	add	r7, sp, #8
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10b      	bne.n	8007686 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	61bb      	str	r3, [r7, #24]
}
 8007680:	bf00      	nop
 8007682:	bf00      	nop
 8007684:	e7fd      	b.n	8007682 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	429a      	cmp	r2, r3
 800768c:	d90b      	bls.n	80076a6 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	617b      	str	r3, [r7, #20]
}
 80076a0:	bf00      	nop
 80076a2:	bf00      	nop
 80076a4:	e7fd      	b.n	80076a2 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80076a6:	2302      	movs	r3, #2
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	2100      	movs	r1, #0
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f7ff fe3f 	bl	8007334 <xQueueGenericCreateStatic>
 80076b6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d002      	beq.n	80076c4 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80076c4:	69fb      	ldr	r3, [r7, #28]
	}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3720      	adds	r7, #32
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b086      	sub	sp, #24
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10b      	bne.n	80076f6 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80076de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	613b      	str	r3, [r7, #16]
}
 80076f0:	bf00      	nop
 80076f2:	bf00      	nop
 80076f4:	e7fd      	b.n	80076f2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d90b      	bls.n	8007716 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80076fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	60fb      	str	r3, [r7, #12]
}
 8007710:	bf00      	nop
 8007712:	bf00      	nop
 8007714:	e7fd      	b.n	8007712 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007716:	2202      	movs	r2, #2
 8007718:	2100      	movs	r1, #0
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7ff fe87 	bl	800742e <xQueueGenericCreate>
 8007720:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d002      	beq.n	800772e <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800772e:	697b      	ldr	r3, [r7, #20]
	}
 8007730:	4618      	mov	r0, r3
 8007732:	3718      	adds	r7, #24
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b08e      	sub	sp, #56	@ 0x38
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
 8007744:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007746:	2300      	movs	r3, #0
 8007748:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800774e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10b      	bne.n	800776c <xQueueGenericSend+0x34>
	__asm volatile
 8007754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007758:	f383 8811 	msr	BASEPRI, r3
 800775c:	f3bf 8f6f 	isb	sy
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007766:	bf00      	nop
 8007768:	bf00      	nop
 800776a:	e7fd      	b.n	8007768 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d103      	bne.n	800777a <xQueueGenericSend+0x42>
 8007772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <xQueueGenericSend+0x46>
 800777a:	2301      	movs	r3, #1
 800777c:	e000      	b.n	8007780 <xQueueGenericSend+0x48>
 800777e:	2300      	movs	r3, #0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10b      	bne.n	800779c <xQueueGenericSend+0x64>
	__asm volatile
 8007784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007788:	f383 8811 	msr	BASEPRI, r3
 800778c:	f3bf 8f6f 	isb	sy
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007796:	bf00      	nop
 8007798:	bf00      	nop
 800779a:	e7fd      	b.n	8007798 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d103      	bne.n	80077aa <xQueueGenericSend+0x72>
 80077a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d101      	bne.n	80077ae <xQueueGenericSend+0x76>
 80077aa:	2301      	movs	r3, #1
 80077ac:	e000      	b.n	80077b0 <xQueueGenericSend+0x78>
 80077ae:	2300      	movs	r3, #0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10b      	bne.n	80077cc <xQueueGenericSend+0x94>
	__asm volatile
 80077b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b8:	f383 8811 	msr	BASEPRI, r3
 80077bc:	f3bf 8f6f 	isb	sy
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	623b      	str	r3, [r7, #32]
}
 80077c6:	bf00      	nop
 80077c8:	bf00      	nop
 80077ca:	e7fd      	b.n	80077c8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077cc:	f001 fca6 	bl	800911c <xTaskGetSchedulerState>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d102      	bne.n	80077dc <xQueueGenericSend+0xa4>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d101      	bne.n	80077e0 <xQueueGenericSend+0xa8>
 80077dc:	2301      	movs	r3, #1
 80077de:	e000      	b.n	80077e2 <xQueueGenericSend+0xaa>
 80077e0:	2300      	movs	r3, #0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10b      	bne.n	80077fe <xQueueGenericSend+0xc6>
	__asm volatile
 80077e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	61fb      	str	r3, [r7, #28]
}
 80077f8:	bf00      	nop
 80077fa:	bf00      	nop
 80077fc:	e7fd      	b.n	80077fa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077fe:	f002 fafb 	bl	8009df8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007804:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800780a:	429a      	cmp	r2, r3
 800780c:	d302      	bcc.n	8007814 <xQueueGenericSend+0xdc>
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b02      	cmp	r3, #2
 8007812:	d129      	bne.n	8007868 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	68b9      	ldr	r1, [r7, #8]
 8007818:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800781a:	f000 fc6d 	bl	80080f8 <prvCopyDataToQueue>
 800781e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007824:	2b00      	cmp	r3, #0
 8007826:	d010      	beq.n	800784a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782a:	3324      	adds	r3, #36	@ 0x24
 800782c:	4618      	mov	r0, r3
 800782e:	f001 fa9f 	bl	8008d70 <xTaskRemoveFromEventList>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d013      	beq.n	8007860 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007838:	4b3f      	ldr	r3, [pc, #252]	@ (8007938 <xQueueGenericSend+0x200>)
 800783a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800783e:	601a      	str	r2, [r3, #0]
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	e00a      	b.n	8007860 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800784a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800784c:	2b00      	cmp	r3, #0
 800784e:	d007      	beq.n	8007860 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007850:	4b39      	ldr	r3, [pc, #228]	@ (8007938 <xQueueGenericSend+0x200>)
 8007852:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007856:	601a      	str	r2, [r3, #0]
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007860:	f002 fafc 	bl	8009e5c <vPortExitCritical>
				return pdPASS;
 8007864:	2301      	movs	r3, #1
 8007866:	e063      	b.n	8007930 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d103      	bne.n	8007876 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800786e:	f002 faf5 	bl	8009e5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007872:	2300      	movs	r3, #0
 8007874:	e05c      	b.n	8007930 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007876:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007878:	2b00      	cmp	r3, #0
 800787a:	d106      	bne.n	800788a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800787c:	f107 0314 	add.w	r3, r7, #20
 8007880:	4618      	mov	r0, r3
 8007882:	f001 fad9 	bl	8008e38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007886:	2301      	movs	r3, #1
 8007888:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800788a:	f002 fae7 	bl	8009e5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800788e:	f001 f82f 	bl	80088f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007892:	f002 fab1 	bl	8009df8 <vPortEnterCritical>
 8007896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007898:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800789c:	b25b      	sxtb	r3, r3
 800789e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80078a2:	d103      	bne.n	80078ac <xQueueGenericSend+0x174>
 80078a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a6:	2200      	movs	r2, #0
 80078a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078b2:	b25b      	sxtb	r3, r3
 80078b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80078b8:	d103      	bne.n	80078c2 <xQueueGenericSend+0x18a>
 80078ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078c2:	f002 facb 	bl	8009e5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078c6:	1d3a      	adds	r2, r7, #4
 80078c8:	f107 0314 	add.w	r3, r7, #20
 80078cc:	4611      	mov	r1, r2
 80078ce:	4618      	mov	r0, r3
 80078d0:	f001 fac8 	bl	8008e64 <xTaskCheckForTimeOut>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d124      	bne.n	8007924 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80078da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078dc:	f000 fd04 	bl	80082e8 <prvIsQueueFull>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d018      	beq.n	8007918 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80078e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e8:	3310      	adds	r3, #16
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	4611      	mov	r1, r2
 80078ee:	4618      	mov	r0, r3
 80078f0:	f001 f9ec 	bl	8008ccc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80078f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078f6:	f000 fc8f 	bl	8008218 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80078fa:	f001 f807 	bl	800890c <xTaskResumeAll>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	f47f af7c 	bne.w	80077fe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007906:	4b0c      	ldr	r3, [pc, #48]	@ (8007938 <xQueueGenericSend+0x200>)
 8007908:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800790c:	601a      	str	r2, [r3, #0]
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	e772      	b.n	80077fe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007918:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800791a:	f000 fc7d 	bl	8008218 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800791e:	f000 fff5 	bl	800890c <xTaskResumeAll>
 8007922:	e76c      	b.n	80077fe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007924:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007926:	f000 fc77 	bl	8008218 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800792a:	f000 ffef 	bl	800890c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800792e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007930:	4618      	mov	r0, r3
 8007932:	3738      	adds	r7, #56	@ 0x38
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	e000ed04 	.word	0xe000ed04

0800793c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b090      	sub	sp, #64	@ 0x40
 8007940:	af00      	add	r7, sp, #0
 8007942:	60f8      	str	r0, [r7, #12]
 8007944:	60b9      	str	r1, [r7, #8]
 8007946:	607a      	str	r2, [r7, #4]
 8007948:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800794e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10b      	bne.n	800796c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007958:	f383 8811 	msr	BASEPRI, r3
 800795c:	f3bf 8f6f 	isb	sy
 8007960:	f3bf 8f4f 	dsb	sy
 8007964:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007966:	bf00      	nop
 8007968:	bf00      	nop
 800796a:	e7fd      	b.n	8007968 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d103      	bne.n	800797a <xQueueGenericSendFromISR+0x3e>
 8007972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007976:	2b00      	cmp	r3, #0
 8007978:	d101      	bne.n	800797e <xQueueGenericSendFromISR+0x42>
 800797a:	2301      	movs	r3, #1
 800797c:	e000      	b.n	8007980 <xQueueGenericSendFromISR+0x44>
 800797e:	2300      	movs	r3, #0
 8007980:	2b00      	cmp	r3, #0
 8007982:	d10b      	bne.n	800799c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007988:	f383 8811 	msr	BASEPRI, r3
 800798c:	f3bf 8f6f 	isb	sy
 8007990:	f3bf 8f4f 	dsb	sy
 8007994:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007996:	bf00      	nop
 8007998:	bf00      	nop
 800799a:	e7fd      	b.n	8007998 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d103      	bne.n	80079aa <xQueueGenericSendFromISR+0x6e>
 80079a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d101      	bne.n	80079ae <xQueueGenericSendFromISR+0x72>
 80079aa:	2301      	movs	r3, #1
 80079ac:	e000      	b.n	80079b0 <xQueueGenericSendFromISR+0x74>
 80079ae:	2300      	movs	r3, #0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10b      	bne.n	80079cc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80079b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	623b      	str	r3, [r7, #32]
}
 80079c6:	bf00      	nop
 80079c8:	bf00      	nop
 80079ca:	e7fd      	b.n	80079c8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079cc:	f002 faf4 	bl	8009fb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80079d0:	f3ef 8211 	mrs	r2, BASEPRI
 80079d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d8:	f383 8811 	msr	BASEPRI, r3
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	f3bf 8f4f 	dsb	sy
 80079e4:	61fa      	str	r2, [r7, #28]
 80079e6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80079e8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079ea:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d302      	bcc.n	80079fe <xQueueGenericSendFromISR+0xc2>
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d12f      	bne.n	8007a5e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80079fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a0e:	683a      	ldr	r2, [r7, #0]
 8007a10:	68b9      	ldr	r1, [r7, #8]
 8007a12:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007a14:	f000 fb70 	bl	80080f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a18:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007a1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a20:	d112      	bne.n	8007a48 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d016      	beq.n	8007a58 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a2c:	3324      	adds	r3, #36	@ 0x24
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f001 f99e 	bl	8008d70 <xTaskRemoveFromEventList>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00e      	beq.n	8007a58 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00b      	beq.n	8007a58 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	601a      	str	r2, [r3, #0]
 8007a46:	e007      	b.n	8007a58 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	b25a      	sxtb	r2, r3
 8007a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007a5c:	e001      	b.n	8007a62 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a64:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a6c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3740      	adds	r7, #64	@ 0x40
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b08e      	sub	sp, #56	@ 0x38
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10b      	bne.n	8007aa4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	623b      	str	r3, [r7, #32]
}
 8007a9e:	bf00      	nop
 8007aa0:	bf00      	nop
 8007aa2:	e7fd      	b.n	8007aa0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00b      	beq.n	8007ac4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8007aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab0:	f383 8811 	msr	BASEPRI, r3
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	f3bf 8f4f 	dsb	sy
 8007abc:	61fb      	str	r3, [r7, #28]
}
 8007abe:	bf00      	nop
 8007ac0:	bf00      	nop
 8007ac2:	e7fd      	b.n	8007ac0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d103      	bne.n	8007ad4 <xQueueGiveFromISR+0x5c>
 8007acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d101      	bne.n	8007ad8 <xQueueGiveFromISR+0x60>
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e000      	b.n	8007ada <xQueueGiveFromISR+0x62>
 8007ad8:	2300      	movs	r3, #0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10b      	bne.n	8007af6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8007ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	61bb      	str	r3, [r7, #24]
}
 8007af0:	bf00      	nop
 8007af2:	bf00      	nop
 8007af4:	e7fd      	b.n	8007af2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007af6:	f002 fa5f 	bl	8009fb8 <vPortValidateInterruptPriority>
	__asm volatile
 8007afa:	f3ef 8211 	mrs	r2, BASEPRI
 8007afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b02:	f383 8811 	msr	BASEPRI, r3
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	f3bf 8f4f 	dsb	sy
 8007b0e:	617a      	str	r2, [r7, #20]
 8007b10:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007b12:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b1a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d22b      	bcs.n	8007b7e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b32:	1c5a      	adds	r2, r3, #1
 8007b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b36:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007b38:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b40:	d112      	bne.n	8007b68 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d016      	beq.n	8007b78 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b4c:	3324      	adds	r3, #36	@ 0x24
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f001 f90e 	bl	8008d70 <xTaskRemoveFromEventList>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00e      	beq.n	8007b78 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00b      	beq.n	8007b78 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	2201      	movs	r2, #1
 8007b64:	601a      	str	r2, [r3, #0]
 8007b66:	e007      	b.n	8007b78 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	b25a      	sxtb	r2, r3
 8007b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b7c:	e001      	b.n	8007b82 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b84:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f383 8811 	msr	BASEPRI, r3
}
 8007b8c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3738      	adds	r7, #56	@ 0x38
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b08c      	sub	sp, #48	@ 0x30
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007bac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10b      	bne.n	8007bca <xQueueReceive+0x32>
	__asm volatile
 8007bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb6:	f383 8811 	msr	BASEPRI, r3
 8007bba:	f3bf 8f6f 	isb	sy
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	623b      	str	r3, [r7, #32]
}
 8007bc4:	bf00      	nop
 8007bc6:	bf00      	nop
 8007bc8:	e7fd      	b.n	8007bc6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d103      	bne.n	8007bd8 <xQueueReceive+0x40>
 8007bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <xQueueReceive+0x44>
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e000      	b.n	8007bde <xQueueReceive+0x46>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10b      	bne.n	8007bfa <xQueueReceive+0x62>
	__asm volatile
 8007be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	61fb      	str	r3, [r7, #28]
}
 8007bf4:	bf00      	nop
 8007bf6:	bf00      	nop
 8007bf8:	e7fd      	b.n	8007bf6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007bfa:	f001 fa8f 	bl	800911c <xTaskGetSchedulerState>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d102      	bne.n	8007c0a <xQueueReceive+0x72>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d101      	bne.n	8007c0e <xQueueReceive+0x76>
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e000      	b.n	8007c10 <xQueueReceive+0x78>
 8007c0e:	2300      	movs	r3, #0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10b      	bne.n	8007c2c <xQueueReceive+0x94>
	__asm volatile
 8007c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c18:	f383 8811 	msr	BASEPRI, r3
 8007c1c:	f3bf 8f6f 	isb	sy
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	61bb      	str	r3, [r7, #24]
}
 8007c26:	bf00      	nop
 8007c28:	bf00      	nop
 8007c2a:	e7fd      	b.n	8007c28 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c2c:	f002 f8e4 	bl	8009df8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c34:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d01f      	beq.n	8007c7c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c3c:	68b9      	ldr	r1, [r7, #8]
 8007c3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c40:	f000 fac4 	bl	80081cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c46:	1e5a      	subs	r2, r3, #1
 8007c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c4a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00f      	beq.n	8007c74 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c56:	3310      	adds	r3, #16
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f001 f889 	bl	8008d70 <xTaskRemoveFromEventList>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d007      	beq.n	8007c74 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c64:	4b3c      	ldr	r3, [pc, #240]	@ (8007d58 <xQueueReceive+0x1c0>)
 8007c66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c6a:	601a      	str	r2, [r3, #0]
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c74:	f002 f8f2 	bl	8009e5c <vPortExitCritical>
				return pdPASS;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e069      	b.n	8007d50 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d103      	bne.n	8007c8a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c82:	f002 f8eb 	bl	8009e5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c86:	2300      	movs	r3, #0
 8007c88:	e062      	b.n	8007d50 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d106      	bne.n	8007c9e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c90:	f107 0310 	add.w	r3, r7, #16
 8007c94:	4618      	mov	r0, r3
 8007c96:	f001 f8cf 	bl	8008e38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c9e:	f002 f8dd 	bl	8009e5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ca2:	f000 fe25 	bl	80088f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ca6:	f002 f8a7 	bl	8009df8 <vPortEnterCritical>
 8007caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007cb0:	b25b      	sxtb	r3, r3
 8007cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007cb6:	d103      	bne.n	8007cc0 <xQueueReceive+0x128>
 8007cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007cc6:	b25b      	sxtb	r3, r3
 8007cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ccc:	d103      	bne.n	8007cd6 <xQueueReceive+0x13e>
 8007cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cd6:	f002 f8c1 	bl	8009e5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cda:	1d3a      	adds	r2, r7, #4
 8007cdc:	f107 0310 	add.w	r3, r7, #16
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f001 f8be 	bl	8008e64 <xTaskCheckForTimeOut>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d123      	bne.n	8007d36 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cf0:	f000 fae4 	bl	80082bc <prvIsQueueEmpty>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d017      	beq.n	8007d2a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cfc:	3324      	adds	r3, #36	@ 0x24
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	4611      	mov	r1, r2
 8007d02:	4618      	mov	r0, r3
 8007d04:	f000 ffe2 	bl	8008ccc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d0a:	f000 fa85 	bl	8008218 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d0e:	f000 fdfd 	bl	800890c <xTaskResumeAll>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d189      	bne.n	8007c2c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007d18:	4b0f      	ldr	r3, [pc, #60]	@ (8007d58 <xQueueReceive+0x1c0>)
 8007d1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d1e:	601a      	str	r2, [r3, #0]
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	e780      	b.n	8007c2c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007d2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d2c:	f000 fa74 	bl	8008218 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d30:	f000 fdec 	bl	800890c <xTaskResumeAll>
 8007d34:	e77a      	b.n	8007c2c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007d36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d38:	f000 fa6e 	bl	8008218 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d3c:	f000 fde6 	bl	800890c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d42:	f000 fabb 	bl	80082bc <prvIsQueueEmpty>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f43f af6f 	beq.w	8007c2c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d4e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3730      	adds	r7, #48	@ 0x30
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	e000ed04 	.word	0xe000ed04

08007d5c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b08e      	sub	sp, #56	@ 0x38
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d66:	2300      	movs	r3, #0
 8007d68:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d10b      	bne.n	8007d90 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d7c:	f383 8811 	msr	BASEPRI, r3
 8007d80:	f3bf 8f6f 	isb	sy
 8007d84:	f3bf 8f4f 	dsb	sy
 8007d88:	623b      	str	r3, [r7, #32]
}
 8007d8a:	bf00      	nop
 8007d8c:	bf00      	nop
 8007d8e:	e7fd      	b.n	8007d8c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00b      	beq.n	8007db0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d9c:	f383 8811 	msr	BASEPRI, r3
 8007da0:	f3bf 8f6f 	isb	sy
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	61fb      	str	r3, [r7, #28]
}
 8007daa:	bf00      	nop
 8007dac:	bf00      	nop
 8007dae:	e7fd      	b.n	8007dac <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007db0:	f001 f9b4 	bl	800911c <xTaskGetSchedulerState>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d102      	bne.n	8007dc0 <xQueueSemaphoreTake+0x64>
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <xQueueSemaphoreTake+0x68>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e000      	b.n	8007dc6 <xQueueSemaphoreTake+0x6a>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10b      	bne.n	8007de2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	61bb      	str	r3, [r7, #24]
}
 8007ddc:	bf00      	nop
 8007dde:	bf00      	nop
 8007de0:	e7fd      	b.n	8007dde <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007de2:	f002 f809 	bl	8009df8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dea:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d024      	beq.n	8007e3c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df4:	1e5a      	subs	r2, r3, #1
 8007df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d104      	bne.n	8007e0c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007e02:	f001 fb05 	bl	8009410 <pvTaskIncrementMutexHeldCount>
 8007e06:	4602      	mov	r2, r0
 8007e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e0a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00f      	beq.n	8007e34 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e16:	3310      	adds	r3, #16
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 ffa9 	bl	8008d70 <xTaskRemoveFromEventList>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d007      	beq.n	8007e34 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e24:	4b54      	ldr	r3, [pc, #336]	@ (8007f78 <xQueueSemaphoreTake+0x21c>)
 8007e26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e2a:	601a      	str	r2, [r3, #0]
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e34:	f002 f812 	bl	8009e5c <vPortExitCritical>
				return pdPASS;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e098      	b.n	8007f6e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d112      	bne.n	8007e68 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d00b      	beq.n	8007e60 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e4c:	f383 8811 	msr	BASEPRI, r3
 8007e50:	f3bf 8f6f 	isb	sy
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	617b      	str	r3, [r7, #20]
}
 8007e5a:	bf00      	nop
 8007e5c:	bf00      	nop
 8007e5e:	e7fd      	b.n	8007e5c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007e60:	f001 fffc 	bl	8009e5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e64:	2300      	movs	r3, #0
 8007e66:	e082      	b.n	8007f6e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d106      	bne.n	8007e7c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e6e:	f107 030c 	add.w	r3, r7, #12
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 ffe0 	bl	8008e38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e7c:	f001 ffee 	bl	8009e5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e80:	f000 fd36 	bl	80088f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e84:	f001 ffb8 	bl	8009df8 <vPortEnterCritical>
 8007e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e8a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e8e:	b25b      	sxtb	r3, r3
 8007e90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e94:	d103      	bne.n	8007e9e <xQueueSemaphoreTake+0x142>
 8007e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ea4:	b25b      	sxtb	r3, r3
 8007ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007eaa:	d103      	bne.n	8007eb4 <xQueueSemaphoreTake+0x158>
 8007eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007eb4:	f001 ffd2 	bl	8009e5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007eb8:	463a      	mov	r2, r7
 8007eba:	f107 030c 	add.w	r3, r7, #12
 8007ebe:	4611      	mov	r1, r2
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f000 ffcf 	bl	8008e64 <xTaskCheckForTimeOut>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d132      	bne.n	8007f32 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ecc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007ece:	f000 f9f5 	bl	80082bc <prvIsQueueEmpty>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d026      	beq.n	8007f26 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d109      	bne.n	8007ef4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007ee0:	f001 ff8a 	bl	8009df8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f001 f935 	bl	8009158 <xTaskPriorityInherit>
 8007eee:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007ef0:	f001 ffb4 	bl	8009e5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef6:	3324      	adds	r3, #36	@ 0x24
 8007ef8:	683a      	ldr	r2, [r7, #0]
 8007efa:	4611      	mov	r1, r2
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 fee5 	bl	8008ccc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f02:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f04:	f000 f988 	bl	8008218 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f08:	f000 fd00 	bl	800890c <xTaskResumeAll>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f47f af67 	bne.w	8007de2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007f14:	4b18      	ldr	r3, [pc, #96]	@ (8007f78 <xQueueSemaphoreTake+0x21c>)
 8007f16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f1a:	601a      	str	r2, [r3, #0]
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	e75d      	b.n	8007de2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007f26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f28:	f000 f976 	bl	8008218 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f2c:	f000 fcee 	bl	800890c <xTaskResumeAll>
 8007f30:	e757      	b.n	8007de2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007f32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f34:	f000 f970 	bl	8008218 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f38:	f000 fce8 	bl	800890c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f3e:	f000 f9bd 	bl	80082bc <prvIsQueueEmpty>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f43f af4c 	beq.w	8007de2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00d      	beq.n	8007f6c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007f50:	f001 ff52 	bl	8009df8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007f54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007f56:	f000 f8b7 	bl	80080c8 <prvGetDisinheritPriorityAfterTimeout>
 8007f5a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f62:	4618      	mov	r0, r3
 8007f64:	f001 f9d0 	bl	8009308 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007f68:	f001 ff78 	bl	8009e5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3738      	adds	r7, #56	@ 0x38
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	e000ed04 	.word	0xe000ed04

08007f7c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b08e      	sub	sp, #56	@ 0x38
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d10b      	bne.n	8007faa <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f96:	f383 8811 	msr	BASEPRI, r3
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	623b      	str	r3, [r7, #32]
}
 8007fa4:	bf00      	nop
 8007fa6:	bf00      	nop
 8007fa8:	e7fd      	b.n	8007fa6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d103      	bne.n	8007fb8 <xQueueReceiveFromISR+0x3c>
 8007fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d101      	bne.n	8007fbc <xQueueReceiveFromISR+0x40>
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e000      	b.n	8007fbe <xQueueReceiveFromISR+0x42>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10b      	bne.n	8007fda <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	61fb      	str	r3, [r7, #28]
}
 8007fd4:	bf00      	nop
 8007fd6:	bf00      	nop
 8007fd8:	e7fd      	b.n	8007fd6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fda:	f001 ffed 	bl	8009fb8 <vPortValidateInterruptPriority>
	__asm volatile
 8007fde:	f3ef 8211 	mrs	r2, BASEPRI
 8007fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe6:	f383 8811 	msr	BASEPRI, r3
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	61ba      	str	r2, [r7, #24]
 8007ff4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007ff6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ffe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008002:	2b00      	cmp	r3, #0
 8008004:	d02f      	beq.n	8008066 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008008:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800800c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008010:	68b9      	ldr	r1, [r7, #8]
 8008012:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008014:	f000 f8da 	bl	80081cc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800801a:	1e5a      	subs	r2, r3, #1
 800801c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008020:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008024:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008028:	d112      	bne.n	8008050 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800802a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d016      	beq.n	8008060 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008034:	3310      	adds	r3, #16
 8008036:	4618      	mov	r0, r3
 8008038:	f000 fe9a 	bl	8008d70 <xTaskRemoveFromEventList>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d00e      	beq.n	8008060 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00b      	beq.n	8008060 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	e007      	b.n	8008060 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008050:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008054:	3301      	adds	r3, #1
 8008056:	b2db      	uxtb	r3, r3
 8008058:	b25a      	sxtb	r2, r3
 800805a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800805c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008060:	2301      	movs	r3, #1
 8008062:	637b      	str	r3, [r7, #52]	@ 0x34
 8008064:	e001      	b.n	800806a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008066:	2300      	movs	r3, #0
 8008068:	637b      	str	r3, [r7, #52]	@ 0x34
 800806a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800806c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	f383 8811 	msr	BASEPRI, r3
}
 8008074:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008078:	4618      	mov	r0, r3
 800807a:	3738      	adds	r7, #56	@ 0x38
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10b      	bne.n	80080aa <vQueueDelete+0x2a>
	__asm volatile
 8008092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008096:	f383 8811 	msr	BASEPRI, r3
 800809a:	f3bf 8f6f 	isb	sy
 800809e:	f3bf 8f4f 	dsb	sy
 80080a2:	60bb      	str	r3, [r7, #8]
}
 80080a4:	bf00      	nop
 80080a6:	bf00      	nop
 80080a8:	e7fd      	b.n	80080a6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 f95e 	bl	800836c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d102      	bne.n	80080c0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f002 f88c 	bl	800a1d8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80080c0:	bf00      	nop
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d006      	beq.n	80080e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80080e2:	60fb      	str	r3, [r7, #12]
 80080e4:	e001      	b.n	80080ea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80080e6:	2300      	movs	r3, #0
 80080e8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80080ea:	68fb      	ldr	r3, [r7, #12]
	}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr

080080f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008104:	2300      	movs	r3, #0
 8008106:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800810c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10d      	bne.n	8008132 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d14d      	bne.n	80081ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	4618      	mov	r0, r3
 8008124:	f001 f880 	bl	8009228 <xTaskPriorityDisinherit>
 8008128:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	609a      	str	r2, [r3, #8]
 8008130:	e043      	b.n	80081ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d119      	bne.n	800816c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6858      	ldr	r0, [r3, #4]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008140:	461a      	mov	r2, r3
 8008142:	68b9      	ldr	r1, [r7, #8]
 8008144:	f002 ffc3 	bl	800b0ce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	685a      	ldr	r2, [r3, #4]
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008150:	441a      	add	r2, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	429a      	cmp	r2, r3
 8008160:	d32b      	bcc.n	80081ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	605a      	str	r2, [r3, #4]
 800816a:	e026      	b.n	80081ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	68d8      	ldr	r0, [r3, #12]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008174:	461a      	mov	r2, r3
 8008176:	68b9      	ldr	r1, [r7, #8]
 8008178:	f002 ffa9 	bl	800b0ce <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	68da      	ldr	r2, [r3, #12]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008184:	425b      	negs	r3, r3
 8008186:	441a      	add	r2, r3
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	68da      	ldr	r2, [r3, #12]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	429a      	cmp	r2, r3
 8008196:	d207      	bcs.n	80081a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	689a      	ldr	r2, [r3, #8]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081a0:	425b      	negs	r3, r3
 80081a2:	441a      	add	r2, r3
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d105      	bne.n	80081ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d002      	beq.n	80081ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	3b01      	subs	r3, #1
 80081b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	1c5a      	adds	r2, r3, #1
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80081c2:	697b      	ldr	r3, [r7, #20]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3718      	adds	r7, #24
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d018      	beq.n	8008210 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68da      	ldr	r2, [r3, #12]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e6:	441a      	add	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	68da      	ldr	r2, [r3, #12]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d303      	bcc.n	8008200 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	68d9      	ldr	r1, [r3, #12]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008208:	461a      	mov	r2, r3
 800820a:	6838      	ldr	r0, [r7, #0]
 800820c:	f002 ff5f 	bl	800b0ce <memcpy>
	}
}
 8008210:	bf00      	nop
 8008212:	3708      	adds	r7, #8
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008220:	f001 fdea 	bl	8009df8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800822a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800822c:	e011      	b.n	8008252 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008232:	2b00      	cmp	r3, #0
 8008234:	d012      	beq.n	800825c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	3324      	adds	r3, #36	@ 0x24
 800823a:	4618      	mov	r0, r3
 800823c:	f000 fd98 	bl	8008d70 <xTaskRemoveFromEventList>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d001      	beq.n	800824a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008246:	f000 fe71 	bl	8008f2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800824a:	7bfb      	ldrb	r3, [r7, #15]
 800824c:	3b01      	subs	r3, #1
 800824e:	b2db      	uxtb	r3, r3
 8008250:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008256:	2b00      	cmp	r3, #0
 8008258:	dce9      	bgt.n	800822e <prvUnlockQueue+0x16>
 800825a:	e000      	b.n	800825e <prvUnlockQueue+0x46>
					break;
 800825c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	22ff      	movs	r2, #255	@ 0xff
 8008262:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008266:	f001 fdf9 	bl	8009e5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800826a:	f001 fdc5 	bl	8009df8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008274:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008276:	e011      	b.n	800829c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d012      	beq.n	80082a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	3310      	adds	r3, #16
 8008284:	4618      	mov	r0, r3
 8008286:	f000 fd73 	bl	8008d70 <xTaskRemoveFromEventList>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d001      	beq.n	8008294 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008290:	f000 fe4c 	bl	8008f2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008294:	7bbb      	ldrb	r3, [r7, #14]
 8008296:	3b01      	subs	r3, #1
 8008298:	b2db      	uxtb	r3, r3
 800829a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800829c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	dce9      	bgt.n	8008278 <prvUnlockQueue+0x60>
 80082a4:	e000      	b.n	80082a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80082a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	22ff      	movs	r2, #255	@ 0xff
 80082ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80082b0:	f001 fdd4 	bl	8009e5c <vPortExitCritical>
}
 80082b4:	bf00      	nop
 80082b6:	3710      	adds	r7, #16
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082c4:	f001 fd98 	bl	8009df8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d102      	bne.n	80082d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80082d0:	2301      	movs	r3, #1
 80082d2:	60fb      	str	r3, [r7, #12]
 80082d4:	e001      	b.n	80082da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80082d6:	2300      	movs	r3, #0
 80082d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80082da:	f001 fdbf 	bl	8009e5c <vPortExitCritical>

	return xReturn;
 80082de:	68fb      	ldr	r3, [r7, #12]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082f0:	f001 fd82 	bl	8009df8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d102      	bne.n	8008306 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008300:	2301      	movs	r3, #1
 8008302:	60fb      	str	r3, [r7, #12]
 8008304:	e001      	b.n	800830a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008306:	2300      	movs	r3, #0
 8008308:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800830a:	f001 fda7 	bl	8009e5c <vPortExitCritical>

	return xReturn;
 800830e:	68fb      	ldr	r3, [r7, #12]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008322:	2300      	movs	r3, #0
 8008324:	60fb      	str	r3, [r7, #12]
 8008326:	e014      	b.n	8008352 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008328:	4a0f      	ldr	r2, [pc, #60]	@ (8008368 <vQueueAddToRegistry+0x50>)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10b      	bne.n	800834c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008334:	490c      	ldr	r1, [pc, #48]	@ (8008368 <vQueueAddToRegistry+0x50>)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	683a      	ldr	r2, [r7, #0]
 800833a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800833e:	4a0a      	ldr	r2, [pc, #40]	@ (8008368 <vQueueAddToRegistry+0x50>)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	00db      	lsls	r3, r3, #3
 8008344:	4413      	add	r3, r2
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800834a:	e006      	b.n	800835a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	3301      	adds	r3, #1
 8008350:	60fb      	str	r3, [r7, #12]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2b07      	cmp	r3, #7
 8008356:	d9e7      	bls.n	8008328 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008358:	bf00      	nop
 800835a:	bf00      	nop
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	20000b48 	.word	0x20000b48

0800836c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800836c:	b480      	push	{r7}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008374:	2300      	movs	r3, #0
 8008376:	60fb      	str	r3, [r7, #12]
 8008378:	e016      	b.n	80083a8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800837a:	4a10      	ldr	r2, [pc, #64]	@ (80083bc <vQueueUnregisterQueue+0x50>)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	00db      	lsls	r3, r3, #3
 8008380:	4413      	add	r3, r2
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	429a      	cmp	r2, r3
 8008388:	d10b      	bne.n	80083a2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800838a:	4a0c      	ldr	r2, [pc, #48]	@ (80083bc <vQueueUnregisterQueue+0x50>)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2100      	movs	r1, #0
 8008390:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008394:	4a09      	ldr	r2, [pc, #36]	@ (80083bc <vQueueUnregisterQueue+0x50>)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	00db      	lsls	r3, r3, #3
 800839a:	4413      	add	r3, r2
 800839c:	2200      	movs	r2, #0
 800839e:	605a      	str	r2, [r3, #4]
				break;
 80083a0:	e006      	b.n	80083b0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	3301      	adds	r3, #1
 80083a6:	60fb      	str	r3, [r7, #12]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	2b07      	cmp	r3, #7
 80083ac:	d9e5      	bls.n	800837a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80083ae:	bf00      	nop
 80083b0:	bf00      	nop
 80083b2:	3714      	adds	r7, #20
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr
 80083bc:	20000b48 	.word	0x20000b48

080083c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80083d0:	f001 fd12 	bl	8009df8 <vPortEnterCritical>
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083da:	b25b      	sxtb	r3, r3
 80083dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083e0:	d103      	bne.n	80083ea <vQueueWaitForMessageRestricted+0x2a>
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083f0:	b25b      	sxtb	r3, r3
 80083f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083f6:	d103      	bne.n	8008400 <vQueueWaitForMessageRestricted+0x40>
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008400:	f001 fd2c 	bl	8009e5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008408:	2b00      	cmp	r3, #0
 800840a:	d106      	bne.n	800841a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	3324      	adds	r3, #36	@ 0x24
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	68b9      	ldr	r1, [r7, #8]
 8008414:	4618      	mov	r0, r3
 8008416:	f000 fc7f 	bl	8008d18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800841a:	6978      	ldr	r0, [r7, #20]
 800841c:	f7ff fefc 	bl	8008218 <prvUnlockQueue>
	}
 8008420:	bf00      	nop
 8008422:	3718      	adds	r7, #24
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008428:	b580      	push	{r7, lr}
 800842a:	b08e      	sub	sp, #56	@ 0x38
 800842c:	af04      	add	r7, sp, #16
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
 8008434:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008438:	2b00      	cmp	r3, #0
 800843a:	d10b      	bne.n	8008454 <xTaskCreateStatic+0x2c>
	__asm volatile
 800843c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008440:	f383 8811 	msr	BASEPRI, r3
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	623b      	str	r3, [r7, #32]
}
 800844e:	bf00      	nop
 8008450:	bf00      	nop
 8008452:	e7fd      	b.n	8008450 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10b      	bne.n	8008472 <xTaskCreateStatic+0x4a>
	__asm volatile
 800845a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800845e:	f383 8811 	msr	BASEPRI, r3
 8008462:	f3bf 8f6f 	isb	sy
 8008466:	f3bf 8f4f 	dsb	sy
 800846a:	61fb      	str	r3, [r7, #28]
}
 800846c:	bf00      	nop
 800846e:	bf00      	nop
 8008470:	e7fd      	b.n	800846e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008472:	23a8      	movs	r3, #168	@ 0xa8
 8008474:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	2ba8      	cmp	r3, #168	@ 0xa8
 800847a:	d00b      	beq.n	8008494 <xTaskCreateStatic+0x6c>
	__asm volatile
 800847c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	61bb      	str	r3, [r7, #24]
}
 800848e:	bf00      	nop
 8008490:	bf00      	nop
 8008492:	e7fd      	b.n	8008490 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008494:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008498:	2b00      	cmp	r3, #0
 800849a:	d01e      	beq.n	80084da <xTaskCreateStatic+0xb2>
 800849c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d01b      	beq.n	80084da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80084aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ae:	2202      	movs	r2, #2
 80084b0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084b4:	2300      	movs	r3, #0
 80084b6:	9303      	str	r3, [sp, #12]
 80084b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ba:	9302      	str	r3, [sp, #8]
 80084bc:	f107 0314 	add.w	r3, r7, #20
 80084c0:	9301      	str	r3, [sp, #4]
 80084c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	68b9      	ldr	r1, [r7, #8]
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f000 f851 	bl	8008574 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80084d4:	f000 f8f6 	bl	80086c4 <prvAddNewTaskToReadyList>
 80084d8:	e001      	b.n	80084de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80084da:	2300      	movs	r3, #0
 80084dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80084de:	697b      	ldr	r3, [r7, #20]
	}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3728      	adds	r7, #40	@ 0x28
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b08c      	sub	sp, #48	@ 0x30
 80084ec:	af04      	add	r7, sp, #16
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	603b      	str	r3, [r7, #0]
 80084f4:	4613      	mov	r3, r2
 80084f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80084f8:	88fb      	ldrh	r3, [r7, #6]
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4618      	mov	r0, r3
 80084fe:	f001 fd9d 	bl	800a03c <pvPortMalloc>
 8008502:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00e      	beq.n	8008528 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800850a:	20a8      	movs	r0, #168	@ 0xa8
 800850c:	f001 fd96 	bl	800a03c <pvPortMalloc>
 8008510:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d003      	beq.n	8008520 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	631a      	str	r2, [r3, #48]	@ 0x30
 800851e:	e005      	b.n	800852c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008520:	6978      	ldr	r0, [r7, #20]
 8008522:	f001 fe59 	bl	800a1d8 <vPortFree>
 8008526:	e001      	b.n	800852c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008528:	2300      	movs	r3, #0
 800852a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d017      	beq.n	8008562 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800853a:	88fa      	ldrh	r2, [r7, #6]
 800853c:	2300      	movs	r3, #0
 800853e:	9303      	str	r3, [sp, #12]
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	9302      	str	r3, [sp, #8]
 8008544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008546:	9301      	str	r3, [sp, #4]
 8008548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	68b9      	ldr	r1, [r7, #8]
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f000 f80f 	bl	8008574 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008556:	69f8      	ldr	r0, [r7, #28]
 8008558:	f000 f8b4 	bl	80086c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800855c:	2301      	movs	r3, #1
 800855e:	61bb      	str	r3, [r7, #24]
 8008560:	e002      	b.n	8008568 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008562:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008566:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008568:	69bb      	ldr	r3, [r7, #24]
	}
 800856a:	4618      	mov	r0, r3
 800856c:	3720      	adds	r7, #32
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
	...

08008574 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b088      	sub	sp, #32
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
 8008580:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008584:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	461a      	mov	r2, r3
 800858c:	21a5      	movs	r1, #165	@ 0xa5
 800858e:	f002 fcc0 	bl	800af12 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008594:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800859c:	3b01      	subs	r3, #1
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	4413      	add	r3, r2
 80085a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	f023 0307 	bic.w	r3, r3, #7
 80085aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	f003 0307 	and.w	r3, r3, #7
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00b      	beq.n	80085ce <prvInitialiseNewTask+0x5a>
	__asm volatile
 80085b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	617b      	str	r3, [r7, #20]
}
 80085c8:	bf00      	nop
 80085ca:	bf00      	nop
 80085cc:	e7fd      	b.n	80085ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d01f      	beq.n	8008614 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085d4:	2300      	movs	r3, #0
 80085d6:	61fb      	str	r3, [r7, #28]
 80085d8:	e012      	b.n	8008600 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	4413      	add	r3, r2
 80085e0:	7819      	ldrb	r1, [r3, #0]
 80085e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	4413      	add	r3, r2
 80085e8:	3334      	adds	r3, #52	@ 0x34
 80085ea:	460a      	mov	r2, r1
 80085ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80085ee:	68ba      	ldr	r2, [r7, #8]
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	4413      	add	r3, r2
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d006      	beq.n	8008608 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	3301      	adds	r3, #1
 80085fe:	61fb      	str	r3, [r7, #28]
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	2b0f      	cmp	r3, #15
 8008604:	d9e9      	bls.n	80085da <prvInitialiseNewTask+0x66>
 8008606:	e000      	b.n	800860a <prvInitialiseNewTask+0x96>
			{
				break;
 8008608:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800860a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860c:	2200      	movs	r2, #0
 800860e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008612:	e003      	b.n	800861c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008616:	2200      	movs	r2, #0
 8008618:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800861c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800861e:	2b37      	cmp	r3, #55	@ 0x37
 8008620:	d901      	bls.n	8008626 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008622:	2337      	movs	r3, #55	@ 0x37
 8008624:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008628:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800862a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800862c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008630:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008634:	2200      	movs	r2, #0
 8008636:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863a:	3304      	adds	r3, #4
 800863c:	4618      	mov	r0, r3
 800863e:	f7fe fd7b 	bl	8007138 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008644:	3318      	adds	r3, #24
 8008646:	4618      	mov	r0, r3
 8008648:	f7fe fd76 	bl	8007138 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800864c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800864e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008650:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008654:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800865c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008660:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008664:	2200      	movs	r2, #0
 8008666:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800866a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800866c:	2200      	movs	r2, #0
 800866e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008674:	3354      	adds	r3, #84	@ 0x54
 8008676:	224c      	movs	r2, #76	@ 0x4c
 8008678:	2100      	movs	r1, #0
 800867a:	4618      	mov	r0, r3
 800867c:	f002 fc49 	bl	800af12 <memset>
 8008680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008682:	4a0d      	ldr	r2, [pc, #52]	@ (80086b8 <prvInitialiseNewTask+0x144>)
 8008684:	659a      	str	r2, [r3, #88]	@ 0x58
 8008686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008688:	4a0c      	ldr	r2, [pc, #48]	@ (80086bc <prvInitialiseNewTask+0x148>)
 800868a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800868c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868e:	4a0c      	ldr	r2, [pc, #48]	@ (80086c0 <prvInitialiseNewTask+0x14c>)
 8008690:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	68f9      	ldr	r1, [r7, #12]
 8008696:	69b8      	ldr	r0, [r7, #24]
 8008698:	f001 fa7c 	bl	8009b94 <pxPortInitialiseStack>
 800869c:	4602      	mov	r2, r0
 800869e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80086a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d002      	beq.n	80086ae <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086ae:	bf00      	nop
 80086b0:	3720      	adds	r7, #32
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	20001d94 	.word	0x20001d94
 80086bc:	20001dfc 	.word	0x20001dfc
 80086c0:	20001e64 	.word	0x20001e64

080086c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80086cc:	f001 fb94 	bl	8009df8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80086d0:	4b2d      	ldr	r3, [pc, #180]	@ (8008788 <prvAddNewTaskToReadyList+0xc4>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	3301      	adds	r3, #1
 80086d6:	4a2c      	ldr	r2, [pc, #176]	@ (8008788 <prvAddNewTaskToReadyList+0xc4>)
 80086d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80086da:	4b2c      	ldr	r3, [pc, #176]	@ (800878c <prvAddNewTaskToReadyList+0xc8>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d109      	bne.n	80086f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80086e2:	4a2a      	ldr	r2, [pc, #168]	@ (800878c <prvAddNewTaskToReadyList+0xc8>)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80086e8:	4b27      	ldr	r3, [pc, #156]	@ (8008788 <prvAddNewTaskToReadyList+0xc4>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d110      	bne.n	8008712 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80086f0:	f000 fc40 	bl	8008f74 <prvInitialiseTaskLists>
 80086f4:	e00d      	b.n	8008712 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80086f6:	4b26      	ldr	r3, [pc, #152]	@ (8008790 <prvAddNewTaskToReadyList+0xcc>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d109      	bne.n	8008712 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80086fe:	4b23      	ldr	r3, [pc, #140]	@ (800878c <prvAddNewTaskToReadyList+0xc8>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008708:	429a      	cmp	r2, r3
 800870a:	d802      	bhi.n	8008712 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800870c:	4a1f      	ldr	r2, [pc, #124]	@ (800878c <prvAddNewTaskToReadyList+0xc8>)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008712:	4b20      	ldr	r3, [pc, #128]	@ (8008794 <prvAddNewTaskToReadyList+0xd0>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	3301      	adds	r3, #1
 8008718:	4a1e      	ldr	r2, [pc, #120]	@ (8008794 <prvAddNewTaskToReadyList+0xd0>)
 800871a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800871c:	4b1d      	ldr	r3, [pc, #116]	@ (8008794 <prvAddNewTaskToReadyList+0xd0>)
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008728:	4b1b      	ldr	r3, [pc, #108]	@ (8008798 <prvAddNewTaskToReadyList+0xd4>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	429a      	cmp	r2, r3
 800872e:	d903      	bls.n	8008738 <prvAddNewTaskToReadyList+0x74>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008734:	4a18      	ldr	r2, [pc, #96]	@ (8008798 <prvAddNewTaskToReadyList+0xd4>)
 8008736:	6013      	str	r3, [r2, #0]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800873c:	4613      	mov	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	4413      	add	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4a15      	ldr	r2, [pc, #84]	@ (800879c <prvAddNewTaskToReadyList+0xd8>)
 8008746:	441a      	add	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	3304      	adds	r3, #4
 800874c:	4619      	mov	r1, r3
 800874e:	4610      	mov	r0, r2
 8008750:	f7fe fcff 	bl	8007152 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008754:	f001 fb82 	bl	8009e5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008758:	4b0d      	ldr	r3, [pc, #52]	@ (8008790 <prvAddNewTaskToReadyList+0xcc>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00e      	beq.n	800877e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008760:	4b0a      	ldr	r3, [pc, #40]	@ (800878c <prvAddNewTaskToReadyList+0xc8>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800876a:	429a      	cmp	r2, r3
 800876c:	d207      	bcs.n	800877e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800876e:	4b0c      	ldr	r3, [pc, #48]	@ (80087a0 <prvAddNewTaskToReadyList+0xdc>)
 8008770:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008774:	601a      	str	r2, [r3, #0]
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800877e:	bf00      	nop
 8008780:	3708      	adds	r7, #8
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	2000105c 	.word	0x2000105c
 800878c:	20000b88 	.word	0x20000b88
 8008790:	20001068 	.word	0x20001068
 8008794:	20001078 	.word	0x20001078
 8008798:	20001064 	.word	0x20001064
 800879c:	20000b8c 	.word	0x20000b8c
 80087a0:	e000ed04 	.word	0xe000ed04

080087a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80087ac:	2300      	movs	r3, #0
 80087ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d018      	beq.n	80087e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80087b6:	4b14      	ldr	r3, [pc, #80]	@ (8008808 <vTaskDelay+0x64>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00b      	beq.n	80087d6 <vTaskDelay+0x32>
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	60bb      	str	r3, [r7, #8]
}
 80087d0:	bf00      	nop
 80087d2:	bf00      	nop
 80087d4:	e7fd      	b.n	80087d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80087d6:	f000 f88b 	bl	80088f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80087da:	2100      	movs	r1, #0
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fe2b 	bl	8009438 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80087e2:	f000 f893 	bl	800890c <xTaskResumeAll>
 80087e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d107      	bne.n	80087fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80087ee:	4b07      	ldr	r3, [pc, #28]	@ (800880c <vTaskDelay+0x68>)
 80087f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087f4:	601a      	str	r2, [r3, #0]
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087fe:	bf00      	nop
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	20001084 	.word	0x20001084
 800880c:	e000ed04 	.word	0xe000ed04

08008810 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b08a      	sub	sp, #40	@ 0x28
 8008814:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008816:	2300      	movs	r3, #0
 8008818:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800881a:	2300      	movs	r3, #0
 800881c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800881e:	463a      	mov	r2, r7
 8008820:	1d39      	adds	r1, r7, #4
 8008822:	f107 0308 	add.w	r3, r7, #8
 8008826:	4618      	mov	r0, r3
 8008828:	f7fe fc32 	bl	8007090 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800882c:	6839      	ldr	r1, [r7, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	68ba      	ldr	r2, [r7, #8]
 8008832:	9202      	str	r2, [sp, #8]
 8008834:	9301      	str	r3, [sp, #4]
 8008836:	2300      	movs	r3, #0
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	2300      	movs	r3, #0
 800883c:	460a      	mov	r2, r1
 800883e:	4924      	ldr	r1, [pc, #144]	@ (80088d0 <vTaskStartScheduler+0xc0>)
 8008840:	4824      	ldr	r0, [pc, #144]	@ (80088d4 <vTaskStartScheduler+0xc4>)
 8008842:	f7ff fdf1 	bl	8008428 <xTaskCreateStatic>
 8008846:	4603      	mov	r3, r0
 8008848:	4a23      	ldr	r2, [pc, #140]	@ (80088d8 <vTaskStartScheduler+0xc8>)
 800884a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800884c:	4b22      	ldr	r3, [pc, #136]	@ (80088d8 <vTaskStartScheduler+0xc8>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d002      	beq.n	800885a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008854:	2301      	movs	r3, #1
 8008856:	617b      	str	r3, [r7, #20]
 8008858:	e001      	b.n	800885e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800885a:	2300      	movs	r3, #0
 800885c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d102      	bne.n	800886a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008864:	f000 fe3c 	bl	80094e0 <xTimerCreateTimerTask>
 8008868:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d11b      	bne.n	80088a8 <vTaskStartScheduler+0x98>
	__asm volatile
 8008870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008874:	f383 8811 	msr	BASEPRI, r3
 8008878:	f3bf 8f6f 	isb	sy
 800887c:	f3bf 8f4f 	dsb	sy
 8008880:	613b      	str	r3, [r7, #16]
}
 8008882:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008884:	4b15      	ldr	r3, [pc, #84]	@ (80088dc <vTaskStartScheduler+0xcc>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	3354      	adds	r3, #84	@ 0x54
 800888a:	4a15      	ldr	r2, [pc, #84]	@ (80088e0 <vTaskStartScheduler+0xd0>)
 800888c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800888e:	4b15      	ldr	r3, [pc, #84]	@ (80088e4 <vTaskStartScheduler+0xd4>)
 8008890:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008894:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008896:	4b14      	ldr	r3, [pc, #80]	@ (80088e8 <vTaskStartScheduler+0xd8>)
 8008898:	2201      	movs	r2, #1
 800889a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800889c:	4b13      	ldr	r3, [pc, #76]	@ (80088ec <vTaskStartScheduler+0xdc>)
 800889e:	2200      	movs	r2, #0
 80088a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088a2:	f001 fa05 	bl	8009cb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088a6:	e00f      	b.n	80088c8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088ae:	d10b      	bne.n	80088c8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80088b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088b4:	f383 8811 	msr	BASEPRI, r3
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	60fb      	str	r3, [r7, #12]
}
 80088c2:	bf00      	nop
 80088c4:	bf00      	nop
 80088c6:	e7fd      	b.n	80088c4 <vTaskStartScheduler+0xb4>
}
 80088c8:	bf00      	nop
 80088ca:	3718      	adds	r7, #24
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	0800d89c 	.word	0x0800d89c
 80088d4:	08008f45 	.word	0x08008f45
 80088d8:	20001080 	.word	0x20001080
 80088dc:	20000b88 	.word	0x20000b88
 80088e0:	2000001c 	.word	0x2000001c
 80088e4:	2000107c 	.word	0x2000107c
 80088e8:	20001068 	.word	0x20001068
 80088ec:	20001060 	.word	0x20001060

080088f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80088f0:	b480      	push	{r7}
 80088f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80088f4:	4b04      	ldr	r3, [pc, #16]	@ (8008908 <vTaskSuspendAll+0x18>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	3301      	adds	r3, #1
 80088fa:	4a03      	ldr	r2, [pc, #12]	@ (8008908 <vTaskSuspendAll+0x18>)
 80088fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80088fe:	bf00      	nop
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr
 8008908:	20001084 	.word	0x20001084

0800890c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008912:	2300      	movs	r3, #0
 8008914:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008916:	2300      	movs	r3, #0
 8008918:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800891a:	4b42      	ldr	r3, [pc, #264]	@ (8008a24 <xTaskResumeAll+0x118>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d10b      	bne.n	800893a <xTaskResumeAll+0x2e>
	__asm volatile
 8008922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008926:	f383 8811 	msr	BASEPRI, r3
 800892a:	f3bf 8f6f 	isb	sy
 800892e:	f3bf 8f4f 	dsb	sy
 8008932:	603b      	str	r3, [r7, #0]
}
 8008934:	bf00      	nop
 8008936:	bf00      	nop
 8008938:	e7fd      	b.n	8008936 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800893a:	f001 fa5d 	bl	8009df8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800893e:	4b39      	ldr	r3, [pc, #228]	@ (8008a24 <xTaskResumeAll+0x118>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	3b01      	subs	r3, #1
 8008944:	4a37      	ldr	r2, [pc, #220]	@ (8008a24 <xTaskResumeAll+0x118>)
 8008946:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008948:	4b36      	ldr	r3, [pc, #216]	@ (8008a24 <xTaskResumeAll+0x118>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d162      	bne.n	8008a16 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008950:	4b35      	ldr	r3, [pc, #212]	@ (8008a28 <xTaskResumeAll+0x11c>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d05e      	beq.n	8008a16 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008958:	e02f      	b.n	80089ba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800895a:	4b34      	ldr	r3, [pc, #208]	@ (8008a2c <xTaskResumeAll+0x120>)
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	3318      	adds	r3, #24
 8008966:	4618      	mov	r0, r3
 8008968:	f7fe fc50 	bl	800720c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	3304      	adds	r3, #4
 8008970:	4618      	mov	r0, r3
 8008972:	f7fe fc4b 	bl	800720c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800897a:	4b2d      	ldr	r3, [pc, #180]	@ (8008a30 <xTaskResumeAll+0x124>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	429a      	cmp	r2, r3
 8008980:	d903      	bls.n	800898a <xTaskResumeAll+0x7e>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008986:	4a2a      	ldr	r2, [pc, #168]	@ (8008a30 <xTaskResumeAll+0x124>)
 8008988:	6013      	str	r3, [r2, #0]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800898e:	4613      	mov	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4a27      	ldr	r2, [pc, #156]	@ (8008a34 <xTaskResumeAll+0x128>)
 8008998:	441a      	add	r2, r3
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	3304      	adds	r3, #4
 800899e:	4619      	mov	r1, r3
 80089a0:	4610      	mov	r0, r2
 80089a2:	f7fe fbd6 	bl	8007152 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089aa:	4b23      	ldr	r3, [pc, #140]	@ (8008a38 <xTaskResumeAll+0x12c>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d302      	bcc.n	80089ba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80089b4:	4b21      	ldr	r3, [pc, #132]	@ (8008a3c <xTaskResumeAll+0x130>)
 80089b6:	2201      	movs	r2, #1
 80089b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089ba:	4b1c      	ldr	r3, [pc, #112]	@ (8008a2c <xTaskResumeAll+0x120>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1cb      	bne.n	800895a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d001      	beq.n	80089cc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80089c8:	f000 fb78 	bl	80090bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80089cc:	4b1c      	ldr	r3, [pc, #112]	@ (8008a40 <xTaskResumeAll+0x134>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d010      	beq.n	80089fa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80089d8:	f000 f858 	bl	8008a8c <xTaskIncrementTick>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d002      	beq.n	80089e8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80089e2:	4b16      	ldr	r3, [pc, #88]	@ (8008a3c <xTaskResumeAll+0x130>)
 80089e4:	2201      	movs	r2, #1
 80089e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	3b01      	subs	r3, #1
 80089ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d1f1      	bne.n	80089d8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80089f4:	4b12      	ldr	r3, [pc, #72]	@ (8008a40 <xTaskResumeAll+0x134>)
 80089f6:	2200      	movs	r2, #0
 80089f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80089fa:	4b10      	ldr	r3, [pc, #64]	@ (8008a3c <xTaskResumeAll+0x130>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d009      	beq.n	8008a16 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a02:	2301      	movs	r3, #1
 8008a04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a06:	4b0f      	ldr	r3, [pc, #60]	@ (8008a44 <xTaskResumeAll+0x138>)
 8008a08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a0c:	601a      	str	r2, [r3, #0]
 8008a0e:	f3bf 8f4f 	dsb	sy
 8008a12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a16:	f001 fa21 	bl	8009e5c <vPortExitCritical>

	return xAlreadyYielded;
 8008a1a:	68bb      	ldr	r3, [r7, #8]
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	20001084 	.word	0x20001084
 8008a28:	2000105c 	.word	0x2000105c
 8008a2c:	2000101c 	.word	0x2000101c
 8008a30:	20001064 	.word	0x20001064
 8008a34:	20000b8c 	.word	0x20000b8c
 8008a38:	20000b88 	.word	0x20000b88
 8008a3c:	20001070 	.word	0x20001070
 8008a40:	2000106c 	.word	0x2000106c
 8008a44:	e000ed04 	.word	0xe000ed04

08008a48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a4e:	4b05      	ldr	r3, [pc, #20]	@ (8008a64 <xTaskGetTickCount+0x1c>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a54:	687b      	ldr	r3, [r7, #4]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	370c      	adds	r7, #12
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	20001060 	.word	0x20001060

08008a68 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a6e:	f001 faa3 	bl	8009fb8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008a72:	2300      	movs	r3, #0
 8008a74:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008a76:	4b04      	ldr	r3, [pc, #16]	@ (8008a88 <xTaskGetTickCountFromISR+0x20>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a7c:	683b      	ldr	r3, [r7, #0]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	20001060 	.word	0x20001060

08008a8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b086      	sub	sp, #24
 8008a90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008a92:	2300      	movs	r3, #0
 8008a94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a96:	4b4f      	ldr	r3, [pc, #316]	@ (8008bd4 <xTaskIncrementTick+0x148>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f040 8090 	bne.w	8008bc0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008aa0:	4b4d      	ldr	r3, [pc, #308]	@ (8008bd8 <xTaskIncrementTick+0x14c>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008aa8:	4a4b      	ldr	r2, [pc, #300]	@ (8008bd8 <xTaskIncrementTick+0x14c>)
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d121      	bne.n	8008af8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ab4:	4b49      	ldr	r3, [pc, #292]	@ (8008bdc <xTaskIncrementTick+0x150>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00b      	beq.n	8008ad6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac2:	f383 8811 	msr	BASEPRI, r3
 8008ac6:	f3bf 8f6f 	isb	sy
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	603b      	str	r3, [r7, #0]
}
 8008ad0:	bf00      	nop
 8008ad2:	bf00      	nop
 8008ad4:	e7fd      	b.n	8008ad2 <xTaskIncrementTick+0x46>
 8008ad6:	4b41      	ldr	r3, [pc, #260]	@ (8008bdc <xTaskIncrementTick+0x150>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	60fb      	str	r3, [r7, #12]
 8008adc:	4b40      	ldr	r3, [pc, #256]	@ (8008be0 <xTaskIncrementTick+0x154>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a3e      	ldr	r2, [pc, #248]	@ (8008bdc <xTaskIncrementTick+0x150>)
 8008ae2:	6013      	str	r3, [r2, #0]
 8008ae4:	4a3e      	ldr	r2, [pc, #248]	@ (8008be0 <xTaskIncrementTick+0x154>)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6013      	str	r3, [r2, #0]
 8008aea:	4b3e      	ldr	r3, [pc, #248]	@ (8008be4 <xTaskIncrementTick+0x158>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3301      	adds	r3, #1
 8008af0:	4a3c      	ldr	r2, [pc, #240]	@ (8008be4 <xTaskIncrementTick+0x158>)
 8008af2:	6013      	str	r3, [r2, #0]
 8008af4:	f000 fae2 	bl	80090bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008af8:	4b3b      	ldr	r3, [pc, #236]	@ (8008be8 <xTaskIncrementTick+0x15c>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d349      	bcc.n	8008b96 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b02:	4b36      	ldr	r3, [pc, #216]	@ (8008bdc <xTaskIncrementTick+0x150>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d104      	bne.n	8008b16 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b0c:	4b36      	ldr	r3, [pc, #216]	@ (8008be8 <xTaskIncrementTick+0x15c>)
 8008b0e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b12:	601a      	str	r2, [r3, #0]
					break;
 8008b14:	e03f      	b.n	8008b96 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b16:	4b31      	ldr	r3, [pc, #196]	@ (8008bdc <xTaskIncrementTick+0x150>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b26:	693a      	ldr	r2, [r7, #16]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d203      	bcs.n	8008b36 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b2e:	4a2e      	ldr	r2, [pc, #184]	@ (8008be8 <xTaskIncrementTick+0x15c>)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b34:	e02f      	b.n	8008b96 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	3304      	adds	r3, #4
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fe fb66 	bl	800720c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d004      	beq.n	8008b52 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	3318      	adds	r3, #24
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7fe fb5d 	bl	800720c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b56:	4b25      	ldr	r3, [pc, #148]	@ (8008bec <xTaskIncrementTick+0x160>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d903      	bls.n	8008b66 <xTaskIncrementTick+0xda>
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b62:	4a22      	ldr	r2, [pc, #136]	@ (8008bec <xTaskIncrementTick+0x160>)
 8008b64:	6013      	str	r3, [r2, #0]
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b6a:	4613      	mov	r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	4413      	add	r3, r2
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	4a1f      	ldr	r2, [pc, #124]	@ (8008bf0 <xTaskIncrementTick+0x164>)
 8008b74:	441a      	add	r2, r3
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	3304      	adds	r3, #4
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	4610      	mov	r0, r2
 8008b7e:	f7fe fae8 	bl	8007152 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b86:	4b1b      	ldr	r3, [pc, #108]	@ (8008bf4 <xTaskIncrementTick+0x168>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d3b8      	bcc.n	8008b02 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008b90:	2301      	movs	r3, #1
 8008b92:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b94:	e7b5      	b.n	8008b02 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008b96:	4b17      	ldr	r3, [pc, #92]	@ (8008bf4 <xTaskIncrementTick+0x168>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b9c:	4914      	ldr	r1, [pc, #80]	@ (8008bf0 <xTaskIncrementTick+0x164>)
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	4413      	add	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	440b      	add	r3, r1
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d901      	bls.n	8008bb2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008bae:	2301      	movs	r3, #1
 8008bb0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008bb2:	4b11      	ldr	r3, [pc, #68]	@ (8008bf8 <xTaskIncrementTick+0x16c>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d007      	beq.n	8008bca <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	617b      	str	r3, [r7, #20]
 8008bbe:	e004      	b.n	8008bca <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8008bfc <xTaskIncrementTick+0x170>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	4a0d      	ldr	r2, [pc, #52]	@ (8008bfc <xTaskIncrementTick+0x170>)
 8008bc8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008bca:	697b      	ldr	r3, [r7, #20]
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3718      	adds	r7, #24
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	20001084 	.word	0x20001084
 8008bd8:	20001060 	.word	0x20001060
 8008bdc:	20001014 	.word	0x20001014
 8008be0:	20001018 	.word	0x20001018
 8008be4:	20001074 	.word	0x20001074
 8008be8:	2000107c 	.word	0x2000107c
 8008bec:	20001064 	.word	0x20001064
 8008bf0:	20000b8c 	.word	0x20000b8c
 8008bf4:	20000b88 	.word	0x20000b88
 8008bf8:	20001070 	.word	0x20001070
 8008bfc:	2000106c 	.word	0x2000106c

08008c00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c06:	4b2b      	ldr	r3, [pc, #172]	@ (8008cb4 <vTaskSwitchContext+0xb4>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d003      	beq.n	8008c16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c0e:	4b2a      	ldr	r3, [pc, #168]	@ (8008cb8 <vTaskSwitchContext+0xb8>)
 8008c10:	2201      	movs	r2, #1
 8008c12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c14:	e047      	b.n	8008ca6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008c16:	4b28      	ldr	r3, [pc, #160]	@ (8008cb8 <vTaskSwitchContext+0xb8>)
 8008c18:	2200      	movs	r2, #0
 8008c1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c1c:	4b27      	ldr	r3, [pc, #156]	@ (8008cbc <vTaskSwitchContext+0xbc>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	60fb      	str	r3, [r7, #12]
 8008c22:	e011      	b.n	8008c48 <vTaskSwitchContext+0x48>
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d10b      	bne.n	8008c42 <vTaskSwitchContext+0x42>
	__asm volatile
 8008c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c2e:	f383 8811 	msr	BASEPRI, r3
 8008c32:	f3bf 8f6f 	isb	sy
 8008c36:	f3bf 8f4f 	dsb	sy
 8008c3a:	607b      	str	r3, [r7, #4]
}
 8008c3c:	bf00      	nop
 8008c3e:	bf00      	nop
 8008c40:	e7fd      	b.n	8008c3e <vTaskSwitchContext+0x3e>
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	3b01      	subs	r3, #1
 8008c46:	60fb      	str	r3, [r7, #12]
 8008c48:	491d      	ldr	r1, [pc, #116]	@ (8008cc0 <vTaskSwitchContext+0xc0>)
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	4613      	mov	r3, r2
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	4413      	add	r3, r2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	440b      	add	r3, r1
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d0e3      	beq.n	8008c24 <vTaskSwitchContext+0x24>
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	4613      	mov	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4413      	add	r3, r2
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	4a16      	ldr	r2, [pc, #88]	@ (8008cc0 <vTaskSwitchContext+0xc0>)
 8008c68:	4413      	add	r3, r2
 8008c6a:	60bb      	str	r3, [r7, #8]
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	605a      	str	r2, [r3, #4]
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	685a      	ldr	r2, [r3, #4]
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	3308      	adds	r3, #8
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d104      	bne.n	8008c8c <vTaskSwitchContext+0x8c>
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	685a      	ldr	r2, [r3, #4]
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	605a      	str	r2, [r3, #4]
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	4a0c      	ldr	r2, [pc, #48]	@ (8008cc4 <vTaskSwitchContext+0xc4>)
 8008c94:	6013      	str	r3, [r2, #0]
 8008c96:	4a09      	ldr	r2, [pc, #36]	@ (8008cbc <vTaskSwitchContext+0xbc>)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008c9c:	4b09      	ldr	r3, [pc, #36]	@ (8008cc4 <vTaskSwitchContext+0xc4>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	3354      	adds	r3, #84	@ 0x54
 8008ca2:	4a09      	ldr	r2, [pc, #36]	@ (8008cc8 <vTaskSwitchContext+0xc8>)
 8008ca4:	6013      	str	r3, [r2, #0]
}
 8008ca6:	bf00      	nop
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	20001084 	.word	0x20001084
 8008cb8:	20001070 	.word	0x20001070
 8008cbc:	20001064 	.word	0x20001064
 8008cc0:	20000b8c 	.word	0x20000b8c
 8008cc4:	20000b88 	.word	0x20000b88
 8008cc8:	2000001c 	.word	0x2000001c

08008ccc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10b      	bne.n	8008cf4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce0:	f383 8811 	msr	BASEPRI, r3
 8008ce4:	f3bf 8f6f 	isb	sy
 8008ce8:	f3bf 8f4f 	dsb	sy
 8008cec:	60fb      	str	r3, [r7, #12]
}
 8008cee:	bf00      	nop
 8008cf0:	bf00      	nop
 8008cf2:	e7fd      	b.n	8008cf0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008cf4:	4b07      	ldr	r3, [pc, #28]	@ (8008d14 <vTaskPlaceOnEventList+0x48>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	3318      	adds	r3, #24
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f7fe fa4c 	bl	800719a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d02:	2101      	movs	r1, #1
 8008d04:	6838      	ldr	r0, [r7, #0]
 8008d06:	f000 fb97 	bl	8009438 <prvAddCurrentTaskToDelayedList>
}
 8008d0a:	bf00      	nop
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	20000b88 	.word	0x20000b88

08008d18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b086      	sub	sp, #24
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d10b      	bne.n	8008d42 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d2e:	f383 8811 	msr	BASEPRI, r3
 8008d32:	f3bf 8f6f 	isb	sy
 8008d36:	f3bf 8f4f 	dsb	sy
 8008d3a:	617b      	str	r3, [r7, #20]
}
 8008d3c:	bf00      	nop
 8008d3e:	bf00      	nop
 8008d40:	e7fd      	b.n	8008d3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d42:	4b0a      	ldr	r3, [pc, #40]	@ (8008d6c <vTaskPlaceOnEventListRestricted+0x54>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3318      	adds	r3, #24
 8008d48:	4619      	mov	r1, r3
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f7fe fa01 	bl	8007152 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d002      	beq.n	8008d5c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008d56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008d5a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008d5c:	6879      	ldr	r1, [r7, #4]
 8008d5e:	68b8      	ldr	r0, [r7, #8]
 8008d60:	f000 fb6a 	bl	8009438 <prvAddCurrentTaskToDelayedList>
	}
 8008d64:	bf00      	nop
 8008d66:	3718      	adds	r7, #24
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	20000b88 	.word	0x20000b88

08008d70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b086      	sub	sp, #24
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10b      	bne.n	8008d9e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d8a:	f383 8811 	msr	BASEPRI, r3
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	f3bf 8f4f 	dsb	sy
 8008d96:	60fb      	str	r3, [r7, #12]
}
 8008d98:	bf00      	nop
 8008d9a:	bf00      	nop
 8008d9c:	e7fd      	b.n	8008d9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	3318      	adds	r3, #24
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7fe fa32 	bl	800720c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008da8:	4b1d      	ldr	r3, [pc, #116]	@ (8008e20 <xTaskRemoveFromEventList+0xb0>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d11d      	bne.n	8008dec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	3304      	adds	r3, #4
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7fe fa29 	bl	800720c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dbe:	4b19      	ldr	r3, [pc, #100]	@ (8008e24 <xTaskRemoveFromEventList+0xb4>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d903      	bls.n	8008dce <xTaskRemoveFromEventList+0x5e>
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dca:	4a16      	ldr	r2, [pc, #88]	@ (8008e24 <xTaskRemoveFromEventList+0xb4>)
 8008dcc:	6013      	str	r3, [r2, #0]
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	4413      	add	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4a13      	ldr	r2, [pc, #76]	@ (8008e28 <xTaskRemoveFromEventList+0xb8>)
 8008ddc:	441a      	add	r2, r3
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	3304      	adds	r3, #4
 8008de2:	4619      	mov	r1, r3
 8008de4:	4610      	mov	r0, r2
 8008de6:	f7fe f9b4 	bl	8007152 <vListInsertEnd>
 8008dea:	e005      	b.n	8008df8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	3318      	adds	r3, #24
 8008df0:	4619      	mov	r1, r3
 8008df2:	480e      	ldr	r0, [pc, #56]	@ (8008e2c <xTaskRemoveFromEventList+0xbc>)
 8008df4:	f7fe f9ad 	bl	8007152 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8008e30 <xTaskRemoveFromEventList+0xc0>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d905      	bls.n	8008e12 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e06:	2301      	movs	r3, #1
 8008e08:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8008e34 <xTaskRemoveFromEventList+0xc4>)
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	601a      	str	r2, [r3, #0]
 8008e10:	e001      	b.n	8008e16 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008e12:	2300      	movs	r3, #0
 8008e14:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e16:	697b      	ldr	r3, [r7, #20]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3718      	adds	r7, #24
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	20001084 	.word	0x20001084
 8008e24:	20001064 	.word	0x20001064
 8008e28:	20000b8c 	.word	0x20000b8c
 8008e2c:	2000101c 	.word	0x2000101c
 8008e30:	20000b88 	.word	0x20000b88
 8008e34:	20001070 	.word	0x20001070

08008e38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e40:	4b06      	ldr	r3, [pc, #24]	@ (8008e5c <vTaskInternalSetTimeOutState+0x24>)
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e48:	4b05      	ldr	r3, [pc, #20]	@ (8008e60 <vTaskInternalSetTimeOutState+0x28>)
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	605a      	str	r2, [r3, #4]
}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr
 8008e5c:	20001074 	.word	0x20001074
 8008e60:	20001060 	.word	0x20001060

08008e64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b088      	sub	sp, #32
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10b      	bne.n	8008e8c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e78:	f383 8811 	msr	BASEPRI, r3
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	613b      	str	r3, [r7, #16]
}
 8008e86:	bf00      	nop
 8008e88:	bf00      	nop
 8008e8a:	e7fd      	b.n	8008e88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d10b      	bne.n	8008eaa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e96:	f383 8811 	msr	BASEPRI, r3
 8008e9a:	f3bf 8f6f 	isb	sy
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	60fb      	str	r3, [r7, #12]
}
 8008ea4:	bf00      	nop
 8008ea6:	bf00      	nop
 8008ea8:	e7fd      	b.n	8008ea6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008eaa:	f000 ffa5 	bl	8009df8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008eae:	4b1d      	ldr	r3, [pc, #116]	@ (8008f24 <xTaskCheckForTimeOut+0xc0>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	69ba      	ldr	r2, [r7, #24]
 8008eba:	1ad3      	subs	r3, r2, r3
 8008ebc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ec6:	d102      	bne.n	8008ece <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	61fb      	str	r3, [r7, #28]
 8008ecc:	e023      	b.n	8008f16 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	4b15      	ldr	r3, [pc, #84]	@ (8008f28 <xTaskCheckForTimeOut+0xc4>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d007      	beq.n	8008eea <xTaskCheckForTimeOut+0x86>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	69ba      	ldr	r2, [r7, #24]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d302      	bcc.n	8008eea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	61fb      	str	r3, [r7, #28]
 8008ee8:	e015      	b.n	8008f16 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d20b      	bcs.n	8008f0c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	1ad2      	subs	r2, r2, r3
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f7ff ff99 	bl	8008e38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f06:	2300      	movs	r3, #0
 8008f08:	61fb      	str	r3, [r7, #28]
 8008f0a:	e004      	b.n	8008f16 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f12:	2301      	movs	r3, #1
 8008f14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f16:	f000 ffa1 	bl	8009e5c <vPortExitCritical>

	return xReturn;
 8008f1a:	69fb      	ldr	r3, [r7, #28]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3720      	adds	r7, #32
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	20001060 	.word	0x20001060
 8008f28:	20001074 	.word	0x20001074

08008f2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f30:	4b03      	ldr	r3, [pc, #12]	@ (8008f40 <vTaskMissedYield+0x14>)
 8008f32:	2201      	movs	r2, #1
 8008f34:	601a      	str	r2, [r3, #0]
}
 8008f36:	bf00      	nop
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	20001070 	.word	0x20001070

08008f44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f4c:	f000 f852 	bl	8008ff4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f50:	4b06      	ldr	r3, [pc, #24]	@ (8008f6c <prvIdleTask+0x28>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d9f9      	bls.n	8008f4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008f58:	4b05      	ldr	r3, [pc, #20]	@ (8008f70 <prvIdleTask+0x2c>)
 8008f5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f5e:	601a      	str	r2, [r3, #0]
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008f68:	e7f0      	b.n	8008f4c <prvIdleTask+0x8>
 8008f6a:	bf00      	nop
 8008f6c:	20000b8c 	.word	0x20000b8c
 8008f70:	e000ed04 	.word	0xe000ed04

08008f74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	607b      	str	r3, [r7, #4]
 8008f7e:	e00c      	b.n	8008f9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	4613      	mov	r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	4413      	add	r3, r2
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4a12      	ldr	r2, [pc, #72]	@ (8008fd4 <prvInitialiseTaskLists+0x60>)
 8008f8c:	4413      	add	r3, r2
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fe f8b2 	bl	80070f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	3301      	adds	r3, #1
 8008f98:	607b      	str	r3, [r7, #4]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2b37      	cmp	r3, #55	@ 0x37
 8008f9e:	d9ef      	bls.n	8008f80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008fa0:	480d      	ldr	r0, [pc, #52]	@ (8008fd8 <prvInitialiseTaskLists+0x64>)
 8008fa2:	f7fe f8a9 	bl	80070f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008fa6:	480d      	ldr	r0, [pc, #52]	@ (8008fdc <prvInitialiseTaskLists+0x68>)
 8008fa8:	f7fe f8a6 	bl	80070f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008fac:	480c      	ldr	r0, [pc, #48]	@ (8008fe0 <prvInitialiseTaskLists+0x6c>)
 8008fae:	f7fe f8a3 	bl	80070f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008fb2:	480c      	ldr	r0, [pc, #48]	@ (8008fe4 <prvInitialiseTaskLists+0x70>)
 8008fb4:	f7fe f8a0 	bl	80070f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008fb8:	480b      	ldr	r0, [pc, #44]	@ (8008fe8 <prvInitialiseTaskLists+0x74>)
 8008fba:	f7fe f89d 	bl	80070f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8008fec <prvInitialiseTaskLists+0x78>)
 8008fc0:	4a05      	ldr	r2, [pc, #20]	@ (8008fd8 <prvInitialiseTaskLists+0x64>)
 8008fc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8008ff0 <prvInitialiseTaskLists+0x7c>)
 8008fc6:	4a05      	ldr	r2, [pc, #20]	@ (8008fdc <prvInitialiseTaskLists+0x68>)
 8008fc8:	601a      	str	r2, [r3, #0]
}
 8008fca:	bf00      	nop
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	20000b8c 	.word	0x20000b8c
 8008fd8:	20000fec 	.word	0x20000fec
 8008fdc:	20001000 	.word	0x20001000
 8008fe0:	2000101c 	.word	0x2000101c
 8008fe4:	20001030 	.word	0x20001030
 8008fe8:	20001048 	.word	0x20001048
 8008fec:	20001014 	.word	0x20001014
 8008ff0:	20001018 	.word	0x20001018

08008ff4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ffa:	e019      	b.n	8009030 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ffc:	f000 fefc 	bl	8009df8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009000:	4b10      	ldr	r3, [pc, #64]	@ (8009044 <prvCheckTasksWaitingTermination+0x50>)
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	3304      	adds	r3, #4
 800900c:	4618      	mov	r0, r3
 800900e:	f7fe f8fd 	bl	800720c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009012:	4b0d      	ldr	r3, [pc, #52]	@ (8009048 <prvCheckTasksWaitingTermination+0x54>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	3b01      	subs	r3, #1
 8009018:	4a0b      	ldr	r2, [pc, #44]	@ (8009048 <prvCheckTasksWaitingTermination+0x54>)
 800901a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800901c:	4b0b      	ldr	r3, [pc, #44]	@ (800904c <prvCheckTasksWaitingTermination+0x58>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3b01      	subs	r3, #1
 8009022:	4a0a      	ldr	r2, [pc, #40]	@ (800904c <prvCheckTasksWaitingTermination+0x58>)
 8009024:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009026:	f000 ff19 	bl	8009e5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f810 	bl	8009050 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009030:	4b06      	ldr	r3, [pc, #24]	@ (800904c <prvCheckTasksWaitingTermination+0x58>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1e1      	bne.n	8008ffc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009038:	bf00      	nop
 800903a:	bf00      	nop
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	20001030 	.word	0x20001030
 8009048:	2000105c 	.word	0x2000105c
 800904c:	20001044 	.word	0x20001044

08009050 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	3354      	adds	r3, #84	@ 0x54
 800905c:	4618      	mov	r0, r3
 800905e:	f001 ff75 	bl	800af4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009068:	2b00      	cmp	r3, #0
 800906a:	d108      	bne.n	800907e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009070:	4618      	mov	r0, r3
 8009072:	f001 f8b1 	bl	800a1d8 <vPortFree>
				vPortFree( pxTCB );
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f001 f8ae 	bl	800a1d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800907c:	e019      	b.n	80090b2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009084:	2b01      	cmp	r3, #1
 8009086:	d103      	bne.n	8009090 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f001 f8a5 	bl	800a1d8 <vPortFree>
	}
 800908e:	e010      	b.n	80090b2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009096:	2b02      	cmp	r3, #2
 8009098:	d00b      	beq.n	80090b2 <prvDeleteTCB+0x62>
	__asm volatile
 800909a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800909e:	f383 8811 	msr	BASEPRI, r3
 80090a2:	f3bf 8f6f 	isb	sy
 80090a6:	f3bf 8f4f 	dsb	sy
 80090aa:	60fb      	str	r3, [r7, #12]
}
 80090ac:	bf00      	nop
 80090ae:	bf00      	nop
 80090b0:	e7fd      	b.n	80090ae <prvDeleteTCB+0x5e>
	}
 80090b2:	bf00      	nop
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
	...

080090bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090c2:	4b0c      	ldr	r3, [pc, #48]	@ (80090f4 <prvResetNextTaskUnblockTime+0x38>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d104      	bne.n	80090d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80090cc:	4b0a      	ldr	r3, [pc, #40]	@ (80090f8 <prvResetNextTaskUnblockTime+0x3c>)
 80090ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80090d4:	e008      	b.n	80090e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090d6:	4b07      	ldr	r3, [pc, #28]	@ (80090f4 <prvResetNextTaskUnblockTime+0x38>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	4a04      	ldr	r2, [pc, #16]	@ (80090f8 <prvResetNextTaskUnblockTime+0x3c>)
 80090e6:	6013      	str	r3, [r2, #0]
}
 80090e8:	bf00      	nop
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr
 80090f4:	20001014 	.word	0x20001014
 80090f8:	2000107c 	.word	0x2000107c

080090fc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009102:	4b05      	ldr	r3, [pc, #20]	@ (8009118 <xTaskGetCurrentTaskHandle+0x1c>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009108:	687b      	ldr	r3, [r7, #4]
	}
 800910a:	4618      	mov	r0, r3
 800910c:	370c      	adds	r7, #12
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	20000b88 	.word	0x20000b88

0800911c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800911c:	b480      	push	{r7}
 800911e:	b083      	sub	sp, #12
 8009120:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009122:	4b0b      	ldr	r3, [pc, #44]	@ (8009150 <xTaskGetSchedulerState+0x34>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d102      	bne.n	8009130 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800912a:	2301      	movs	r3, #1
 800912c:	607b      	str	r3, [r7, #4]
 800912e:	e008      	b.n	8009142 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009130:	4b08      	ldr	r3, [pc, #32]	@ (8009154 <xTaskGetSchedulerState+0x38>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d102      	bne.n	800913e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009138:	2302      	movs	r3, #2
 800913a:	607b      	str	r3, [r7, #4]
 800913c:	e001      	b.n	8009142 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800913e:	2300      	movs	r3, #0
 8009140:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009142:	687b      	ldr	r3, [r7, #4]
	}
 8009144:	4618      	mov	r0, r3
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr
 8009150:	20001068 	.word	0x20001068
 8009154:	20001084 	.word	0x20001084

08009158 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009164:	2300      	movs	r3, #0
 8009166:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d051      	beq.n	8009212 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009172:	4b2a      	ldr	r3, [pc, #168]	@ (800921c <xTaskPriorityInherit+0xc4>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009178:	429a      	cmp	r2, r3
 800917a:	d241      	bcs.n	8009200 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	699b      	ldr	r3, [r3, #24]
 8009180:	2b00      	cmp	r3, #0
 8009182:	db06      	blt.n	8009192 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009184:	4b25      	ldr	r3, [pc, #148]	@ (800921c <xTaskPriorityInherit+0xc4>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800918a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	6959      	ldr	r1, [r3, #20]
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800919a:	4613      	mov	r3, r2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	4413      	add	r3, r2
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	4a1f      	ldr	r2, [pc, #124]	@ (8009220 <xTaskPriorityInherit+0xc8>)
 80091a4:	4413      	add	r3, r2
 80091a6:	4299      	cmp	r1, r3
 80091a8:	d122      	bne.n	80091f0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	3304      	adds	r3, #4
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7fe f82c 	bl	800720c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80091b4:	4b19      	ldr	r3, [pc, #100]	@ (800921c <xTaskPriorityInherit+0xc4>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091c2:	4b18      	ldr	r3, [pc, #96]	@ (8009224 <xTaskPriorityInherit+0xcc>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d903      	bls.n	80091d2 <xTaskPriorityInherit+0x7a>
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ce:	4a15      	ldr	r2, [pc, #84]	@ (8009224 <xTaskPriorityInherit+0xcc>)
 80091d0:	6013      	str	r3, [r2, #0]
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091d6:	4613      	mov	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4413      	add	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4a10      	ldr	r2, [pc, #64]	@ (8009220 <xTaskPriorityInherit+0xc8>)
 80091e0:	441a      	add	r2, r3
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	3304      	adds	r3, #4
 80091e6:	4619      	mov	r1, r3
 80091e8:	4610      	mov	r0, r2
 80091ea:	f7fd ffb2 	bl	8007152 <vListInsertEnd>
 80091ee:	e004      	b.n	80091fa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80091f0:	4b0a      	ldr	r3, [pc, #40]	@ (800921c <xTaskPriorityInherit+0xc4>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80091fa:	2301      	movs	r3, #1
 80091fc:	60fb      	str	r3, [r7, #12]
 80091fe:	e008      	b.n	8009212 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009204:	4b05      	ldr	r3, [pc, #20]	@ (800921c <xTaskPriorityInherit+0xc4>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800920a:	429a      	cmp	r2, r3
 800920c:	d201      	bcs.n	8009212 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800920e:	2301      	movs	r3, #1
 8009210:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009212:	68fb      	ldr	r3, [r7, #12]
	}
 8009214:	4618      	mov	r0, r3
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	20000b88 	.word	0x20000b88
 8009220:	20000b8c 	.word	0x20000b8c
 8009224:	20001064 	.word	0x20001064

08009228 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009228:	b580      	push	{r7, lr}
 800922a:	b086      	sub	sp, #24
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009234:	2300      	movs	r3, #0
 8009236:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d058      	beq.n	80092f0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800923e:	4b2f      	ldr	r3, [pc, #188]	@ (80092fc <xTaskPriorityDisinherit+0xd4>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	693a      	ldr	r2, [r7, #16]
 8009244:	429a      	cmp	r2, r3
 8009246:	d00b      	beq.n	8009260 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800924c:	f383 8811 	msr	BASEPRI, r3
 8009250:	f3bf 8f6f 	isb	sy
 8009254:	f3bf 8f4f 	dsb	sy
 8009258:	60fb      	str	r3, [r7, #12]
}
 800925a:	bf00      	nop
 800925c:	bf00      	nop
 800925e:	e7fd      	b.n	800925c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009264:	2b00      	cmp	r3, #0
 8009266:	d10b      	bne.n	8009280 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800926c:	f383 8811 	msr	BASEPRI, r3
 8009270:	f3bf 8f6f 	isb	sy
 8009274:	f3bf 8f4f 	dsb	sy
 8009278:	60bb      	str	r3, [r7, #8]
}
 800927a:	bf00      	nop
 800927c:	bf00      	nop
 800927e:	e7fd      	b.n	800927c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009284:	1e5a      	subs	r2, r3, #1
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009292:	429a      	cmp	r2, r3
 8009294:	d02c      	beq.n	80092f0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800929a:	2b00      	cmp	r3, #0
 800929c:	d128      	bne.n	80092f0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	3304      	adds	r3, #4
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7fd ffb2 	bl	800720c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092c0:	4b0f      	ldr	r3, [pc, #60]	@ (8009300 <xTaskPriorityDisinherit+0xd8>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d903      	bls.n	80092d0 <xTaskPriorityDisinherit+0xa8>
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092cc:	4a0c      	ldr	r2, [pc, #48]	@ (8009300 <xTaskPriorityDisinherit+0xd8>)
 80092ce:	6013      	str	r3, [r2, #0]
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092d4:	4613      	mov	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	4413      	add	r3, r2
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	4a09      	ldr	r2, [pc, #36]	@ (8009304 <xTaskPriorityDisinherit+0xdc>)
 80092de:	441a      	add	r2, r3
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	3304      	adds	r3, #4
 80092e4:	4619      	mov	r1, r3
 80092e6:	4610      	mov	r0, r2
 80092e8:	f7fd ff33 	bl	8007152 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80092ec:	2301      	movs	r3, #1
 80092ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80092f0:	697b      	ldr	r3, [r7, #20]
	}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3718      	adds	r7, #24
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	20000b88 	.word	0x20000b88
 8009300:	20001064 	.word	0x20001064
 8009304:	20000b8c 	.word	0x20000b8c

08009308 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009308:	b580      	push	{r7, lr}
 800930a:	b088      	sub	sp, #32
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009316:	2301      	movs	r3, #1
 8009318:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d06c      	beq.n	80093fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009320:	69bb      	ldr	r3, [r7, #24]
 8009322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10b      	bne.n	8009340 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	60fb      	str	r3, [r7, #12]
}
 800933a:	bf00      	nop
 800933c:	bf00      	nop
 800933e:	e7fd      	b.n	800933c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009344:	683a      	ldr	r2, [r7, #0]
 8009346:	429a      	cmp	r2, r3
 8009348:	d902      	bls.n	8009350 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	61fb      	str	r3, [r7, #28]
 800934e:	e002      	b.n	8009356 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009354:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800935a:	69fa      	ldr	r2, [r7, #28]
 800935c:	429a      	cmp	r2, r3
 800935e:	d04c      	beq.n	80093fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009364:	697a      	ldr	r2, [r7, #20]
 8009366:	429a      	cmp	r2, r3
 8009368:	d147      	bne.n	80093fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800936a:	4b26      	ldr	r3, [pc, #152]	@ (8009404 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	69ba      	ldr	r2, [r7, #24]
 8009370:	429a      	cmp	r2, r3
 8009372:	d10b      	bne.n	800938c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009378:	f383 8811 	msr	BASEPRI, r3
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	f3bf 8f4f 	dsb	sy
 8009384:	60bb      	str	r3, [r7, #8]
}
 8009386:	bf00      	nop
 8009388:	bf00      	nop
 800938a:	e7fd      	b.n	8009388 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009390:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	69fa      	ldr	r2, [r7, #28]
 8009396:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	699b      	ldr	r3, [r3, #24]
 800939c:	2b00      	cmp	r3, #0
 800939e:	db04      	blt.n	80093aa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	6959      	ldr	r1, [r3, #20]
 80093ae:	693a      	ldr	r2, [r7, #16]
 80093b0:	4613      	mov	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	4413      	add	r3, r2
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	4a13      	ldr	r2, [pc, #76]	@ (8009408 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80093ba:	4413      	add	r3, r2
 80093bc:	4299      	cmp	r1, r3
 80093be:	d11c      	bne.n	80093fa <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	3304      	adds	r3, #4
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7fd ff21 	bl	800720c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093ce:	4b0f      	ldr	r3, [pc, #60]	@ (800940c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d903      	bls.n	80093de <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093da:	4a0c      	ldr	r2, [pc, #48]	@ (800940c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80093dc:	6013      	str	r3, [r2, #0]
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093e2:	4613      	mov	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	4a07      	ldr	r2, [pc, #28]	@ (8009408 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80093ec:	441a      	add	r2, r3
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	3304      	adds	r3, #4
 80093f2:	4619      	mov	r1, r3
 80093f4:	4610      	mov	r0, r2
 80093f6:	f7fd feac 	bl	8007152 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093fa:	bf00      	nop
 80093fc:	3720      	adds	r7, #32
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	20000b88 	.word	0x20000b88
 8009408:	20000b8c 	.word	0x20000b8c
 800940c:	20001064 	.word	0x20001064

08009410 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009410:	b480      	push	{r7}
 8009412:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009414:	4b07      	ldr	r3, [pc, #28]	@ (8009434 <pvTaskIncrementMutexHeldCount+0x24>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d004      	beq.n	8009426 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800941c:	4b05      	ldr	r3, [pc, #20]	@ (8009434 <pvTaskIncrementMutexHeldCount+0x24>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009422:	3201      	adds	r2, #1
 8009424:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8009426:	4b03      	ldr	r3, [pc, #12]	@ (8009434 <pvTaskIncrementMutexHeldCount+0x24>)
 8009428:	681b      	ldr	r3, [r3, #0]
	}
 800942a:	4618      	mov	r0, r3
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr
 8009434:	20000b88 	.word	0x20000b88

08009438 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009442:	4b21      	ldr	r3, [pc, #132]	@ (80094c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009448:	4b20      	ldr	r3, [pc, #128]	@ (80094cc <prvAddCurrentTaskToDelayedList+0x94>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	3304      	adds	r3, #4
 800944e:	4618      	mov	r0, r3
 8009450:	f7fd fedc 	bl	800720c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800945a:	d10a      	bne.n	8009472 <prvAddCurrentTaskToDelayedList+0x3a>
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d007      	beq.n	8009472 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009462:	4b1a      	ldr	r3, [pc, #104]	@ (80094cc <prvAddCurrentTaskToDelayedList+0x94>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	3304      	adds	r3, #4
 8009468:	4619      	mov	r1, r3
 800946a:	4819      	ldr	r0, [pc, #100]	@ (80094d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800946c:	f7fd fe71 	bl	8007152 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009470:	e026      	b.n	80094c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4413      	add	r3, r2
 8009478:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800947a:	4b14      	ldr	r3, [pc, #80]	@ (80094cc <prvAddCurrentTaskToDelayedList+0x94>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	68ba      	ldr	r2, [r7, #8]
 8009480:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009482:	68ba      	ldr	r2, [r7, #8]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	429a      	cmp	r2, r3
 8009488:	d209      	bcs.n	800949e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800948a:	4b12      	ldr	r3, [pc, #72]	@ (80094d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	4b0f      	ldr	r3, [pc, #60]	@ (80094cc <prvAddCurrentTaskToDelayedList+0x94>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3304      	adds	r3, #4
 8009494:	4619      	mov	r1, r3
 8009496:	4610      	mov	r0, r2
 8009498:	f7fd fe7f 	bl	800719a <vListInsert>
}
 800949c:	e010      	b.n	80094c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800949e:	4b0e      	ldr	r3, [pc, #56]	@ (80094d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	4b0a      	ldr	r3, [pc, #40]	@ (80094cc <prvAddCurrentTaskToDelayedList+0x94>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	3304      	adds	r3, #4
 80094a8:	4619      	mov	r1, r3
 80094aa:	4610      	mov	r0, r2
 80094ac:	f7fd fe75 	bl	800719a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80094b0:	4b0a      	ldr	r3, [pc, #40]	@ (80094dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	68ba      	ldr	r2, [r7, #8]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d202      	bcs.n	80094c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80094ba:	4a08      	ldr	r2, [pc, #32]	@ (80094dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	6013      	str	r3, [r2, #0]
}
 80094c0:	bf00      	nop
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	20001060 	.word	0x20001060
 80094cc:	20000b88 	.word	0x20000b88
 80094d0:	20001048 	.word	0x20001048
 80094d4:	20001018 	.word	0x20001018
 80094d8:	20001014 	.word	0x20001014
 80094dc:	2000107c 	.word	0x2000107c

080094e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b08a      	sub	sp, #40	@ 0x28
 80094e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80094e6:	2300      	movs	r3, #0
 80094e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80094ea:	f000 fb13 	bl	8009b14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80094ee:	4b1d      	ldr	r3, [pc, #116]	@ (8009564 <xTimerCreateTimerTask+0x84>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d021      	beq.n	800953a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80094f6:	2300      	movs	r3, #0
 80094f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80094fa:	2300      	movs	r3, #0
 80094fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80094fe:	1d3a      	adds	r2, r7, #4
 8009500:	f107 0108 	add.w	r1, r7, #8
 8009504:	f107 030c 	add.w	r3, r7, #12
 8009508:	4618      	mov	r0, r3
 800950a:	f7fd fddb 	bl	80070c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800950e:	6879      	ldr	r1, [r7, #4]
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	9202      	str	r2, [sp, #8]
 8009516:	9301      	str	r3, [sp, #4]
 8009518:	2302      	movs	r3, #2
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	2300      	movs	r3, #0
 800951e:	460a      	mov	r2, r1
 8009520:	4911      	ldr	r1, [pc, #68]	@ (8009568 <xTimerCreateTimerTask+0x88>)
 8009522:	4812      	ldr	r0, [pc, #72]	@ (800956c <xTimerCreateTimerTask+0x8c>)
 8009524:	f7fe ff80 	bl	8008428 <xTaskCreateStatic>
 8009528:	4603      	mov	r3, r0
 800952a:	4a11      	ldr	r2, [pc, #68]	@ (8009570 <xTimerCreateTimerTask+0x90>)
 800952c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800952e:	4b10      	ldr	r3, [pc, #64]	@ (8009570 <xTimerCreateTimerTask+0x90>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d001      	beq.n	800953a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009536:	2301      	movs	r3, #1
 8009538:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d10b      	bne.n	8009558 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	613b      	str	r3, [r7, #16]
}
 8009552:	bf00      	nop
 8009554:	bf00      	nop
 8009556:	e7fd      	b.n	8009554 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009558:	697b      	ldr	r3, [r7, #20]
}
 800955a:	4618      	mov	r0, r3
 800955c:	3718      	adds	r7, #24
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	200010b8 	.word	0x200010b8
 8009568:	0800d8a4 	.word	0x0800d8a4
 800956c:	080096ad 	.word	0x080096ad
 8009570:	200010bc 	.word	0x200010bc

08009574 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b08a      	sub	sp, #40	@ 0x28
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	607a      	str	r2, [r7, #4]
 8009580:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009582:	2300      	movs	r3, #0
 8009584:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d10b      	bne.n	80095a4 <xTimerGenericCommand+0x30>
	__asm volatile
 800958c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009590:	f383 8811 	msr	BASEPRI, r3
 8009594:	f3bf 8f6f 	isb	sy
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	623b      	str	r3, [r7, #32]
}
 800959e:	bf00      	nop
 80095a0:	bf00      	nop
 80095a2:	e7fd      	b.n	80095a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80095a4:	4b19      	ldr	r3, [pc, #100]	@ (800960c <xTimerGenericCommand+0x98>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d02a      	beq.n	8009602 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	2b05      	cmp	r3, #5
 80095bc:	dc18      	bgt.n	80095f0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80095be:	f7ff fdad 	bl	800911c <xTaskGetSchedulerState>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d109      	bne.n	80095dc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80095c8:	4b10      	ldr	r3, [pc, #64]	@ (800960c <xTimerGenericCommand+0x98>)
 80095ca:	6818      	ldr	r0, [r3, #0]
 80095cc:	f107 0110 	add.w	r1, r7, #16
 80095d0:	2300      	movs	r3, #0
 80095d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095d4:	f7fe f8b0 	bl	8007738 <xQueueGenericSend>
 80095d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80095da:	e012      	b.n	8009602 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80095dc:	4b0b      	ldr	r3, [pc, #44]	@ (800960c <xTimerGenericCommand+0x98>)
 80095de:	6818      	ldr	r0, [r3, #0]
 80095e0:	f107 0110 	add.w	r1, r7, #16
 80095e4:	2300      	movs	r3, #0
 80095e6:	2200      	movs	r2, #0
 80095e8:	f7fe f8a6 	bl	8007738 <xQueueGenericSend>
 80095ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80095ee:	e008      	b.n	8009602 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80095f0:	4b06      	ldr	r3, [pc, #24]	@ (800960c <xTimerGenericCommand+0x98>)
 80095f2:	6818      	ldr	r0, [r3, #0]
 80095f4:	f107 0110 	add.w	r1, r7, #16
 80095f8:	2300      	movs	r3, #0
 80095fa:	683a      	ldr	r2, [r7, #0]
 80095fc:	f7fe f99e 	bl	800793c <xQueueGenericSendFromISR>
 8009600:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009604:	4618      	mov	r0, r3
 8009606:	3728      	adds	r7, #40	@ 0x28
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	200010b8 	.word	0x200010b8

08009610 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b088      	sub	sp, #32
 8009614:	af02      	add	r7, sp, #8
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800961a:	4b23      	ldr	r3, [pc, #140]	@ (80096a8 <prvProcessExpiredTimer+0x98>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	3304      	adds	r3, #4
 8009628:	4618      	mov	r0, r3
 800962a:	f7fd fdef 	bl	800720c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009634:	f003 0304 	and.w	r3, r3, #4
 8009638:	2b00      	cmp	r3, #0
 800963a:	d023      	beq.n	8009684 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	699a      	ldr	r2, [r3, #24]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	18d1      	adds	r1, r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	683a      	ldr	r2, [r7, #0]
 8009648:	6978      	ldr	r0, [r7, #20]
 800964a:	f000 f8d5 	bl	80097f8 <prvInsertTimerInActiveList>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d020      	beq.n	8009696 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009654:	2300      	movs	r3, #0
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	2300      	movs	r3, #0
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	2100      	movs	r1, #0
 800965e:	6978      	ldr	r0, [r7, #20]
 8009660:	f7ff ff88 	bl	8009574 <xTimerGenericCommand>
 8009664:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d114      	bne.n	8009696 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800966c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009670:	f383 8811 	msr	BASEPRI, r3
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	f3bf 8f4f 	dsb	sy
 800967c:	60fb      	str	r3, [r7, #12]
}
 800967e:	bf00      	nop
 8009680:	bf00      	nop
 8009682:	e7fd      	b.n	8009680 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800968a:	f023 0301 	bic.w	r3, r3, #1
 800968e:	b2da      	uxtb	r2, r3
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	6a1b      	ldr	r3, [r3, #32]
 800969a:	6978      	ldr	r0, [r7, #20]
 800969c:	4798      	blx	r3
}
 800969e:	bf00      	nop
 80096a0:	3718      	adds	r7, #24
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	200010b0 	.word	0x200010b0

080096ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096b4:	f107 0308 	add.w	r3, r7, #8
 80096b8:	4618      	mov	r0, r3
 80096ba:	f000 f859 	bl	8009770 <prvGetNextExpireTime>
 80096be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	4619      	mov	r1, r3
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f000 f805 	bl	80096d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80096ca:	f000 f8d7 	bl	800987c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096ce:	bf00      	nop
 80096d0:	e7f0      	b.n	80096b4 <prvTimerTask+0x8>
	...

080096d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80096de:	f7ff f907 	bl	80088f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096e2:	f107 0308 	add.w	r3, r7, #8
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 f866 	bl	80097b8 <prvSampleTimeNow>
 80096ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d130      	bne.n	8009756 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d10a      	bne.n	8009710 <prvProcessTimerOrBlockTask+0x3c>
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d806      	bhi.n	8009710 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009702:	f7ff f903 	bl	800890c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009706:	68f9      	ldr	r1, [r7, #12]
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f7ff ff81 	bl	8009610 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800970e:	e024      	b.n	800975a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d008      	beq.n	8009728 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009716:	4b13      	ldr	r3, [pc, #76]	@ (8009764 <prvProcessTimerOrBlockTask+0x90>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d101      	bne.n	8009724 <prvProcessTimerOrBlockTask+0x50>
 8009720:	2301      	movs	r3, #1
 8009722:	e000      	b.n	8009726 <prvProcessTimerOrBlockTask+0x52>
 8009724:	2300      	movs	r3, #0
 8009726:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009728:	4b0f      	ldr	r3, [pc, #60]	@ (8009768 <prvProcessTimerOrBlockTask+0x94>)
 800972a:	6818      	ldr	r0, [r3, #0]
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	1ad3      	subs	r3, r2, r3
 8009732:	683a      	ldr	r2, [r7, #0]
 8009734:	4619      	mov	r1, r3
 8009736:	f7fe fe43 	bl	80083c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800973a:	f7ff f8e7 	bl	800890c <xTaskResumeAll>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d10a      	bne.n	800975a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009744:	4b09      	ldr	r3, [pc, #36]	@ (800976c <prvProcessTimerOrBlockTask+0x98>)
 8009746:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800974a:	601a      	str	r2, [r3, #0]
 800974c:	f3bf 8f4f 	dsb	sy
 8009750:	f3bf 8f6f 	isb	sy
}
 8009754:	e001      	b.n	800975a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009756:	f7ff f8d9 	bl	800890c <xTaskResumeAll>
}
 800975a:	bf00      	nop
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	200010b4 	.word	0x200010b4
 8009768:	200010b8 	.word	0x200010b8
 800976c:	e000ed04 	.word	0xe000ed04

08009770 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009770:	b480      	push	{r7}
 8009772:	b085      	sub	sp, #20
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009778:	4b0e      	ldr	r3, [pc, #56]	@ (80097b4 <prvGetNextExpireTime+0x44>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d101      	bne.n	8009786 <prvGetNextExpireTime+0x16>
 8009782:	2201      	movs	r2, #1
 8009784:	e000      	b.n	8009788 <prvGetNextExpireTime+0x18>
 8009786:	2200      	movs	r2, #0
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d105      	bne.n	80097a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009794:	4b07      	ldr	r3, [pc, #28]	@ (80097b4 <prvGetNextExpireTime+0x44>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	60fb      	str	r3, [r7, #12]
 800979e:	e001      	b.n	80097a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80097a0:	2300      	movs	r3, #0
 80097a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80097a4:	68fb      	ldr	r3, [r7, #12]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3714      	adds	r7, #20
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop
 80097b4:	200010b0 	.word	0x200010b0

080097b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80097c0:	f7ff f942 	bl	8008a48 <xTaskGetTickCount>
 80097c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80097c6:	4b0b      	ldr	r3, [pc, #44]	@ (80097f4 <prvSampleTimeNow+0x3c>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d205      	bcs.n	80097dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80097d0:	f000 f93a 	bl	8009a48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	601a      	str	r2, [r3, #0]
 80097da:	e002      	b.n	80097e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2200      	movs	r2, #0
 80097e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80097e2:	4a04      	ldr	r2, [pc, #16]	@ (80097f4 <prvSampleTimeNow+0x3c>)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80097e8:	68fb      	ldr	r3, [r7, #12]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	200010c0 	.word	0x200010c0

080097f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b086      	sub	sp, #24
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	607a      	str	r2, [r7, #4]
 8009804:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009806:	2300      	movs	r3, #0
 8009808:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	68ba      	ldr	r2, [r7, #8]
 800980e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009816:	68ba      	ldr	r2, [r7, #8]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	429a      	cmp	r2, r3
 800981c:	d812      	bhi.n	8009844 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	1ad2      	subs	r2, r2, r3
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	699b      	ldr	r3, [r3, #24]
 8009828:	429a      	cmp	r2, r3
 800982a:	d302      	bcc.n	8009832 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800982c:	2301      	movs	r3, #1
 800982e:	617b      	str	r3, [r7, #20]
 8009830:	e01b      	b.n	800986a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009832:	4b10      	ldr	r3, [pc, #64]	@ (8009874 <prvInsertTimerInActiveList+0x7c>)
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	3304      	adds	r3, #4
 800983a:	4619      	mov	r1, r3
 800983c:	4610      	mov	r0, r2
 800983e:	f7fd fcac 	bl	800719a <vListInsert>
 8009842:	e012      	b.n	800986a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	429a      	cmp	r2, r3
 800984a:	d206      	bcs.n	800985a <prvInsertTimerInActiveList+0x62>
 800984c:	68ba      	ldr	r2, [r7, #8]
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	429a      	cmp	r2, r3
 8009852:	d302      	bcc.n	800985a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009854:	2301      	movs	r3, #1
 8009856:	617b      	str	r3, [r7, #20]
 8009858:	e007      	b.n	800986a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800985a:	4b07      	ldr	r3, [pc, #28]	@ (8009878 <prvInsertTimerInActiveList+0x80>)
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	3304      	adds	r3, #4
 8009862:	4619      	mov	r1, r3
 8009864:	4610      	mov	r0, r2
 8009866:	f7fd fc98 	bl	800719a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800986a:	697b      	ldr	r3, [r7, #20]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3718      	adds	r7, #24
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	200010b4 	.word	0x200010b4
 8009878:	200010b0 	.word	0x200010b0

0800987c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b08e      	sub	sp, #56	@ 0x38
 8009880:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009882:	e0ce      	b.n	8009a22 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2b00      	cmp	r3, #0
 8009888:	da19      	bge.n	80098be <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800988a:	1d3b      	adds	r3, r7, #4
 800988c:	3304      	adds	r3, #4
 800988e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009892:	2b00      	cmp	r3, #0
 8009894:	d10b      	bne.n	80098ae <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800989a:	f383 8811 	msr	BASEPRI, r3
 800989e:	f3bf 8f6f 	isb	sy
 80098a2:	f3bf 8f4f 	dsb	sy
 80098a6:	61fb      	str	r3, [r7, #28]
}
 80098a8:	bf00      	nop
 80098aa:	bf00      	nop
 80098ac:	e7fd      	b.n	80098aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80098ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098b4:	6850      	ldr	r0, [r2, #4]
 80098b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098b8:	6892      	ldr	r2, [r2, #8]
 80098ba:	4611      	mov	r1, r2
 80098bc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f2c0 80ae 	blt.w	8009a22 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80098ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098cc:	695b      	ldr	r3, [r3, #20]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d004      	beq.n	80098dc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d4:	3304      	adds	r3, #4
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7fd fc98 	bl	800720c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098dc:	463b      	mov	r3, r7
 80098de:	4618      	mov	r0, r3
 80098e0:	f7ff ff6a 	bl	80097b8 <prvSampleTimeNow>
 80098e4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2b09      	cmp	r3, #9
 80098ea:	f200 8097 	bhi.w	8009a1c <prvProcessReceivedCommands+0x1a0>
 80098ee:	a201      	add	r2, pc, #4	@ (adr r2, 80098f4 <prvProcessReceivedCommands+0x78>)
 80098f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f4:	0800991d 	.word	0x0800991d
 80098f8:	0800991d 	.word	0x0800991d
 80098fc:	0800991d 	.word	0x0800991d
 8009900:	08009993 	.word	0x08009993
 8009904:	080099a7 	.word	0x080099a7
 8009908:	080099f3 	.word	0x080099f3
 800990c:	0800991d 	.word	0x0800991d
 8009910:	0800991d 	.word	0x0800991d
 8009914:	08009993 	.word	0x08009993
 8009918:	080099a7 	.word	0x080099a7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800991c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800991e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009922:	f043 0301 	orr.w	r3, r3, #1
 8009926:	b2da      	uxtb	r2, r3
 8009928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800992a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800992e:	68ba      	ldr	r2, [r7, #8]
 8009930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	18d1      	adds	r1, r2, r3
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800993a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800993c:	f7ff ff5c 	bl	80097f8 <prvInsertTimerInActiveList>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d06c      	beq.n	8009a20 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009948:	6a1b      	ldr	r3, [r3, #32]
 800994a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800994c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800994e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009950:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009954:	f003 0304 	and.w	r3, r3, #4
 8009958:	2b00      	cmp	r3, #0
 800995a:	d061      	beq.n	8009a20 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800995c:	68ba      	ldr	r2, [r7, #8]
 800995e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009960:	699b      	ldr	r3, [r3, #24]
 8009962:	441a      	add	r2, r3
 8009964:	2300      	movs	r3, #0
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	2300      	movs	r3, #0
 800996a:	2100      	movs	r1, #0
 800996c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800996e:	f7ff fe01 	bl	8009574 <xTimerGenericCommand>
 8009972:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009974:	6a3b      	ldr	r3, [r7, #32]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d152      	bne.n	8009a20 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800997a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800997e:	f383 8811 	msr	BASEPRI, r3
 8009982:	f3bf 8f6f 	isb	sy
 8009986:	f3bf 8f4f 	dsb	sy
 800998a:	61bb      	str	r3, [r7, #24]
}
 800998c:	bf00      	nop
 800998e:	bf00      	nop
 8009990:	e7fd      	b.n	800998e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009994:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009998:	f023 0301 	bic.w	r3, r3, #1
 800999c:	b2da      	uxtb	r2, r3
 800999e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80099a4:	e03d      	b.n	8009a22 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80099a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099ac:	f043 0301 	orr.w	r3, r3, #1
 80099b0:	b2da      	uxtb	r2, r3
 80099b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099bc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80099be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c0:	699b      	ldr	r3, [r3, #24]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10b      	bne.n	80099de <prvProcessReceivedCommands+0x162>
	__asm volatile
 80099c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ca:	f383 8811 	msr	BASEPRI, r3
 80099ce:	f3bf 8f6f 	isb	sy
 80099d2:	f3bf 8f4f 	dsb	sy
 80099d6:	617b      	str	r3, [r7, #20]
}
 80099d8:	bf00      	nop
 80099da:	bf00      	nop
 80099dc:	e7fd      	b.n	80099da <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80099de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e0:	699a      	ldr	r2, [r3, #24]
 80099e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e4:	18d1      	adds	r1, r2, r3
 80099e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099ec:	f7ff ff04 	bl	80097f8 <prvInsertTimerInActiveList>
					break;
 80099f0:	e017      	b.n	8009a22 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80099f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099f8:	f003 0302 	and.w	r3, r3, #2
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d103      	bne.n	8009a08 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009a00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a02:	f000 fbe9 	bl	800a1d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a06:	e00c      	b.n	8009a22 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a0e:	f023 0301 	bic.w	r3, r3, #1
 8009a12:	b2da      	uxtb	r2, r3
 8009a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009a1a:	e002      	b.n	8009a22 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009a1c:	bf00      	nop
 8009a1e:	e000      	b.n	8009a22 <prvProcessReceivedCommands+0x1a6>
					break;
 8009a20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a22:	4b08      	ldr	r3, [pc, #32]	@ (8009a44 <prvProcessReceivedCommands+0x1c8>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	1d39      	adds	r1, r7, #4
 8009a28:	2200      	movs	r2, #0
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fe f8b4 	bl	8007b98 <xQueueReceive>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f47f af26 	bne.w	8009884 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009a38:	bf00      	nop
 8009a3a:	bf00      	nop
 8009a3c:	3730      	adds	r7, #48	@ 0x30
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	200010b8 	.word	0x200010b8

08009a48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b088      	sub	sp, #32
 8009a4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a4e:	e049      	b.n	8009ae4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a50:	4b2e      	ldr	r3, [pc, #184]	@ (8009b0c <prvSwitchTimerLists+0xc4>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a5a:	4b2c      	ldr	r3, [pc, #176]	@ (8009b0c <prvSwitchTimerLists+0xc4>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	68db      	ldr	r3, [r3, #12]
 8009a62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	3304      	adds	r3, #4
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f7fd fbcf 	bl	800720c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	6a1b      	ldr	r3, [r3, #32]
 8009a72:	68f8      	ldr	r0, [r7, #12]
 8009a74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009a7c:	f003 0304 	and.w	r3, r3, #4
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d02f      	beq.n	8009ae4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	693a      	ldr	r2, [r7, #16]
 8009a8a:	4413      	add	r3, r2
 8009a8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009a8e:	68ba      	ldr	r2, [r7, #8]
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d90e      	bls.n	8009ab4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	68ba      	ldr	r2, [r7, #8]
 8009a9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8009b0c <prvSwitchTimerLists+0xc4>)
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	3304      	adds	r3, #4
 8009aaa:	4619      	mov	r1, r3
 8009aac:	4610      	mov	r0, r2
 8009aae:	f7fd fb74 	bl	800719a <vListInsert>
 8009ab2:	e017      	b.n	8009ae4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	9300      	str	r3, [sp, #0]
 8009ab8:	2300      	movs	r3, #0
 8009aba:	693a      	ldr	r2, [r7, #16]
 8009abc:	2100      	movs	r1, #0
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f7ff fd58 	bl	8009574 <xTimerGenericCommand>
 8009ac4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d10b      	bne.n	8009ae4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad0:	f383 8811 	msr	BASEPRI, r3
 8009ad4:	f3bf 8f6f 	isb	sy
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	603b      	str	r3, [r7, #0]
}
 8009ade:	bf00      	nop
 8009ae0:	bf00      	nop
 8009ae2:	e7fd      	b.n	8009ae0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009ae4:	4b09      	ldr	r3, [pc, #36]	@ (8009b0c <prvSwitchTimerLists+0xc4>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1b0      	bne.n	8009a50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009aee:	4b07      	ldr	r3, [pc, #28]	@ (8009b0c <prvSwitchTimerLists+0xc4>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009af4:	4b06      	ldr	r3, [pc, #24]	@ (8009b10 <prvSwitchTimerLists+0xc8>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a04      	ldr	r2, [pc, #16]	@ (8009b0c <prvSwitchTimerLists+0xc4>)
 8009afa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009afc:	4a04      	ldr	r2, [pc, #16]	@ (8009b10 <prvSwitchTimerLists+0xc8>)
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	6013      	str	r3, [r2, #0]
}
 8009b02:	bf00      	nop
 8009b04:	3718      	adds	r7, #24
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	200010b0 	.word	0x200010b0
 8009b10:	200010b4 	.word	0x200010b4

08009b14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b1a:	f000 f96d 	bl	8009df8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b1e:	4b15      	ldr	r3, [pc, #84]	@ (8009b74 <prvCheckForValidListAndQueue+0x60>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d120      	bne.n	8009b68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b26:	4814      	ldr	r0, [pc, #80]	@ (8009b78 <prvCheckForValidListAndQueue+0x64>)
 8009b28:	f7fd fae6 	bl	80070f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b2c:	4813      	ldr	r0, [pc, #76]	@ (8009b7c <prvCheckForValidListAndQueue+0x68>)
 8009b2e:	f7fd fae3 	bl	80070f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b32:	4b13      	ldr	r3, [pc, #76]	@ (8009b80 <prvCheckForValidListAndQueue+0x6c>)
 8009b34:	4a10      	ldr	r2, [pc, #64]	@ (8009b78 <prvCheckForValidListAndQueue+0x64>)
 8009b36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b38:	4b12      	ldr	r3, [pc, #72]	@ (8009b84 <prvCheckForValidListAndQueue+0x70>)
 8009b3a:	4a10      	ldr	r2, [pc, #64]	@ (8009b7c <prvCheckForValidListAndQueue+0x68>)
 8009b3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b3e:	2300      	movs	r3, #0
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	4b11      	ldr	r3, [pc, #68]	@ (8009b88 <prvCheckForValidListAndQueue+0x74>)
 8009b44:	4a11      	ldr	r2, [pc, #68]	@ (8009b8c <prvCheckForValidListAndQueue+0x78>)
 8009b46:	2110      	movs	r1, #16
 8009b48:	200a      	movs	r0, #10
 8009b4a:	f7fd fbf3 	bl	8007334 <xQueueGenericCreateStatic>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	4a08      	ldr	r2, [pc, #32]	@ (8009b74 <prvCheckForValidListAndQueue+0x60>)
 8009b52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009b54:	4b07      	ldr	r3, [pc, #28]	@ (8009b74 <prvCheckForValidListAndQueue+0x60>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d005      	beq.n	8009b68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009b5c:	4b05      	ldr	r3, [pc, #20]	@ (8009b74 <prvCheckForValidListAndQueue+0x60>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	490b      	ldr	r1, [pc, #44]	@ (8009b90 <prvCheckForValidListAndQueue+0x7c>)
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7fe fbd8 	bl	8008318 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009b68:	f000 f978 	bl	8009e5c <vPortExitCritical>
}
 8009b6c:	bf00      	nop
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	200010b8 	.word	0x200010b8
 8009b78:	20001088 	.word	0x20001088
 8009b7c:	2000109c 	.word	0x2000109c
 8009b80:	200010b0 	.word	0x200010b0
 8009b84:	200010b4 	.word	0x200010b4
 8009b88:	20001164 	.word	0x20001164
 8009b8c:	200010c4 	.word	0x200010c4
 8009b90:	0800d8ac 	.word	0x0800d8ac

08009b94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	3b04      	subs	r3, #4
 8009ba4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009bac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	3b04      	subs	r3, #4
 8009bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	f023 0201 	bic.w	r2, r3, #1
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	3b04      	subs	r3, #4
 8009bc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8009bf8 <pxPortInitialiseStack+0x64>)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	3b14      	subs	r3, #20
 8009bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	3b04      	subs	r3, #4
 8009bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f06f 0202 	mvn.w	r2, #2
 8009be2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	3b20      	subs	r3, #32
 8009be8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009bea:	68fb      	ldr	r3, [r7, #12]
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3714      	adds	r7, #20
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr
 8009bf8:	08009bfd 	.word	0x08009bfd

08009bfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009c02:	2300      	movs	r3, #0
 8009c04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c06:	4b13      	ldr	r3, [pc, #76]	@ (8009c54 <prvTaskExitError+0x58>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c0e:	d00b      	beq.n	8009c28 <prvTaskExitError+0x2c>
	__asm volatile
 8009c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c14:	f383 8811 	msr	BASEPRI, r3
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	60fb      	str	r3, [r7, #12]
}
 8009c22:	bf00      	nop
 8009c24:	bf00      	nop
 8009c26:	e7fd      	b.n	8009c24 <prvTaskExitError+0x28>
	__asm volatile
 8009c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c2c:	f383 8811 	msr	BASEPRI, r3
 8009c30:	f3bf 8f6f 	isb	sy
 8009c34:	f3bf 8f4f 	dsb	sy
 8009c38:	60bb      	str	r3, [r7, #8]
}
 8009c3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c3c:	bf00      	nop
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d0fc      	beq.n	8009c3e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c44:	bf00      	nop
 8009c46:	bf00      	nop
 8009c48:	3714      	adds	r7, #20
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr
 8009c52:	bf00      	nop
 8009c54:	2000000c 	.word	0x2000000c
	...

08009c60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c60:	4b07      	ldr	r3, [pc, #28]	@ (8009c80 <pxCurrentTCBConst2>)
 8009c62:	6819      	ldr	r1, [r3, #0]
 8009c64:	6808      	ldr	r0, [r1, #0]
 8009c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c6a:	f380 8809 	msr	PSP, r0
 8009c6e:	f3bf 8f6f 	isb	sy
 8009c72:	f04f 0000 	mov.w	r0, #0
 8009c76:	f380 8811 	msr	BASEPRI, r0
 8009c7a:	4770      	bx	lr
 8009c7c:	f3af 8000 	nop.w

08009c80 <pxCurrentTCBConst2>:
 8009c80:	20000b88 	.word	0x20000b88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c84:	bf00      	nop
 8009c86:	bf00      	nop

08009c88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c88:	4808      	ldr	r0, [pc, #32]	@ (8009cac <prvPortStartFirstTask+0x24>)
 8009c8a:	6800      	ldr	r0, [r0, #0]
 8009c8c:	6800      	ldr	r0, [r0, #0]
 8009c8e:	f380 8808 	msr	MSP, r0
 8009c92:	f04f 0000 	mov.w	r0, #0
 8009c96:	f380 8814 	msr	CONTROL, r0
 8009c9a:	b662      	cpsie	i
 8009c9c:	b661      	cpsie	f
 8009c9e:	f3bf 8f4f 	dsb	sy
 8009ca2:	f3bf 8f6f 	isb	sy
 8009ca6:	df00      	svc	0
 8009ca8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009caa:	bf00      	nop
 8009cac:	e000ed08 	.word	0xe000ed08

08009cb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b086      	sub	sp, #24
 8009cb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009cb6:	4b47      	ldr	r3, [pc, #284]	@ (8009dd4 <xPortStartScheduler+0x124>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a47      	ldr	r2, [pc, #284]	@ (8009dd8 <xPortStartScheduler+0x128>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d10b      	bne.n	8009cd8 <xPortStartScheduler+0x28>
	__asm volatile
 8009cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc4:	f383 8811 	msr	BASEPRI, r3
 8009cc8:	f3bf 8f6f 	isb	sy
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	60fb      	str	r3, [r7, #12]
}
 8009cd2:	bf00      	nop
 8009cd4:	bf00      	nop
 8009cd6:	e7fd      	b.n	8009cd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009cd8:	4b3e      	ldr	r3, [pc, #248]	@ (8009dd4 <xPortStartScheduler+0x124>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a3f      	ldr	r2, [pc, #252]	@ (8009ddc <xPortStartScheduler+0x12c>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d10b      	bne.n	8009cfa <xPortStartScheduler+0x4a>
	__asm volatile
 8009ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ce6:	f383 8811 	msr	BASEPRI, r3
 8009cea:	f3bf 8f6f 	isb	sy
 8009cee:	f3bf 8f4f 	dsb	sy
 8009cf2:	613b      	str	r3, [r7, #16]
}
 8009cf4:	bf00      	nop
 8009cf6:	bf00      	nop
 8009cf8:	e7fd      	b.n	8009cf6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009cfa:	4b39      	ldr	r3, [pc, #228]	@ (8009de0 <xPortStartScheduler+0x130>)
 8009cfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	22ff      	movs	r2, #255	@ 0xff
 8009d0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d14:	78fb      	ldrb	r3, [r7, #3]
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009d1c:	b2da      	uxtb	r2, r3
 8009d1e:	4b31      	ldr	r3, [pc, #196]	@ (8009de4 <xPortStartScheduler+0x134>)
 8009d20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d22:	4b31      	ldr	r3, [pc, #196]	@ (8009de8 <xPortStartScheduler+0x138>)
 8009d24:	2207      	movs	r2, #7
 8009d26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d28:	e009      	b.n	8009d3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8009de8 <xPortStartScheduler+0x138>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	3b01      	subs	r3, #1
 8009d30:	4a2d      	ldr	r2, [pc, #180]	@ (8009de8 <xPortStartScheduler+0x138>)
 8009d32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d34:	78fb      	ldrb	r3, [r7, #3]
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	005b      	lsls	r3, r3, #1
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d3e:	78fb      	ldrb	r3, [r7, #3]
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d46:	2b80      	cmp	r3, #128	@ 0x80
 8009d48:	d0ef      	beq.n	8009d2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d4a:	4b27      	ldr	r3, [pc, #156]	@ (8009de8 <xPortStartScheduler+0x138>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f1c3 0307 	rsb	r3, r3, #7
 8009d52:	2b04      	cmp	r3, #4
 8009d54:	d00b      	beq.n	8009d6e <xPortStartScheduler+0xbe>
	__asm volatile
 8009d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d5a:	f383 8811 	msr	BASEPRI, r3
 8009d5e:	f3bf 8f6f 	isb	sy
 8009d62:	f3bf 8f4f 	dsb	sy
 8009d66:	60bb      	str	r3, [r7, #8]
}
 8009d68:	bf00      	nop
 8009d6a:	bf00      	nop
 8009d6c:	e7fd      	b.n	8009d6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8009de8 <xPortStartScheduler+0x138>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	021b      	lsls	r3, r3, #8
 8009d74:	4a1c      	ldr	r2, [pc, #112]	@ (8009de8 <xPortStartScheduler+0x138>)
 8009d76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d78:	4b1b      	ldr	r3, [pc, #108]	@ (8009de8 <xPortStartScheduler+0x138>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009d80:	4a19      	ldr	r2, [pc, #100]	@ (8009de8 <xPortStartScheduler+0x138>)
 8009d82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	b2da      	uxtb	r2, r3
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d8c:	4b17      	ldr	r3, [pc, #92]	@ (8009dec <xPortStartScheduler+0x13c>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a16      	ldr	r2, [pc, #88]	@ (8009dec <xPortStartScheduler+0x13c>)
 8009d92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009d96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d98:	4b14      	ldr	r3, [pc, #80]	@ (8009dec <xPortStartScheduler+0x13c>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a13      	ldr	r2, [pc, #76]	@ (8009dec <xPortStartScheduler+0x13c>)
 8009d9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009da2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009da4:	f000 f8da 	bl	8009f5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009da8:	4b11      	ldr	r3, [pc, #68]	@ (8009df0 <xPortStartScheduler+0x140>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009dae:	f000 f8f9 	bl	8009fa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009db2:	4b10      	ldr	r3, [pc, #64]	@ (8009df4 <xPortStartScheduler+0x144>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a0f      	ldr	r2, [pc, #60]	@ (8009df4 <xPortStartScheduler+0x144>)
 8009db8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009dbc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009dbe:	f7ff ff63 	bl	8009c88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009dc2:	f7fe ff1d 	bl	8008c00 <vTaskSwitchContext>
	prvTaskExitError();
 8009dc6:	f7ff ff19 	bl	8009bfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3718      	adds	r7, #24
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	e000ed00 	.word	0xe000ed00
 8009dd8:	410fc271 	.word	0x410fc271
 8009ddc:	410fc270 	.word	0x410fc270
 8009de0:	e000e400 	.word	0xe000e400
 8009de4:	200011b4 	.word	0x200011b4
 8009de8:	200011b8 	.word	0x200011b8
 8009dec:	e000ed20 	.word	0xe000ed20
 8009df0:	2000000c 	.word	0x2000000c
 8009df4:	e000ef34 	.word	0xe000ef34

08009df8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	607b      	str	r3, [r7, #4]
}
 8009e10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e12:	4b10      	ldr	r3, [pc, #64]	@ (8009e54 <vPortEnterCritical+0x5c>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	3301      	adds	r3, #1
 8009e18:	4a0e      	ldr	r2, [pc, #56]	@ (8009e54 <vPortEnterCritical+0x5c>)
 8009e1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8009e54 <vPortEnterCritical+0x5c>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d110      	bne.n	8009e46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e24:	4b0c      	ldr	r3, [pc, #48]	@ (8009e58 <vPortEnterCritical+0x60>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d00b      	beq.n	8009e46 <vPortEnterCritical+0x4e>
	__asm volatile
 8009e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e32:	f383 8811 	msr	BASEPRI, r3
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	f3bf 8f4f 	dsb	sy
 8009e3e:	603b      	str	r3, [r7, #0]
}
 8009e40:	bf00      	nop
 8009e42:	bf00      	nop
 8009e44:	e7fd      	b.n	8009e42 <vPortEnterCritical+0x4a>
	}
}
 8009e46:	bf00      	nop
 8009e48:	370c      	adds	r7, #12
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	2000000c 	.word	0x2000000c
 8009e58:	e000ed04 	.word	0xe000ed04

08009e5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b083      	sub	sp, #12
 8009e60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e62:	4b12      	ldr	r3, [pc, #72]	@ (8009eac <vPortExitCritical+0x50>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d10b      	bne.n	8009e82 <vPortExitCritical+0x26>
	__asm volatile
 8009e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e6e:	f383 8811 	msr	BASEPRI, r3
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	f3bf 8f4f 	dsb	sy
 8009e7a:	607b      	str	r3, [r7, #4]
}
 8009e7c:	bf00      	nop
 8009e7e:	bf00      	nop
 8009e80:	e7fd      	b.n	8009e7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009e82:	4b0a      	ldr	r3, [pc, #40]	@ (8009eac <vPortExitCritical+0x50>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	3b01      	subs	r3, #1
 8009e88:	4a08      	ldr	r2, [pc, #32]	@ (8009eac <vPortExitCritical+0x50>)
 8009e8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e8c:	4b07      	ldr	r3, [pc, #28]	@ (8009eac <vPortExitCritical+0x50>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d105      	bne.n	8009ea0 <vPortExitCritical+0x44>
 8009e94:	2300      	movs	r3, #0
 8009e96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	f383 8811 	msr	BASEPRI, r3
}
 8009e9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ea0:	bf00      	nop
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	2000000c 	.word	0x2000000c

08009eb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009eb0:	f3ef 8009 	mrs	r0, PSP
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	4b15      	ldr	r3, [pc, #84]	@ (8009f10 <pxCurrentTCBConst>)
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	f01e 0f10 	tst.w	lr, #16
 8009ec0:	bf08      	it	eq
 8009ec2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ec6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eca:	6010      	str	r0, [r2, #0]
 8009ecc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ed0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009ed4:	f380 8811 	msr	BASEPRI, r0
 8009ed8:	f3bf 8f4f 	dsb	sy
 8009edc:	f3bf 8f6f 	isb	sy
 8009ee0:	f7fe fe8e 	bl	8008c00 <vTaskSwitchContext>
 8009ee4:	f04f 0000 	mov.w	r0, #0
 8009ee8:	f380 8811 	msr	BASEPRI, r0
 8009eec:	bc09      	pop	{r0, r3}
 8009eee:	6819      	ldr	r1, [r3, #0]
 8009ef0:	6808      	ldr	r0, [r1, #0]
 8009ef2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef6:	f01e 0f10 	tst.w	lr, #16
 8009efa:	bf08      	it	eq
 8009efc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f00:	f380 8809 	msr	PSP, r0
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	4770      	bx	lr
 8009f0a:	bf00      	nop
 8009f0c:	f3af 8000 	nop.w

08009f10 <pxCurrentTCBConst>:
 8009f10:	20000b88 	.word	0x20000b88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f14:	bf00      	nop
 8009f16:	bf00      	nop

08009f18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f22:	f383 8811 	msr	BASEPRI, r3
 8009f26:	f3bf 8f6f 	isb	sy
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	607b      	str	r3, [r7, #4]
}
 8009f30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f32:	f7fe fdab 	bl	8008a8c <xTaskIncrementTick>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d003      	beq.n	8009f44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f3c:	4b06      	ldr	r3, [pc, #24]	@ (8009f58 <xPortSysTickHandler+0x40>)
 8009f3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f42:	601a      	str	r2, [r3, #0]
 8009f44:	2300      	movs	r3, #0
 8009f46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	f383 8811 	msr	BASEPRI, r3
}
 8009f4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f50:	bf00      	nop
 8009f52:	3708      	adds	r7, #8
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	e000ed04 	.word	0xe000ed04

08009f5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f60:	4b0b      	ldr	r3, [pc, #44]	@ (8009f90 <vPortSetupTimerInterrupt+0x34>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f66:	4b0b      	ldr	r3, [pc, #44]	@ (8009f94 <vPortSetupTimerInterrupt+0x38>)
 8009f68:	2200      	movs	r2, #0
 8009f6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009f98 <vPortSetupTimerInterrupt+0x3c>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a0a      	ldr	r2, [pc, #40]	@ (8009f9c <vPortSetupTimerInterrupt+0x40>)
 8009f72:	fba2 2303 	umull	r2, r3, r2, r3
 8009f76:	099b      	lsrs	r3, r3, #6
 8009f78:	4a09      	ldr	r2, [pc, #36]	@ (8009fa0 <vPortSetupTimerInterrupt+0x44>)
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009f7e:	4b04      	ldr	r3, [pc, #16]	@ (8009f90 <vPortSetupTimerInterrupt+0x34>)
 8009f80:	2207      	movs	r2, #7
 8009f82:	601a      	str	r2, [r3, #0]
}
 8009f84:	bf00      	nop
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	e000e010 	.word	0xe000e010
 8009f94:	e000e018 	.word	0xe000e018
 8009f98:	20000000 	.word	0x20000000
 8009f9c:	10624dd3 	.word	0x10624dd3
 8009fa0:	e000e014 	.word	0xe000e014

08009fa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009fa4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009fb4 <vPortEnableVFP+0x10>
 8009fa8:	6801      	ldr	r1, [r0, #0]
 8009faa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009fae:	6001      	str	r1, [r0, #0]
 8009fb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009fb2:	bf00      	nop
 8009fb4:	e000ed88 	.word	0xe000ed88

08009fb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009fb8:	b480      	push	{r7}
 8009fba:	b085      	sub	sp, #20
 8009fbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009fbe:	f3ef 8305 	mrs	r3, IPSR
 8009fc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2b0f      	cmp	r3, #15
 8009fc8:	d915      	bls.n	8009ff6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009fca:	4a18      	ldr	r2, [pc, #96]	@ (800a02c <vPortValidateInterruptPriority+0x74>)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	4413      	add	r3, r2
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009fd4:	4b16      	ldr	r3, [pc, #88]	@ (800a030 <vPortValidateInterruptPriority+0x78>)
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	7afa      	ldrb	r2, [r7, #11]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d20b      	bcs.n	8009ff6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe2:	f383 8811 	msr	BASEPRI, r3
 8009fe6:	f3bf 8f6f 	isb	sy
 8009fea:	f3bf 8f4f 	dsb	sy
 8009fee:	607b      	str	r3, [r7, #4]
}
 8009ff0:	bf00      	nop
 8009ff2:	bf00      	nop
 8009ff4:	e7fd      	b.n	8009ff2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ff6:	4b0f      	ldr	r3, [pc, #60]	@ (800a034 <vPortValidateInterruptPriority+0x7c>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009ffe:	4b0e      	ldr	r3, [pc, #56]	@ (800a038 <vPortValidateInterruptPriority+0x80>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	429a      	cmp	r2, r3
 800a004:	d90b      	bls.n	800a01e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a00a:	f383 8811 	msr	BASEPRI, r3
 800a00e:	f3bf 8f6f 	isb	sy
 800a012:	f3bf 8f4f 	dsb	sy
 800a016:	603b      	str	r3, [r7, #0]
}
 800a018:	bf00      	nop
 800a01a:	bf00      	nop
 800a01c:	e7fd      	b.n	800a01a <vPortValidateInterruptPriority+0x62>
	}
 800a01e:	bf00      	nop
 800a020:	3714      	adds	r7, #20
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr
 800a02a:	bf00      	nop
 800a02c:	e000e3f0 	.word	0xe000e3f0
 800a030:	200011b4 	.word	0x200011b4
 800a034:	e000ed0c 	.word	0xe000ed0c
 800a038:	200011b8 	.word	0x200011b8

0800a03c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b08a      	sub	sp, #40	@ 0x28
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a044:	2300      	movs	r3, #0
 800a046:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a048:	f7fe fc52 	bl	80088f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a04c:	4b5c      	ldr	r3, [pc, #368]	@ (800a1c0 <pvPortMalloc+0x184>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d101      	bne.n	800a058 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a054:	f000 f924 	bl	800a2a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a058:	4b5a      	ldr	r3, [pc, #360]	@ (800a1c4 <pvPortMalloc+0x188>)
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	4013      	ands	r3, r2
 800a060:	2b00      	cmp	r3, #0
 800a062:	f040 8095 	bne.w	800a190 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d01e      	beq.n	800a0aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a06c:	2208      	movs	r2, #8
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4413      	add	r3, r2
 800a072:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f003 0307 	and.w	r3, r3, #7
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d015      	beq.n	800a0aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f023 0307 	bic.w	r3, r3, #7
 800a084:	3308      	adds	r3, #8
 800a086:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f003 0307 	and.w	r3, r3, #7
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00b      	beq.n	800a0aa <pvPortMalloc+0x6e>
	__asm volatile
 800a092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a096:	f383 8811 	msr	BASEPRI, r3
 800a09a:	f3bf 8f6f 	isb	sy
 800a09e:	f3bf 8f4f 	dsb	sy
 800a0a2:	617b      	str	r3, [r7, #20]
}
 800a0a4:	bf00      	nop
 800a0a6:	bf00      	nop
 800a0a8:	e7fd      	b.n	800a0a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d06f      	beq.n	800a190 <pvPortMalloc+0x154>
 800a0b0:	4b45      	ldr	r3, [pc, #276]	@ (800a1c8 <pvPortMalloc+0x18c>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d86a      	bhi.n	800a190 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a0ba:	4b44      	ldr	r3, [pc, #272]	@ (800a1cc <pvPortMalloc+0x190>)
 800a0bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a0be:	4b43      	ldr	r3, [pc, #268]	@ (800a1cc <pvPortMalloc+0x190>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0c4:	e004      	b.n	800a0d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a0ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d903      	bls.n	800a0e2 <pvPortMalloc+0xa6>
 800a0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1f1      	bne.n	800a0c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a0e2:	4b37      	ldr	r3, [pc, #220]	@ (800a1c0 <pvPortMalloc+0x184>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d051      	beq.n	800a190 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a0ec:	6a3b      	ldr	r3, [r7, #32]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2208      	movs	r2, #8
 800a0f2:	4413      	add	r3, r2
 800a0f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	6a3b      	ldr	r3, [r7, #32]
 800a0fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a0fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a100:	685a      	ldr	r2, [r3, #4]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	1ad2      	subs	r2, r2, r3
 800a106:	2308      	movs	r3, #8
 800a108:	005b      	lsls	r3, r3, #1
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d920      	bls.n	800a150 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a10e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4413      	add	r3, r2
 800a114:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	f003 0307 	and.w	r3, r3, #7
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00b      	beq.n	800a138 <pvPortMalloc+0xfc>
	__asm volatile
 800a120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a124:	f383 8811 	msr	BASEPRI, r3
 800a128:	f3bf 8f6f 	isb	sy
 800a12c:	f3bf 8f4f 	dsb	sy
 800a130:	613b      	str	r3, [r7, #16]
}
 800a132:	bf00      	nop
 800a134:	bf00      	nop
 800a136:	e7fd      	b.n	800a134 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a13a:	685a      	ldr	r2, [r3, #4]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	1ad2      	subs	r2, r2, r3
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a14a:	69b8      	ldr	r0, [r7, #24]
 800a14c:	f000 f90a 	bl	800a364 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a150:	4b1d      	ldr	r3, [pc, #116]	@ (800a1c8 <pvPortMalloc+0x18c>)
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	1ad3      	subs	r3, r2, r3
 800a15a:	4a1b      	ldr	r2, [pc, #108]	@ (800a1c8 <pvPortMalloc+0x18c>)
 800a15c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a15e:	4b1a      	ldr	r3, [pc, #104]	@ (800a1c8 <pvPortMalloc+0x18c>)
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	4b1b      	ldr	r3, [pc, #108]	@ (800a1d0 <pvPortMalloc+0x194>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	429a      	cmp	r2, r3
 800a168:	d203      	bcs.n	800a172 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a16a:	4b17      	ldr	r3, [pc, #92]	@ (800a1c8 <pvPortMalloc+0x18c>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a18      	ldr	r2, [pc, #96]	@ (800a1d0 <pvPortMalloc+0x194>)
 800a170:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a174:	685a      	ldr	r2, [r3, #4]
 800a176:	4b13      	ldr	r3, [pc, #76]	@ (800a1c4 <pvPortMalloc+0x188>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	431a      	orrs	r2, r3
 800a17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a17e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a182:	2200      	movs	r2, #0
 800a184:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a186:	4b13      	ldr	r3, [pc, #76]	@ (800a1d4 <pvPortMalloc+0x198>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	3301      	adds	r3, #1
 800a18c:	4a11      	ldr	r2, [pc, #68]	@ (800a1d4 <pvPortMalloc+0x198>)
 800a18e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a190:	f7fe fbbc 	bl	800890c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	f003 0307 	and.w	r3, r3, #7
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d00b      	beq.n	800a1b6 <pvPortMalloc+0x17a>
	__asm volatile
 800a19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a2:	f383 8811 	msr	BASEPRI, r3
 800a1a6:	f3bf 8f6f 	isb	sy
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	60fb      	str	r3, [r7, #12]
}
 800a1b0:	bf00      	nop
 800a1b2:	bf00      	nop
 800a1b4:	e7fd      	b.n	800a1b2 <pvPortMalloc+0x176>
	return pvReturn;
 800a1b6:	69fb      	ldr	r3, [r7, #28]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3728      	adds	r7, #40	@ 0x28
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	20001d7c 	.word	0x20001d7c
 800a1c4:	20001d90 	.word	0x20001d90
 800a1c8:	20001d80 	.word	0x20001d80
 800a1cc:	20001d74 	.word	0x20001d74
 800a1d0:	20001d84 	.word	0x20001d84
 800a1d4:	20001d88 	.word	0x20001d88

0800a1d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d04f      	beq.n	800a28a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a1ea:	2308      	movs	r3, #8
 800a1ec:	425b      	negs	r3, r3
 800a1ee:	697a      	ldr	r2, [r7, #20]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	685a      	ldr	r2, [r3, #4]
 800a1fc:	4b25      	ldr	r3, [pc, #148]	@ (800a294 <vPortFree+0xbc>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4013      	ands	r3, r2
 800a202:	2b00      	cmp	r3, #0
 800a204:	d10b      	bne.n	800a21e <vPortFree+0x46>
	__asm volatile
 800a206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a20a:	f383 8811 	msr	BASEPRI, r3
 800a20e:	f3bf 8f6f 	isb	sy
 800a212:	f3bf 8f4f 	dsb	sy
 800a216:	60fb      	str	r3, [r7, #12]
}
 800a218:	bf00      	nop
 800a21a:	bf00      	nop
 800a21c:	e7fd      	b.n	800a21a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00b      	beq.n	800a23e <vPortFree+0x66>
	__asm volatile
 800a226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a22a:	f383 8811 	msr	BASEPRI, r3
 800a22e:	f3bf 8f6f 	isb	sy
 800a232:	f3bf 8f4f 	dsb	sy
 800a236:	60bb      	str	r3, [r7, #8]
}
 800a238:	bf00      	nop
 800a23a:	bf00      	nop
 800a23c:	e7fd      	b.n	800a23a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	685a      	ldr	r2, [r3, #4]
 800a242:	4b14      	ldr	r3, [pc, #80]	@ (800a294 <vPortFree+0xbc>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4013      	ands	r3, r2
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d01e      	beq.n	800a28a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d11a      	bne.n	800a28a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	685a      	ldr	r2, [r3, #4]
 800a258:	4b0e      	ldr	r3, [pc, #56]	@ (800a294 <vPortFree+0xbc>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	43db      	mvns	r3, r3
 800a25e:	401a      	ands	r2, r3
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a264:	f7fe fb44 	bl	80088f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	685a      	ldr	r2, [r3, #4]
 800a26c:	4b0a      	ldr	r3, [pc, #40]	@ (800a298 <vPortFree+0xc0>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4413      	add	r3, r2
 800a272:	4a09      	ldr	r2, [pc, #36]	@ (800a298 <vPortFree+0xc0>)
 800a274:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a276:	6938      	ldr	r0, [r7, #16]
 800a278:	f000 f874 	bl	800a364 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a27c:	4b07      	ldr	r3, [pc, #28]	@ (800a29c <vPortFree+0xc4>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	3301      	adds	r3, #1
 800a282:	4a06      	ldr	r2, [pc, #24]	@ (800a29c <vPortFree+0xc4>)
 800a284:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a286:	f7fe fb41 	bl	800890c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a28a:	bf00      	nop
 800a28c:	3718      	adds	r7, #24
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
 800a292:	bf00      	nop
 800a294:	20001d90 	.word	0x20001d90
 800a298:	20001d80 	.word	0x20001d80
 800a29c:	20001d8c 	.word	0x20001d8c

0800a2a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a2a6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800a2aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a2ac:	4b27      	ldr	r3, [pc, #156]	@ (800a34c <prvHeapInit+0xac>)
 800a2ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f003 0307 	and.w	r3, r3, #7
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00c      	beq.n	800a2d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	3307      	adds	r3, #7
 800a2be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f023 0307 	bic.w	r3, r3, #7
 800a2c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a2c8:	68ba      	ldr	r2, [r7, #8]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	1ad3      	subs	r3, r2, r3
 800a2ce:	4a1f      	ldr	r2, [pc, #124]	@ (800a34c <prvHeapInit+0xac>)
 800a2d0:	4413      	add	r3, r2
 800a2d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a2d8:	4a1d      	ldr	r2, [pc, #116]	@ (800a350 <prvHeapInit+0xb0>)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a2de:	4b1c      	ldr	r3, [pc, #112]	@ (800a350 <prvHeapInit+0xb0>)
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	68ba      	ldr	r2, [r7, #8]
 800a2e8:	4413      	add	r3, r2
 800a2ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a2ec:	2208      	movs	r2, #8
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	1a9b      	subs	r3, r3, r2
 800a2f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f023 0307 	bic.w	r3, r3, #7
 800a2fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	4a15      	ldr	r2, [pc, #84]	@ (800a354 <prvHeapInit+0xb4>)
 800a300:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a302:	4b14      	ldr	r3, [pc, #80]	@ (800a354 <prvHeapInit+0xb4>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	2200      	movs	r2, #0
 800a308:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a30a:	4b12      	ldr	r3, [pc, #72]	@ (800a354 <prvHeapInit+0xb4>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	2200      	movs	r2, #0
 800a310:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	1ad2      	subs	r2, r2, r3
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a320:	4b0c      	ldr	r3, [pc, #48]	@ (800a354 <prvHeapInit+0xb4>)
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	4a0a      	ldr	r2, [pc, #40]	@ (800a358 <prvHeapInit+0xb8>)
 800a32e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	4a09      	ldr	r2, [pc, #36]	@ (800a35c <prvHeapInit+0xbc>)
 800a336:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a338:	4b09      	ldr	r3, [pc, #36]	@ (800a360 <prvHeapInit+0xc0>)
 800a33a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a33e:	601a      	str	r2, [r3, #0]
}
 800a340:	bf00      	nop
 800a342:	3714      	adds	r7, #20
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	200011bc 	.word	0x200011bc
 800a350:	20001d74 	.word	0x20001d74
 800a354:	20001d7c 	.word	0x20001d7c
 800a358:	20001d84 	.word	0x20001d84
 800a35c:	20001d80 	.word	0x20001d80
 800a360:	20001d90 	.word	0x20001d90

0800a364 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a36c:	4b28      	ldr	r3, [pc, #160]	@ (800a410 <prvInsertBlockIntoFreeList+0xac>)
 800a36e:	60fb      	str	r3, [r7, #12]
 800a370:	e002      	b.n	800a378 <prvInsertBlockIntoFreeList+0x14>
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	60fb      	str	r3, [r7, #12]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d8f7      	bhi.n	800a372 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	68ba      	ldr	r2, [r7, #8]
 800a38c:	4413      	add	r3, r2
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	429a      	cmp	r2, r3
 800a392:	d108      	bne.n	800a3a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	685a      	ldr	r2, [r3, #4]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	441a      	add	r2, r3
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	68ba      	ldr	r2, [r7, #8]
 800a3b0:	441a      	add	r2, r3
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d118      	bne.n	800a3ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	4b15      	ldr	r3, [pc, #84]	@ (800a414 <prvInsertBlockIntoFreeList+0xb0>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d00d      	beq.n	800a3e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	685a      	ldr	r2, [r3, #4]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	441a      	add	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	601a      	str	r2, [r3, #0]
 800a3e0:	e008      	b.n	800a3f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a3e2:	4b0c      	ldr	r3, [pc, #48]	@ (800a414 <prvInsertBlockIntoFreeList+0xb0>)
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	601a      	str	r2, [r3, #0]
 800a3ea:	e003      	b.n	800a3f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a3f4:	68fa      	ldr	r2, [r7, #12]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d002      	beq.n	800a402 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a402:	bf00      	nop
 800a404:	3714      	adds	r7, #20
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop
 800a410:	20001d74 	.word	0x20001d74
 800a414:	20001d7c 	.word	0x20001d7c

0800a418 <__cvt>:
 800a418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a41c:	ec57 6b10 	vmov	r6, r7, d0
 800a420:	2f00      	cmp	r7, #0
 800a422:	460c      	mov	r4, r1
 800a424:	4619      	mov	r1, r3
 800a426:	463b      	mov	r3, r7
 800a428:	bfbb      	ittet	lt
 800a42a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a42e:	461f      	movlt	r7, r3
 800a430:	2300      	movge	r3, #0
 800a432:	232d      	movlt	r3, #45	@ 0x2d
 800a434:	700b      	strb	r3, [r1, #0]
 800a436:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a438:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a43c:	4691      	mov	r9, r2
 800a43e:	f023 0820 	bic.w	r8, r3, #32
 800a442:	bfbc      	itt	lt
 800a444:	4632      	movlt	r2, r6
 800a446:	4616      	movlt	r6, r2
 800a448:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a44c:	d005      	beq.n	800a45a <__cvt+0x42>
 800a44e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a452:	d100      	bne.n	800a456 <__cvt+0x3e>
 800a454:	3401      	adds	r4, #1
 800a456:	2102      	movs	r1, #2
 800a458:	e000      	b.n	800a45c <__cvt+0x44>
 800a45a:	2103      	movs	r1, #3
 800a45c:	ab03      	add	r3, sp, #12
 800a45e:	9301      	str	r3, [sp, #4]
 800a460:	ab02      	add	r3, sp, #8
 800a462:	9300      	str	r3, [sp, #0]
 800a464:	ec47 6b10 	vmov	d0, r6, r7
 800a468:	4653      	mov	r3, sl
 800a46a:	4622      	mov	r2, r4
 800a46c:	f000 fec8 	bl	800b200 <_dtoa_r>
 800a470:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a474:	4605      	mov	r5, r0
 800a476:	d119      	bne.n	800a4ac <__cvt+0x94>
 800a478:	f019 0f01 	tst.w	r9, #1
 800a47c:	d00e      	beq.n	800a49c <__cvt+0x84>
 800a47e:	eb00 0904 	add.w	r9, r0, r4
 800a482:	2200      	movs	r2, #0
 800a484:	2300      	movs	r3, #0
 800a486:	4630      	mov	r0, r6
 800a488:	4639      	mov	r1, r7
 800a48a:	f7f6 fb1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a48e:	b108      	cbz	r0, 800a494 <__cvt+0x7c>
 800a490:	f8cd 900c 	str.w	r9, [sp, #12]
 800a494:	2230      	movs	r2, #48	@ 0x30
 800a496:	9b03      	ldr	r3, [sp, #12]
 800a498:	454b      	cmp	r3, r9
 800a49a:	d31e      	bcc.n	800a4da <__cvt+0xc2>
 800a49c:	9b03      	ldr	r3, [sp, #12]
 800a49e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a4a0:	1b5b      	subs	r3, r3, r5
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	6013      	str	r3, [r2, #0]
 800a4a6:	b004      	add	sp, #16
 800a4a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a4b0:	eb00 0904 	add.w	r9, r0, r4
 800a4b4:	d1e5      	bne.n	800a482 <__cvt+0x6a>
 800a4b6:	7803      	ldrb	r3, [r0, #0]
 800a4b8:	2b30      	cmp	r3, #48	@ 0x30
 800a4ba:	d10a      	bne.n	800a4d2 <__cvt+0xba>
 800a4bc:	2200      	movs	r2, #0
 800a4be:	2300      	movs	r3, #0
 800a4c0:	4630      	mov	r0, r6
 800a4c2:	4639      	mov	r1, r7
 800a4c4:	f7f6 fb00 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4c8:	b918      	cbnz	r0, 800a4d2 <__cvt+0xba>
 800a4ca:	f1c4 0401 	rsb	r4, r4, #1
 800a4ce:	f8ca 4000 	str.w	r4, [sl]
 800a4d2:	f8da 3000 	ldr.w	r3, [sl]
 800a4d6:	4499      	add	r9, r3
 800a4d8:	e7d3      	b.n	800a482 <__cvt+0x6a>
 800a4da:	1c59      	adds	r1, r3, #1
 800a4dc:	9103      	str	r1, [sp, #12]
 800a4de:	701a      	strb	r2, [r3, #0]
 800a4e0:	e7d9      	b.n	800a496 <__cvt+0x7e>

0800a4e2 <__exponent>:
 800a4e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4e4:	2900      	cmp	r1, #0
 800a4e6:	bfba      	itte	lt
 800a4e8:	4249      	neglt	r1, r1
 800a4ea:	232d      	movlt	r3, #45	@ 0x2d
 800a4ec:	232b      	movge	r3, #43	@ 0x2b
 800a4ee:	2909      	cmp	r1, #9
 800a4f0:	7002      	strb	r2, [r0, #0]
 800a4f2:	7043      	strb	r3, [r0, #1]
 800a4f4:	dd29      	ble.n	800a54a <__exponent+0x68>
 800a4f6:	f10d 0307 	add.w	r3, sp, #7
 800a4fa:	461d      	mov	r5, r3
 800a4fc:	270a      	movs	r7, #10
 800a4fe:	461a      	mov	r2, r3
 800a500:	fbb1 f6f7 	udiv	r6, r1, r7
 800a504:	fb07 1416 	mls	r4, r7, r6, r1
 800a508:	3430      	adds	r4, #48	@ 0x30
 800a50a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a50e:	460c      	mov	r4, r1
 800a510:	2c63      	cmp	r4, #99	@ 0x63
 800a512:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a516:	4631      	mov	r1, r6
 800a518:	dcf1      	bgt.n	800a4fe <__exponent+0x1c>
 800a51a:	3130      	adds	r1, #48	@ 0x30
 800a51c:	1e94      	subs	r4, r2, #2
 800a51e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a522:	1c41      	adds	r1, r0, #1
 800a524:	4623      	mov	r3, r4
 800a526:	42ab      	cmp	r3, r5
 800a528:	d30a      	bcc.n	800a540 <__exponent+0x5e>
 800a52a:	f10d 0309 	add.w	r3, sp, #9
 800a52e:	1a9b      	subs	r3, r3, r2
 800a530:	42ac      	cmp	r4, r5
 800a532:	bf88      	it	hi
 800a534:	2300      	movhi	r3, #0
 800a536:	3302      	adds	r3, #2
 800a538:	4403      	add	r3, r0
 800a53a:	1a18      	subs	r0, r3, r0
 800a53c:	b003      	add	sp, #12
 800a53e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a540:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a544:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a548:	e7ed      	b.n	800a526 <__exponent+0x44>
 800a54a:	2330      	movs	r3, #48	@ 0x30
 800a54c:	3130      	adds	r1, #48	@ 0x30
 800a54e:	7083      	strb	r3, [r0, #2]
 800a550:	70c1      	strb	r1, [r0, #3]
 800a552:	1d03      	adds	r3, r0, #4
 800a554:	e7f1      	b.n	800a53a <__exponent+0x58>
	...

0800a558 <_printf_float>:
 800a558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a55c:	b08d      	sub	sp, #52	@ 0x34
 800a55e:	460c      	mov	r4, r1
 800a560:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a564:	4616      	mov	r6, r2
 800a566:	461f      	mov	r7, r3
 800a568:	4605      	mov	r5, r0
 800a56a:	f000 fcdb 	bl	800af24 <_localeconv_r>
 800a56e:	6803      	ldr	r3, [r0, #0]
 800a570:	9304      	str	r3, [sp, #16]
 800a572:	4618      	mov	r0, r3
 800a574:	f7f5 fe7c 	bl	8000270 <strlen>
 800a578:	2300      	movs	r3, #0
 800a57a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a57c:	f8d8 3000 	ldr.w	r3, [r8]
 800a580:	9005      	str	r0, [sp, #20]
 800a582:	3307      	adds	r3, #7
 800a584:	f023 0307 	bic.w	r3, r3, #7
 800a588:	f103 0208 	add.w	r2, r3, #8
 800a58c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a590:	f8d4 b000 	ldr.w	fp, [r4]
 800a594:	f8c8 2000 	str.w	r2, [r8]
 800a598:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a59c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a5a0:	9307      	str	r3, [sp, #28]
 800a5a2:	f8cd 8018 	str.w	r8, [sp, #24]
 800a5a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a5aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5ae:	4b9c      	ldr	r3, [pc, #624]	@ (800a820 <_printf_float+0x2c8>)
 800a5b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a5b4:	f7f6 faba 	bl	8000b2c <__aeabi_dcmpun>
 800a5b8:	bb70      	cbnz	r0, 800a618 <_printf_float+0xc0>
 800a5ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5be:	4b98      	ldr	r3, [pc, #608]	@ (800a820 <_printf_float+0x2c8>)
 800a5c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a5c4:	f7f6 fa94 	bl	8000af0 <__aeabi_dcmple>
 800a5c8:	bb30      	cbnz	r0, 800a618 <_printf_float+0xc0>
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	4640      	mov	r0, r8
 800a5d0:	4649      	mov	r1, r9
 800a5d2:	f7f6 fa83 	bl	8000adc <__aeabi_dcmplt>
 800a5d6:	b110      	cbz	r0, 800a5de <_printf_float+0x86>
 800a5d8:	232d      	movs	r3, #45	@ 0x2d
 800a5da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5de:	4a91      	ldr	r2, [pc, #580]	@ (800a824 <_printf_float+0x2cc>)
 800a5e0:	4b91      	ldr	r3, [pc, #580]	@ (800a828 <_printf_float+0x2d0>)
 800a5e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a5e6:	bf8c      	ite	hi
 800a5e8:	4690      	movhi	r8, r2
 800a5ea:	4698      	movls	r8, r3
 800a5ec:	2303      	movs	r3, #3
 800a5ee:	6123      	str	r3, [r4, #16]
 800a5f0:	f02b 0304 	bic.w	r3, fp, #4
 800a5f4:	6023      	str	r3, [r4, #0]
 800a5f6:	f04f 0900 	mov.w	r9, #0
 800a5fa:	9700      	str	r7, [sp, #0]
 800a5fc:	4633      	mov	r3, r6
 800a5fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a600:	4621      	mov	r1, r4
 800a602:	4628      	mov	r0, r5
 800a604:	f000 f9d2 	bl	800a9ac <_printf_common>
 800a608:	3001      	adds	r0, #1
 800a60a:	f040 808d 	bne.w	800a728 <_printf_float+0x1d0>
 800a60e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a612:	b00d      	add	sp, #52	@ 0x34
 800a614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a618:	4642      	mov	r2, r8
 800a61a:	464b      	mov	r3, r9
 800a61c:	4640      	mov	r0, r8
 800a61e:	4649      	mov	r1, r9
 800a620:	f7f6 fa84 	bl	8000b2c <__aeabi_dcmpun>
 800a624:	b140      	cbz	r0, 800a638 <_printf_float+0xe0>
 800a626:	464b      	mov	r3, r9
 800a628:	2b00      	cmp	r3, #0
 800a62a:	bfbc      	itt	lt
 800a62c:	232d      	movlt	r3, #45	@ 0x2d
 800a62e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a632:	4a7e      	ldr	r2, [pc, #504]	@ (800a82c <_printf_float+0x2d4>)
 800a634:	4b7e      	ldr	r3, [pc, #504]	@ (800a830 <_printf_float+0x2d8>)
 800a636:	e7d4      	b.n	800a5e2 <_printf_float+0x8a>
 800a638:	6863      	ldr	r3, [r4, #4]
 800a63a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a63e:	9206      	str	r2, [sp, #24]
 800a640:	1c5a      	adds	r2, r3, #1
 800a642:	d13b      	bne.n	800a6bc <_printf_float+0x164>
 800a644:	2306      	movs	r3, #6
 800a646:	6063      	str	r3, [r4, #4]
 800a648:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a64c:	2300      	movs	r3, #0
 800a64e:	6022      	str	r2, [r4, #0]
 800a650:	9303      	str	r3, [sp, #12]
 800a652:	ab0a      	add	r3, sp, #40	@ 0x28
 800a654:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a658:	ab09      	add	r3, sp, #36	@ 0x24
 800a65a:	9300      	str	r3, [sp, #0]
 800a65c:	6861      	ldr	r1, [r4, #4]
 800a65e:	ec49 8b10 	vmov	d0, r8, r9
 800a662:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a666:	4628      	mov	r0, r5
 800a668:	f7ff fed6 	bl	800a418 <__cvt>
 800a66c:	9b06      	ldr	r3, [sp, #24]
 800a66e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a670:	2b47      	cmp	r3, #71	@ 0x47
 800a672:	4680      	mov	r8, r0
 800a674:	d129      	bne.n	800a6ca <_printf_float+0x172>
 800a676:	1cc8      	adds	r0, r1, #3
 800a678:	db02      	blt.n	800a680 <_printf_float+0x128>
 800a67a:	6863      	ldr	r3, [r4, #4]
 800a67c:	4299      	cmp	r1, r3
 800a67e:	dd41      	ble.n	800a704 <_printf_float+0x1ac>
 800a680:	f1aa 0a02 	sub.w	sl, sl, #2
 800a684:	fa5f fa8a 	uxtb.w	sl, sl
 800a688:	3901      	subs	r1, #1
 800a68a:	4652      	mov	r2, sl
 800a68c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a690:	9109      	str	r1, [sp, #36]	@ 0x24
 800a692:	f7ff ff26 	bl	800a4e2 <__exponent>
 800a696:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a698:	1813      	adds	r3, r2, r0
 800a69a:	2a01      	cmp	r2, #1
 800a69c:	4681      	mov	r9, r0
 800a69e:	6123      	str	r3, [r4, #16]
 800a6a0:	dc02      	bgt.n	800a6a8 <_printf_float+0x150>
 800a6a2:	6822      	ldr	r2, [r4, #0]
 800a6a4:	07d2      	lsls	r2, r2, #31
 800a6a6:	d501      	bpl.n	800a6ac <_printf_float+0x154>
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	6123      	str	r3, [r4, #16]
 800a6ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d0a2      	beq.n	800a5fa <_printf_float+0xa2>
 800a6b4:	232d      	movs	r3, #45	@ 0x2d
 800a6b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6ba:	e79e      	b.n	800a5fa <_printf_float+0xa2>
 800a6bc:	9a06      	ldr	r2, [sp, #24]
 800a6be:	2a47      	cmp	r2, #71	@ 0x47
 800a6c0:	d1c2      	bne.n	800a648 <_printf_float+0xf0>
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d1c0      	bne.n	800a648 <_printf_float+0xf0>
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e7bd      	b.n	800a646 <_printf_float+0xee>
 800a6ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a6ce:	d9db      	bls.n	800a688 <_printf_float+0x130>
 800a6d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a6d4:	d118      	bne.n	800a708 <_printf_float+0x1b0>
 800a6d6:	2900      	cmp	r1, #0
 800a6d8:	6863      	ldr	r3, [r4, #4]
 800a6da:	dd0b      	ble.n	800a6f4 <_printf_float+0x19c>
 800a6dc:	6121      	str	r1, [r4, #16]
 800a6de:	b913      	cbnz	r3, 800a6e6 <_printf_float+0x18e>
 800a6e0:	6822      	ldr	r2, [r4, #0]
 800a6e2:	07d0      	lsls	r0, r2, #31
 800a6e4:	d502      	bpl.n	800a6ec <_printf_float+0x194>
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	440b      	add	r3, r1
 800a6ea:	6123      	str	r3, [r4, #16]
 800a6ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a6ee:	f04f 0900 	mov.w	r9, #0
 800a6f2:	e7db      	b.n	800a6ac <_printf_float+0x154>
 800a6f4:	b913      	cbnz	r3, 800a6fc <_printf_float+0x1a4>
 800a6f6:	6822      	ldr	r2, [r4, #0]
 800a6f8:	07d2      	lsls	r2, r2, #31
 800a6fa:	d501      	bpl.n	800a700 <_printf_float+0x1a8>
 800a6fc:	3302      	adds	r3, #2
 800a6fe:	e7f4      	b.n	800a6ea <_printf_float+0x192>
 800a700:	2301      	movs	r3, #1
 800a702:	e7f2      	b.n	800a6ea <_printf_float+0x192>
 800a704:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a708:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a70a:	4299      	cmp	r1, r3
 800a70c:	db05      	blt.n	800a71a <_printf_float+0x1c2>
 800a70e:	6823      	ldr	r3, [r4, #0]
 800a710:	6121      	str	r1, [r4, #16]
 800a712:	07d8      	lsls	r0, r3, #31
 800a714:	d5ea      	bpl.n	800a6ec <_printf_float+0x194>
 800a716:	1c4b      	adds	r3, r1, #1
 800a718:	e7e7      	b.n	800a6ea <_printf_float+0x192>
 800a71a:	2900      	cmp	r1, #0
 800a71c:	bfd4      	ite	le
 800a71e:	f1c1 0202 	rsble	r2, r1, #2
 800a722:	2201      	movgt	r2, #1
 800a724:	4413      	add	r3, r2
 800a726:	e7e0      	b.n	800a6ea <_printf_float+0x192>
 800a728:	6823      	ldr	r3, [r4, #0]
 800a72a:	055a      	lsls	r2, r3, #21
 800a72c:	d407      	bmi.n	800a73e <_printf_float+0x1e6>
 800a72e:	6923      	ldr	r3, [r4, #16]
 800a730:	4642      	mov	r2, r8
 800a732:	4631      	mov	r1, r6
 800a734:	4628      	mov	r0, r5
 800a736:	47b8      	blx	r7
 800a738:	3001      	adds	r0, #1
 800a73a:	d12b      	bne.n	800a794 <_printf_float+0x23c>
 800a73c:	e767      	b.n	800a60e <_printf_float+0xb6>
 800a73e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a742:	f240 80dd 	bls.w	800a900 <_printf_float+0x3a8>
 800a746:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a74a:	2200      	movs	r2, #0
 800a74c:	2300      	movs	r3, #0
 800a74e:	f7f6 f9bb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a752:	2800      	cmp	r0, #0
 800a754:	d033      	beq.n	800a7be <_printf_float+0x266>
 800a756:	4a37      	ldr	r2, [pc, #220]	@ (800a834 <_printf_float+0x2dc>)
 800a758:	2301      	movs	r3, #1
 800a75a:	4631      	mov	r1, r6
 800a75c:	4628      	mov	r0, r5
 800a75e:	47b8      	blx	r7
 800a760:	3001      	adds	r0, #1
 800a762:	f43f af54 	beq.w	800a60e <_printf_float+0xb6>
 800a766:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a76a:	4543      	cmp	r3, r8
 800a76c:	db02      	blt.n	800a774 <_printf_float+0x21c>
 800a76e:	6823      	ldr	r3, [r4, #0]
 800a770:	07d8      	lsls	r0, r3, #31
 800a772:	d50f      	bpl.n	800a794 <_printf_float+0x23c>
 800a774:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a778:	4631      	mov	r1, r6
 800a77a:	4628      	mov	r0, r5
 800a77c:	47b8      	blx	r7
 800a77e:	3001      	adds	r0, #1
 800a780:	f43f af45 	beq.w	800a60e <_printf_float+0xb6>
 800a784:	f04f 0900 	mov.w	r9, #0
 800a788:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a78c:	f104 0a1a 	add.w	sl, r4, #26
 800a790:	45c8      	cmp	r8, r9
 800a792:	dc09      	bgt.n	800a7a8 <_printf_float+0x250>
 800a794:	6823      	ldr	r3, [r4, #0]
 800a796:	079b      	lsls	r3, r3, #30
 800a798:	f100 8103 	bmi.w	800a9a2 <_printf_float+0x44a>
 800a79c:	68e0      	ldr	r0, [r4, #12]
 800a79e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7a0:	4298      	cmp	r0, r3
 800a7a2:	bfb8      	it	lt
 800a7a4:	4618      	movlt	r0, r3
 800a7a6:	e734      	b.n	800a612 <_printf_float+0xba>
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	4652      	mov	r2, sl
 800a7ac:	4631      	mov	r1, r6
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	47b8      	blx	r7
 800a7b2:	3001      	adds	r0, #1
 800a7b4:	f43f af2b 	beq.w	800a60e <_printf_float+0xb6>
 800a7b8:	f109 0901 	add.w	r9, r9, #1
 800a7bc:	e7e8      	b.n	800a790 <_printf_float+0x238>
 800a7be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	dc39      	bgt.n	800a838 <_printf_float+0x2e0>
 800a7c4:	4a1b      	ldr	r2, [pc, #108]	@ (800a834 <_printf_float+0x2dc>)
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	4631      	mov	r1, r6
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	47b8      	blx	r7
 800a7ce:	3001      	adds	r0, #1
 800a7d0:	f43f af1d 	beq.w	800a60e <_printf_float+0xb6>
 800a7d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a7d8:	ea59 0303 	orrs.w	r3, r9, r3
 800a7dc:	d102      	bne.n	800a7e4 <_printf_float+0x28c>
 800a7de:	6823      	ldr	r3, [r4, #0]
 800a7e0:	07d9      	lsls	r1, r3, #31
 800a7e2:	d5d7      	bpl.n	800a794 <_printf_float+0x23c>
 800a7e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7e8:	4631      	mov	r1, r6
 800a7ea:	4628      	mov	r0, r5
 800a7ec:	47b8      	blx	r7
 800a7ee:	3001      	adds	r0, #1
 800a7f0:	f43f af0d 	beq.w	800a60e <_printf_float+0xb6>
 800a7f4:	f04f 0a00 	mov.w	sl, #0
 800a7f8:	f104 0b1a 	add.w	fp, r4, #26
 800a7fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7fe:	425b      	negs	r3, r3
 800a800:	4553      	cmp	r3, sl
 800a802:	dc01      	bgt.n	800a808 <_printf_float+0x2b0>
 800a804:	464b      	mov	r3, r9
 800a806:	e793      	b.n	800a730 <_printf_float+0x1d8>
 800a808:	2301      	movs	r3, #1
 800a80a:	465a      	mov	r2, fp
 800a80c:	4631      	mov	r1, r6
 800a80e:	4628      	mov	r0, r5
 800a810:	47b8      	blx	r7
 800a812:	3001      	adds	r0, #1
 800a814:	f43f aefb 	beq.w	800a60e <_printf_float+0xb6>
 800a818:	f10a 0a01 	add.w	sl, sl, #1
 800a81c:	e7ee      	b.n	800a7fc <_printf_float+0x2a4>
 800a81e:	bf00      	nop
 800a820:	7fefffff 	.word	0x7fefffff
 800a824:	0800d968 	.word	0x0800d968
 800a828:	0800d964 	.word	0x0800d964
 800a82c:	0800d970 	.word	0x0800d970
 800a830:	0800d96c 	.word	0x0800d96c
 800a834:	0800d974 	.word	0x0800d974
 800a838:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a83a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a83e:	4553      	cmp	r3, sl
 800a840:	bfa8      	it	ge
 800a842:	4653      	movge	r3, sl
 800a844:	2b00      	cmp	r3, #0
 800a846:	4699      	mov	r9, r3
 800a848:	dc36      	bgt.n	800a8b8 <_printf_float+0x360>
 800a84a:	f04f 0b00 	mov.w	fp, #0
 800a84e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a852:	f104 021a 	add.w	r2, r4, #26
 800a856:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a858:	9306      	str	r3, [sp, #24]
 800a85a:	eba3 0309 	sub.w	r3, r3, r9
 800a85e:	455b      	cmp	r3, fp
 800a860:	dc31      	bgt.n	800a8c6 <_printf_float+0x36e>
 800a862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a864:	459a      	cmp	sl, r3
 800a866:	dc3a      	bgt.n	800a8de <_printf_float+0x386>
 800a868:	6823      	ldr	r3, [r4, #0]
 800a86a:	07da      	lsls	r2, r3, #31
 800a86c:	d437      	bmi.n	800a8de <_printf_float+0x386>
 800a86e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a870:	ebaa 0903 	sub.w	r9, sl, r3
 800a874:	9b06      	ldr	r3, [sp, #24]
 800a876:	ebaa 0303 	sub.w	r3, sl, r3
 800a87a:	4599      	cmp	r9, r3
 800a87c:	bfa8      	it	ge
 800a87e:	4699      	movge	r9, r3
 800a880:	f1b9 0f00 	cmp.w	r9, #0
 800a884:	dc33      	bgt.n	800a8ee <_printf_float+0x396>
 800a886:	f04f 0800 	mov.w	r8, #0
 800a88a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a88e:	f104 0b1a 	add.w	fp, r4, #26
 800a892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a894:	ebaa 0303 	sub.w	r3, sl, r3
 800a898:	eba3 0309 	sub.w	r3, r3, r9
 800a89c:	4543      	cmp	r3, r8
 800a89e:	f77f af79 	ble.w	800a794 <_printf_float+0x23c>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	465a      	mov	r2, fp
 800a8a6:	4631      	mov	r1, r6
 800a8a8:	4628      	mov	r0, r5
 800a8aa:	47b8      	blx	r7
 800a8ac:	3001      	adds	r0, #1
 800a8ae:	f43f aeae 	beq.w	800a60e <_printf_float+0xb6>
 800a8b2:	f108 0801 	add.w	r8, r8, #1
 800a8b6:	e7ec      	b.n	800a892 <_printf_float+0x33a>
 800a8b8:	4642      	mov	r2, r8
 800a8ba:	4631      	mov	r1, r6
 800a8bc:	4628      	mov	r0, r5
 800a8be:	47b8      	blx	r7
 800a8c0:	3001      	adds	r0, #1
 800a8c2:	d1c2      	bne.n	800a84a <_printf_float+0x2f2>
 800a8c4:	e6a3      	b.n	800a60e <_printf_float+0xb6>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	4631      	mov	r1, r6
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	9206      	str	r2, [sp, #24]
 800a8ce:	47b8      	blx	r7
 800a8d0:	3001      	adds	r0, #1
 800a8d2:	f43f ae9c 	beq.w	800a60e <_printf_float+0xb6>
 800a8d6:	9a06      	ldr	r2, [sp, #24]
 800a8d8:	f10b 0b01 	add.w	fp, fp, #1
 800a8dc:	e7bb      	b.n	800a856 <_printf_float+0x2fe>
 800a8de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8e2:	4631      	mov	r1, r6
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	47b8      	blx	r7
 800a8e8:	3001      	adds	r0, #1
 800a8ea:	d1c0      	bne.n	800a86e <_printf_float+0x316>
 800a8ec:	e68f      	b.n	800a60e <_printf_float+0xb6>
 800a8ee:	9a06      	ldr	r2, [sp, #24]
 800a8f0:	464b      	mov	r3, r9
 800a8f2:	4442      	add	r2, r8
 800a8f4:	4631      	mov	r1, r6
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	47b8      	blx	r7
 800a8fa:	3001      	adds	r0, #1
 800a8fc:	d1c3      	bne.n	800a886 <_printf_float+0x32e>
 800a8fe:	e686      	b.n	800a60e <_printf_float+0xb6>
 800a900:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a904:	f1ba 0f01 	cmp.w	sl, #1
 800a908:	dc01      	bgt.n	800a90e <_printf_float+0x3b6>
 800a90a:	07db      	lsls	r3, r3, #31
 800a90c:	d536      	bpl.n	800a97c <_printf_float+0x424>
 800a90e:	2301      	movs	r3, #1
 800a910:	4642      	mov	r2, r8
 800a912:	4631      	mov	r1, r6
 800a914:	4628      	mov	r0, r5
 800a916:	47b8      	blx	r7
 800a918:	3001      	adds	r0, #1
 800a91a:	f43f ae78 	beq.w	800a60e <_printf_float+0xb6>
 800a91e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a922:	4631      	mov	r1, r6
 800a924:	4628      	mov	r0, r5
 800a926:	47b8      	blx	r7
 800a928:	3001      	adds	r0, #1
 800a92a:	f43f ae70 	beq.w	800a60e <_printf_float+0xb6>
 800a92e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a932:	2200      	movs	r2, #0
 800a934:	2300      	movs	r3, #0
 800a936:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a93a:	f7f6 f8c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a93e:	b9c0      	cbnz	r0, 800a972 <_printf_float+0x41a>
 800a940:	4653      	mov	r3, sl
 800a942:	f108 0201 	add.w	r2, r8, #1
 800a946:	4631      	mov	r1, r6
 800a948:	4628      	mov	r0, r5
 800a94a:	47b8      	blx	r7
 800a94c:	3001      	adds	r0, #1
 800a94e:	d10c      	bne.n	800a96a <_printf_float+0x412>
 800a950:	e65d      	b.n	800a60e <_printf_float+0xb6>
 800a952:	2301      	movs	r3, #1
 800a954:	465a      	mov	r2, fp
 800a956:	4631      	mov	r1, r6
 800a958:	4628      	mov	r0, r5
 800a95a:	47b8      	blx	r7
 800a95c:	3001      	adds	r0, #1
 800a95e:	f43f ae56 	beq.w	800a60e <_printf_float+0xb6>
 800a962:	f108 0801 	add.w	r8, r8, #1
 800a966:	45d0      	cmp	r8, sl
 800a968:	dbf3      	blt.n	800a952 <_printf_float+0x3fa>
 800a96a:	464b      	mov	r3, r9
 800a96c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a970:	e6df      	b.n	800a732 <_printf_float+0x1da>
 800a972:	f04f 0800 	mov.w	r8, #0
 800a976:	f104 0b1a 	add.w	fp, r4, #26
 800a97a:	e7f4      	b.n	800a966 <_printf_float+0x40e>
 800a97c:	2301      	movs	r3, #1
 800a97e:	4642      	mov	r2, r8
 800a980:	e7e1      	b.n	800a946 <_printf_float+0x3ee>
 800a982:	2301      	movs	r3, #1
 800a984:	464a      	mov	r2, r9
 800a986:	4631      	mov	r1, r6
 800a988:	4628      	mov	r0, r5
 800a98a:	47b8      	blx	r7
 800a98c:	3001      	adds	r0, #1
 800a98e:	f43f ae3e 	beq.w	800a60e <_printf_float+0xb6>
 800a992:	f108 0801 	add.w	r8, r8, #1
 800a996:	68e3      	ldr	r3, [r4, #12]
 800a998:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a99a:	1a5b      	subs	r3, r3, r1
 800a99c:	4543      	cmp	r3, r8
 800a99e:	dcf0      	bgt.n	800a982 <_printf_float+0x42a>
 800a9a0:	e6fc      	b.n	800a79c <_printf_float+0x244>
 800a9a2:	f04f 0800 	mov.w	r8, #0
 800a9a6:	f104 0919 	add.w	r9, r4, #25
 800a9aa:	e7f4      	b.n	800a996 <_printf_float+0x43e>

0800a9ac <_printf_common>:
 800a9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9b0:	4616      	mov	r6, r2
 800a9b2:	4698      	mov	r8, r3
 800a9b4:	688a      	ldr	r2, [r1, #8]
 800a9b6:	690b      	ldr	r3, [r1, #16]
 800a9b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	bfb8      	it	lt
 800a9c0:	4613      	movlt	r3, r2
 800a9c2:	6033      	str	r3, [r6, #0]
 800a9c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a9c8:	4607      	mov	r7, r0
 800a9ca:	460c      	mov	r4, r1
 800a9cc:	b10a      	cbz	r2, 800a9d2 <_printf_common+0x26>
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	6033      	str	r3, [r6, #0]
 800a9d2:	6823      	ldr	r3, [r4, #0]
 800a9d4:	0699      	lsls	r1, r3, #26
 800a9d6:	bf42      	ittt	mi
 800a9d8:	6833      	ldrmi	r3, [r6, #0]
 800a9da:	3302      	addmi	r3, #2
 800a9dc:	6033      	strmi	r3, [r6, #0]
 800a9de:	6825      	ldr	r5, [r4, #0]
 800a9e0:	f015 0506 	ands.w	r5, r5, #6
 800a9e4:	d106      	bne.n	800a9f4 <_printf_common+0x48>
 800a9e6:	f104 0a19 	add.w	sl, r4, #25
 800a9ea:	68e3      	ldr	r3, [r4, #12]
 800a9ec:	6832      	ldr	r2, [r6, #0]
 800a9ee:	1a9b      	subs	r3, r3, r2
 800a9f0:	42ab      	cmp	r3, r5
 800a9f2:	dc26      	bgt.n	800aa42 <_printf_common+0x96>
 800a9f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a9f8:	6822      	ldr	r2, [r4, #0]
 800a9fa:	3b00      	subs	r3, #0
 800a9fc:	bf18      	it	ne
 800a9fe:	2301      	movne	r3, #1
 800aa00:	0692      	lsls	r2, r2, #26
 800aa02:	d42b      	bmi.n	800aa5c <_printf_common+0xb0>
 800aa04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa08:	4641      	mov	r1, r8
 800aa0a:	4638      	mov	r0, r7
 800aa0c:	47c8      	blx	r9
 800aa0e:	3001      	adds	r0, #1
 800aa10:	d01e      	beq.n	800aa50 <_printf_common+0xa4>
 800aa12:	6823      	ldr	r3, [r4, #0]
 800aa14:	6922      	ldr	r2, [r4, #16]
 800aa16:	f003 0306 	and.w	r3, r3, #6
 800aa1a:	2b04      	cmp	r3, #4
 800aa1c:	bf02      	ittt	eq
 800aa1e:	68e5      	ldreq	r5, [r4, #12]
 800aa20:	6833      	ldreq	r3, [r6, #0]
 800aa22:	1aed      	subeq	r5, r5, r3
 800aa24:	68a3      	ldr	r3, [r4, #8]
 800aa26:	bf0c      	ite	eq
 800aa28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa2c:	2500      	movne	r5, #0
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	bfc4      	itt	gt
 800aa32:	1a9b      	subgt	r3, r3, r2
 800aa34:	18ed      	addgt	r5, r5, r3
 800aa36:	2600      	movs	r6, #0
 800aa38:	341a      	adds	r4, #26
 800aa3a:	42b5      	cmp	r5, r6
 800aa3c:	d11a      	bne.n	800aa74 <_printf_common+0xc8>
 800aa3e:	2000      	movs	r0, #0
 800aa40:	e008      	b.n	800aa54 <_printf_common+0xa8>
 800aa42:	2301      	movs	r3, #1
 800aa44:	4652      	mov	r2, sl
 800aa46:	4641      	mov	r1, r8
 800aa48:	4638      	mov	r0, r7
 800aa4a:	47c8      	blx	r9
 800aa4c:	3001      	adds	r0, #1
 800aa4e:	d103      	bne.n	800aa58 <_printf_common+0xac>
 800aa50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa58:	3501      	adds	r5, #1
 800aa5a:	e7c6      	b.n	800a9ea <_printf_common+0x3e>
 800aa5c:	18e1      	adds	r1, r4, r3
 800aa5e:	1c5a      	adds	r2, r3, #1
 800aa60:	2030      	movs	r0, #48	@ 0x30
 800aa62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aa66:	4422      	add	r2, r4
 800aa68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aa6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aa70:	3302      	adds	r3, #2
 800aa72:	e7c7      	b.n	800aa04 <_printf_common+0x58>
 800aa74:	2301      	movs	r3, #1
 800aa76:	4622      	mov	r2, r4
 800aa78:	4641      	mov	r1, r8
 800aa7a:	4638      	mov	r0, r7
 800aa7c:	47c8      	blx	r9
 800aa7e:	3001      	adds	r0, #1
 800aa80:	d0e6      	beq.n	800aa50 <_printf_common+0xa4>
 800aa82:	3601      	adds	r6, #1
 800aa84:	e7d9      	b.n	800aa3a <_printf_common+0x8e>
	...

0800aa88 <_printf_i>:
 800aa88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa8c:	7e0f      	ldrb	r7, [r1, #24]
 800aa8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aa90:	2f78      	cmp	r7, #120	@ 0x78
 800aa92:	4691      	mov	r9, r2
 800aa94:	4680      	mov	r8, r0
 800aa96:	460c      	mov	r4, r1
 800aa98:	469a      	mov	sl, r3
 800aa9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aa9e:	d807      	bhi.n	800aab0 <_printf_i+0x28>
 800aaa0:	2f62      	cmp	r7, #98	@ 0x62
 800aaa2:	d80a      	bhi.n	800aaba <_printf_i+0x32>
 800aaa4:	2f00      	cmp	r7, #0
 800aaa6:	f000 80d1 	beq.w	800ac4c <_printf_i+0x1c4>
 800aaaa:	2f58      	cmp	r7, #88	@ 0x58
 800aaac:	f000 80b8 	beq.w	800ac20 <_printf_i+0x198>
 800aab0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aab4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aab8:	e03a      	b.n	800ab30 <_printf_i+0xa8>
 800aaba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aabe:	2b15      	cmp	r3, #21
 800aac0:	d8f6      	bhi.n	800aab0 <_printf_i+0x28>
 800aac2:	a101      	add	r1, pc, #4	@ (adr r1, 800aac8 <_printf_i+0x40>)
 800aac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aac8:	0800ab21 	.word	0x0800ab21
 800aacc:	0800ab35 	.word	0x0800ab35
 800aad0:	0800aab1 	.word	0x0800aab1
 800aad4:	0800aab1 	.word	0x0800aab1
 800aad8:	0800aab1 	.word	0x0800aab1
 800aadc:	0800aab1 	.word	0x0800aab1
 800aae0:	0800ab35 	.word	0x0800ab35
 800aae4:	0800aab1 	.word	0x0800aab1
 800aae8:	0800aab1 	.word	0x0800aab1
 800aaec:	0800aab1 	.word	0x0800aab1
 800aaf0:	0800aab1 	.word	0x0800aab1
 800aaf4:	0800ac33 	.word	0x0800ac33
 800aaf8:	0800ab5f 	.word	0x0800ab5f
 800aafc:	0800abed 	.word	0x0800abed
 800ab00:	0800aab1 	.word	0x0800aab1
 800ab04:	0800aab1 	.word	0x0800aab1
 800ab08:	0800ac55 	.word	0x0800ac55
 800ab0c:	0800aab1 	.word	0x0800aab1
 800ab10:	0800ab5f 	.word	0x0800ab5f
 800ab14:	0800aab1 	.word	0x0800aab1
 800ab18:	0800aab1 	.word	0x0800aab1
 800ab1c:	0800abf5 	.word	0x0800abf5
 800ab20:	6833      	ldr	r3, [r6, #0]
 800ab22:	1d1a      	adds	r2, r3, #4
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	6032      	str	r2, [r6, #0]
 800ab28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ab30:	2301      	movs	r3, #1
 800ab32:	e09c      	b.n	800ac6e <_printf_i+0x1e6>
 800ab34:	6833      	ldr	r3, [r6, #0]
 800ab36:	6820      	ldr	r0, [r4, #0]
 800ab38:	1d19      	adds	r1, r3, #4
 800ab3a:	6031      	str	r1, [r6, #0]
 800ab3c:	0606      	lsls	r6, r0, #24
 800ab3e:	d501      	bpl.n	800ab44 <_printf_i+0xbc>
 800ab40:	681d      	ldr	r5, [r3, #0]
 800ab42:	e003      	b.n	800ab4c <_printf_i+0xc4>
 800ab44:	0645      	lsls	r5, r0, #25
 800ab46:	d5fb      	bpl.n	800ab40 <_printf_i+0xb8>
 800ab48:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ab4c:	2d00      	cmp	r5, #0
 800ab4e:	da03      	bge.n	800ab58 <_printf_i+0xd0>
 800ab50:	232d      	movs	r3, #45	@ 0x2d
 800ab52:	426d      	negs	r5, r5
 800ab54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab58:	4858      	ldr	r0, [pc, #352]	@ (800acbc <_printf_i+0x234>)
 800ab5a:	230a      	movs	r3, #10
 800ab5c:	e011      	b.n	800ab82 <_printf_i+0xfa>
 800ab5e:	6821      	ldr	r1, [r4, #0]
 800ab60:	6833      	ldr	r3, [r6, #0]
 800ab62:	0608      	lsls	r0, r1, #24
 800ab64:	f853 5b04 	ldr.w	r5, [r3], #4
 800ab68:	d402      	bmi.n	800ab70 <_printf_i+0xe8>
 800ab6a:	0649      	lsls	r1, r1, #25
 800ab6c:	bf48      	it	mi
 800ab6e:	b2ad      	uxthmi	r5, r5
 800ab70:	2f6f      	cmp	r7, #111	@ 0x6f
 800ab72:	4852      	ldr	r0, [pc, #328]	@ (800acbc <_printf_i+0x234>)
 800ab74:	6033      	str	r3, [r6, #0]
 800ab76:	bf14      	ite	ne
 800ab78:	230a      	movne	r3, #10
 800ab7a:	2308      	moveq	r3, #8
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ab82:	6866      	ldr	r6, [r4, #4]
 800ab84:	60a6      	str	r6, [r4, #8]
 800ab86:	2e00      	cmp	r6, #0
 800ab88:	db05      	blt.n	800ab96 <_printf_i+0x10e>
 800ab8a:	6821      	ldr	r1, [r4, #0]
 800ab8c:	432e      	orrs	r6, r5
 800ab8e:	f021 0104 	bic.w	r1, r1, #4
 800ab92:	6021      	str	r1, [r4, #0]
 800ab94:	d04b      	beq.n	800ac2e <_printf_i+0x1a6>
 800ab96:	4616      	mov	r6, r2
 800ab98:	fbb5 f1f3 	udiv	r1, r5, r3
 800ab9c:	fb03 5711 	mls	r7, r3, r1, r5
 800aba0:	5dc7      	ldrb	r7, [r0, r7]
 800aba2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aba6:	462f      	mov	r7, r5
 800aba8:	42bb      	cmp	r3, r7
 800abaa:	460d      	mov	r5, r1
 800abac:	d9f4      	bls.n	800ab98 <_printf_i+0x110>
 800abae:	2b08      	cmp	r3, #8
 800abb0:	d10b      	bne.n	800abca <_printf_i+0x142>
 800abb2:	6823      	ldr	r3, [r4, #0]
 800abb4:	07df      	lsls	r7, r3, #31
 800abb6:	d508      	bpl.n	800abca <_printf_i+0x142>
 800abb8:	6923      	ldr	r3, [r4, #16]
 800abba:	6861      	ldr	r1, [r4, #4]
 800abbc:	4299      	cmp	r1, r3
 800abbe:	bfde      	ittt	le
 800abc0:	2330      	movle	r3, #48	@ 0x30
 800abc2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800abc6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800abca:	1b92      	subs	r2, r2, r6
 800abcc:	6122      	str	r2, [r4, #16]
 800abce:	f8cd a000 	str.w	sl, [sp]
 800abd2:	464b      	mov	r3, r9
 800abd4:	aa03      	add	r2, sp, #12
 800abd6:	4621      	mov	r1, r4
 800abd8:	4640      	mov	r0, r8
 800abda:	f7ff fee7 	bl	800a9ac <_printf_common>
 800abde:	3001      	adds	r0, #1
 800abe0:	d14a      	bne.n	800ac78 <_printf_i+0x1f0>
 800abe2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800abe6:	b004      	add	sp, #16
 800abe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abec:	6823      	ldr	r3, [r4, #0]
 800abee:	f043 0320 	orr.w	r3, r3, #32
 800abf2:	6023      	str	r3, [r4, #0]
 800abf4:	4832      	ldr	r0, [pc, #200]	@ (800acc0 <_printf_i+0x238>)
 800abf6:	2778      	movs	r7, #120	@ 0x78
 800abf8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800abfc:	6823      	ldr	r3, [r4, #0]
 800abfe:	6831      	ldr	r1, [r6, #0]
 800ac00:	061f      	lsls	r7, r3, #24
 800ac02:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac06:	d402      	bmi.n	800ac0e <_printf_i+0x186>
 800ac08:	065f      	lsls	r7, r3, #25
 800ac0a:	bf48      	it	mi
 800ac0c:	b2ad      	uxthmi	r5, r5
 800ac0e:	6031      	str	r1, [r6, #0]
 800ac10:	07d9      	lsls	r1, r3, #31
 800ac12:	bf44      	itt	mi
 800ac14:	f043 0320 	orrmi.w	r3, r3, #32
 800ac18:	6023      	strmi	r3, [r4, #0]
 800ac1a:	b11d      	cbz	r5, 800ac24 <_printf_i+0x19c>
 800ac1c:	2310      	movs	r3, #16
 800ac1e:	e7ad      	b.n	800ab7c <_printf_i+0xf4>
 800ac20:	4826      	ldr	r0, [pc, #152]	@ (800acbc <_printf_i+0x234>)
 800ac22:	e7e9      	b.n	800abf8 <_printf_i+0x170>
 800ac24:	6823      	ldr	r3, [r4, #0]
 800ac26:	f023 0320 	bic.w	r3, r3, #32
 800ac2a:	6023      	str	r3, [r4, #0]
 800ac2c:	e7f6      	b.n	800ac1c <_printf_i+0x194>
 800ac2e:	4616      	mov	r6, r2
 800ac30:	e7bd      	b.n	800abae <_printf_i+0x126>
 800ac32:	6833      	ldr	r3, [r6, #0]
 800ac34:	6825      	ldr	r5, [r4, #0]
 800ac36:	6961      	ldr	r1, [r4, #20]
 800ac38:	1d18      	adds	r0, r3, #4
 800ac3a:	6030      	str	r0, [r6, #0]
 800ac3c:	062e      	lsls	r6, r5, #24
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	d501      	bpl.n	800ac46 <_printf_i+0x1be>
 800ac42:	6019      	str	r1, [r3, #0]
 800ac44:	e002      	b.n	800ac4c <_printf_i+0x1c4>
 800ac46:	0668      	lsls	r0, r5, #25
 800ac48:	d5fb      	bpl.n	800ac42 <_printf_i+0x1ba>
 800ac4a:	8019      	strh	r1, [r3, #0]
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	6123      	str	r3, [r4, #16]
 800ac50:	4616      	mov	r6, r2
 800ac52:	e7bc      	b.n	800abce <_printf_i+0x146>
 800ac54:	6833      	ldr	r3, [r6, #0]
 800ac56:	1d1a      	adds	r2, r3, #4
 800ac58:	6032      	str	r2, [r6, #0]
 800ac5a:	681e      	ldr	r6, [r3, #0]
 800ac5c:	6862      	ldr	r2, [r4, #4]
 800ac5e:	2100      	movs	r1, #0
 800ac60:	4630      	mov	r0, r6
 800ac62:	f7f5 fab5 	bl	80001d0 <memchr>
 800ac66:	b108      	cbz	r0, 800ac6c <_printf_i+0x1e4>
 800ac68:	1b80      	subs	r0, r0, r6
 800ac6a:	6060      	str	r0, [r4, #4]
 800ac6c:	6863      	ldr	r3, [r4, #4]
 800ac6e:	6123      	str	r3, [r4, #16]
 800ac70:	2300      	movs	r3, #0
 800ac72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac76:	e7aa      	b.n	800abce <_printf_i+0x146>
 800ac78:	6923      	ldr	r3, [r4, #16]
 800ac7a:	4632      	mov	r2, r6
 800ac7c:	4649      	mov	r1, r9
 800ac7e:	4640      	mov	r0, r8
 800ac80:	47d0      	blx	sl
 800ac82:	3001      	adds	r0, #1
 800ac84:	d0ad      	beq.n	800abe2 <_printf_i+0x15a>
 800ac86:	6823      	ldr	r3, [r4, #0]
 800ac88:	079b      	lsls	r3, r3, #30
 800ac8a:	d413      	bmi.n	800acb4 <_printf_i+0x22c>
 800ac8c:	68e0      	ldr	r0, [r4, #12]
 800ac8e:	9b03      	ldr	r3, [sp, #12]
 800ac90:	4298      	cmp	r0, r3
 800ac92:	bfb8      	it	lt
 800ac94:	4618      	movlt	r0, r3
 800ac96:	e7a6      	b.n	800abe6 <_printf_i+0x15e>
 800ac98:	2301      	movs	r3, #1
 800ac9a:	4632      	mov	r2, r6
 800ac9c:	4649      	mov	r1, r9
 800ac9e:	4640      	mov	r0, r8
 800aca0:	47d0      	blx	sl
 800aca2:	3001      	adds	r0, #1
 800aca4:	d09d      	beq.n	800abe2 <_printf_i+0x15a>
 800aca6:	3501      	adds	r5, #1
 800aca8:	68e3      	ldr	r3, [r4, #12]
 800acaa:	9903      	ldr	r1, [sp, #12]
 800acac:	1a5b      	subs	r3, r3, r1
 800acae:	42ab      	cmp	r3, r5
 800acb0:	dcf2      	bgt.n	800ac98 <_printf_i+0x210>
 800acb2:	e7eb      	b.n	800ac8c <_printf_i+0x204>
 800acb4:	2500      	movs	r5, #0
 800acb6:	f104 0619 	add.w	r6, r4, #25
 800acba:	e7f5      	b.n	800aca8 <_printf_i+0x220>
 800acbc:	0800d976 	.word	0x0800d976
 800acc0:	0800d987 	.word	0x0800d987

0800acc4 <std>:
 800acc4:	2300      	movs	r3, #0
 800acc6:	b510      	push	{r4, lr}
 800acc8:	4604      	mov	r4, r0
 800acca:	e9c0 3300 	strd	r3, r3, [r0]
 800acce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800acd2:	6083      	str	r3, [r0, #8]
 800acd4:	8181      	strh	r1, [r0, #12]
 800acd6:	6643      	str	r3, [r0, #100]	@ 0x64
 800acd8:	81c2      	strh	r2, [r0, #14]
 800acda:	6183      	str	r3, [r0, #24]
 800acdc:	4619      	mov	r1, r3
 800acde:	2208      	movs	r2, #8
 800ace0:	305c      	adds	r0, #92	@ 0x5c
 800ace2:	f000 f916 	bl	800af12 <memset>
 800ace6:	4b0d      	ldr	r3, [pc, #52]	@ (800ad1c <std+0x58>)
 800ace8:	6263      	str	r3, [r4, #36]	@ 0x24
 800acea:	4b0d      	ldr	r3, [pc, #52]	@ (800ad20 <std+0x5c>)
 800acec:	62a3      	str	r3, [r4, #40]	@ 0x28
 800acee:	4b0d      	ldr	r3, [pc, #52]	@ (800ad24 <std+0x60>)
 800acf0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800acf2:	4b0d      	ldr	r3, [pc, #52]	@ (800ad28 <std+0x64>)
 800acf4:	6323      	str	r3, [r4, #48]	@ 0x30
 800acf6:	4b0d      	ldr	r3, [pc, #52]	@ (800ad2c <std+0x68>)
 800acf8:	6224      	str	r4, [r4, #32]
 800acfa:	429c      	cmp	r4, r3
 800acfc:	d006      	beq.n	800ad0c <std+0x48>
 800acfe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ad02:	4294      	cmp	r4, r2
 800ad04:	d002      	beq.n	800ad0c <std+0x48>
 800ad06:	33d0      	adds	r3, #208	@ 0xd0
 800ad08:	429c      	cmp	r4, r3
 800ad0a:	d105      	bne.n	800ad18 <std+0x54>
 800ad0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ad10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad14:	f000 b9d8 	b.w	800b0c8 <__retarget_lock_init_recursive>
 800ad18:	bd10      	pop	{r4, pc}
 800ad1a:	bf00      	nop
 800ad1c:	0800ae8d 	.word	0x0800ae8d
 800ad20:	0800aeaf 	.word	0x0800aeaf
 800ad24:	0800aee7 	.word	0x0800aee7
 800ad28:	0800af0b 	.word	0x0800af0b
 800ad2c:	20001d94 	.word	0x20001d94

0800ad30 <stdio_exit_handler>:
 800ad30:	4a02      	ldr	r2, [pc, #8]	@ (800ad3c <stdio_exit_handler+0xc>)
 800ad32:	4903      	ldr	r1, [pc, #12]	@ (800ad40 <stdio_exit_handler+0x10>)
 800ad34:	4803      	ldr	r0, [pc, #12]	@ (800ad44 <stdio_exit_handler+0x14>)
 800ad36:	f000 b869 	b.w	800ae0c <_fwalk_sglue>
 800ad3a:	bf00      	nop
 800ad3c:	20000010 	.word	0x20000010
 800ad40:	0800ca4d 	.word	0x0800ca4d
 800ad44:	20000020 	.word	0x20000020

0800ad48 <cleanup_stdio>:
 800ad48:	6841      	ldr	r1, [r0, #4]
 800ad4a:	4b0c      	ldr	r3, [pc, #48]	@ (800ad7c <cleanup_stdio+0x34>)
 800ad4c:	4299      	cmp	r1, r3
 800ad4e:	b510      	push	{r4, lr}
 800ad50:	4604      	mov	r4, r0
 800ad52:	d001      	beq.n	800ad58 <cleanup_stdio+0x10>
 800ad54:	f001 fe7a 	bl	800ca4c <_fflush_r>
 800ad58:	68a1      	ldr	r1, [r4, #8]
 800ad5a:	4b09      	ldr	r3, [pc, #36]	@ (800ad80 <cleanup_stdio+0x38>)
 800ad5c:	4299      	cmp	r1, r3
 800ad5e:	d002      	beq.n	800ad66 <cleanup_stdio+0x1e>
 800ad60:	4620      	mov	r0, r4
 800ad62:	f001 fe73 	bl	800ca4c <_fflush_r>
 800ad66:	68e1      	ldr	r1, [r4, #12]
 800ad68:	4b06      	ldr	r3, [pc, #24]	@ (800ad84 <cleanup_stdio+0x3c>)
 800ad6a:	4299      	cmp	r1, r3
 800ad6c:	d004      	beq.n	800ad78 <cleanup_stdio+0x30>
 800ad6e:	4620      	mov	r0, r4
 800ad70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad74:	f001 be6a 	b.w	800ca4c <_fflush_r>
 800ad78:	bd10      	pop	{r4, pc}
 800ad7a:	bf00      	nop
 800ad7c:	20001d94 	.word	0x20001d94
 800ad80:	20001dfc 	.word	0x20001dfc
 800ad84:	20001e64 	.word	0x20001e64

0800ad88 <global_stdio_init.part.0>:
 800ad88:	b510      	push	{r4, lr}
 800ad8a:	4b0b      	ldr	r3, [pc, #44]	@ (800adb8 <global_stdio_init.part.0+0x30>)
 800ad8c:	4c0b      	ldr	r4, [pc, #44]	@ (800adbc <global_stdio_init.part.0+0x34>)
 800ad8e:	4a0c      	ldr	r2, [pc, #48]	@ (800adc0 <global_stdio_init.part.0+0x38>)
 800ad90:	601a      	str	r2, [r3, #0]
 800ad92:	4620      	mov	r0, r4
 800ad94:	2200      	movs	r2, #0
 800ad96:	2104      	movs	r1, #4
 800ad98:	f7ff ff94 	bl	800acc4 <std>
 800ad9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ada0:	2201      	movs	r2, #1
 800ada2:	2109      	movs	r1, #9
 800ada4:	f7ff ff8e 	bl	800acc4 <std>
 800ada8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800adac:	2202      	movs	r2, #2
 800adae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adb2:	2112      	movs	r1, #18
 800adb4:	f7ff bf86 	b.w	800acc4 <std>
 800adb8:	20001ecc 	.word	0x20001ecc
 800adbc:	20001d94 	.word	0x20001d94
 800adc0:	0800ad31 	.word	0x0800ad31

0800adc4 <__sfp_lock_acquire>:
 800adc4:	4801      	ldr	r0, [pc, #4]	@ (800adcc <__sfp_lock_acquire+0x8>)
 800adc6:	f000 b980 	b.w	800b0ca <__retarget_lock_acquire_recursive>
 800adca:	bf00      	nop
 800adcc:	20001ed5 	.word	0x20001ed5

0800add0 <__sfp_lock_release>:
 800add0:	4801      	ldr	r0, [pc, #4]	@ (800add8 <__sfp_lock_release+0x8>)
 800add2:	f000 b97b 	b.w	800b0cc <__retarget_lock_release_recursive>
 800add6:	bf00      	nop
 800add8:	20001ed5 	.word	0x20001ed5

0800addc <__sinit>:
 800addc:	b510      	push	{r4, lr}
 800adde:	4604      	mov	r4, r0
 800ade0:	f7ff fff0 	bl	800adc4 <__sfp_lock_acquire>
 800ade4:	6a23      	ldr	r3, [r4, #32]
 800ade6:	b11b      	cbz	r3, 800adf0 <__sinit+0x14>
 800ade8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adec:	f7ff bff0 	b.w	800add0 <__sfp_lock_release>
 800adf0:	4b04      	ldr	r3, [pc, #16]	@ (800ae04 <__sinit+0x28>)
 800adf2:	6223      	str	r3, [r4, #32]
 800adf4:	4b04      	ldr	r3, [pc, #16]	@ (800ae08 <__sinit+0x2c>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d1f5      	bne.n	800ade8 <__sinit+0xc>
 800adfc:	f7ff ffc4 	bl	800ad88 <global_stdio_init.part.0>
 800ae00:	e7f2      	b.n	800ade8 <__sinit+0xc>
 800ae02:	bf00      	nop
 800ae04:	0800ad49 	.word	0x0800ad49
 800ae08:	20001ecc 	.word	0x20001ecc

0800ae0c <_fwalk_sglue>:
 800ae0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae10:	4607      	mov	r7, r0
 800ae12:	4688      	mov	r8, r1
 800ae14:	4614      	mov	r4, r2
 800ae16:	2600      	movs	r6, #0
 800ae18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae1c:	f1b9 0901 	subs.w	r9, r9, #1
 800ae20:	d505      	bpl.n	800ae2e <_fwalk_sglue+0x22>
 800ae22:	6824      	ldr	r4, [r4, #0]
 800ae24:	2c00      	cmp	r4, #0
 800ae26:	d1f7      	bne.n	800ae18 <_fwalk_sglue+0xc>
 800ae28:	4630      	mov	r0, r6
 800ae2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae2e:	89ab      	ldrh	r3, [r5, #12]
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d907      	bls.n	800ae44 <_fwalk_sglue+0x38>
 800ae34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae38:	3301      	adds	r3, #1
 800ae3a:	d003      	beq.n	800ae44 <_fwalk_sglue+0x38>
 800ae3c:	4629      	mov	r1, r5
 800ae3e:	4638      	mov	r0, r7
 800ae40:	47c0      	blx	r8
 800ae42:	4306      	orrs	r6, r0
 800ae44:	3568      	adds	r5, #104	@ 0x68
 800ae46:	e7e9      	b.n	800ae1c <_fwalk_sglue+0x10>

0800ae48 <siprintf>:
 800ae48:	b40e      	push	{r1, r2, r3}
 800ae4a:	b510      	push	{r4, lr}
 800ae4c:	b09d      	sub	sp, #116	@ 0x74
 800ae4e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ae50:	9002      	str	r0, [sp, #8]
 800ae52:	9006      	str	r0, [sp, #24]
 800ae54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ae58:	480a      	ldr	r0, [pc, #40]	@ (800ae84 <siprintf+0x3c>)
 800ae5a:	9107      	str	r1, [sp, #28]
 800ae5c:	9104      	str	r1, [sp, #16]
 800ae5e:	490a      	ldr	r1, [pc, #40]	@ (800ae88 <siprintf+0x40>)
 800ae60:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae64:	9105      	str	r1, [sp, #20]
 800ae66:	2400      	movs	r4, #0
 800ae68:	a902      	add	r1, sp, #8
 800ae6a:	6800      	ldr	r0, [r0, #0]
 800ae6c:	9301      	str	r3, [sp, #4]
 800ae6e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ae70:	f001 fc6c 	bl	800c74c <_svfiprintf_r>
 800ae74:	9b02      	ldr	r3, [sp, #8]
 800ae76:	701c      	strb	r4, [r3, #0]
 800ae78:	b01d      	add	sp, #116	@ 0x74
 800ae7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae7e:	b003      	add	sp, #12
 800ae80:	4770      	bx	lr
 800ae82:	bf00      	nop
 800ae84:	2000001c 	.word	0x2000001c
 800ae88:	ffff0208 	.word	0xffff0208

0800ae8c <__sread>:
 800ae8c:	b510      	push	{r4, lr}
 800ae8e:	460c      	mov	r4, r1
 800ae90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae94:	f000 f8ca 	bl	800b02c <_read_r>
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	bfab      	itete	ge
 800ae9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ae9e:	89a3      	ldrhlt	r3, [r4, #12]
 800aea0:	181b      	addge	r3, r3, r0
 800aea2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aea6:	bfac      	ite	ge
 800aea8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aeaa:	81a3      	strhlt	r3, [r4, #12]
 800aeac:	bd10      	pop	{r4, pc}

0800aeae <__swrite>:
 800aeae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeb2:	461f      	mov	r7, r3
 800aeb4:	898b      	ldrh	r3, [r1, #12]
 800aeb6:	05db      	lsls	r3, r3, #23
 800aeb8:	4605      	mov	r5, r0
 800aeba:	460c      	mov	r4, r1
 800aebc:	4616      	mov	r6, r2
 800aebe:	d505      	bpl.n	800aecc <__swrite+0x1e>
 800aec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aec4:	2302      	movs	r3, #2
 800aec6:	2200      	movs	r2, #0
 800aec8:	f000 f89e 	bl	800b008 <_lseek_r>
 800aecc:	89a3      	ldrh	r3, [r4, #12]
 800aece:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aed2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aed6:	81a3      	strh	r3, [r4, #12]
 800aed8:	4632      	mov	r2, r6
 800aeda:	463b      	mov	r3, r7
 800aedc:	4628      	mov	r0, r5
 800aede:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aee2:	f000 b8b5 	b.w	800b050 <_write_r>

0800aee6 <__sseek>:
 800aee6:	b510      	push	{r4, lr}
 800aee8:	460c      	mov	r4, r1
 800aeea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeee:	f000 f88b 	bl	800b008 <_lseek_r>
 800aef2:	1c43      	adds	r3, r0, #1
 800aef4:	89a3      	ldrh	r3, [r4, #12]
 800aef6:	bf15      	itete	ne
 800aef8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aefa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aefe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800af02:	81a3      	strheq	r3, [r4, #12]
 800af04:	bf18      	it	ne
 800af06:	81a3      	strhne	r3, [r4, #12]
 800af08:	bd10      	pop	{r4, pc}

0800af0a <__sclose>:
 800af0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af0e:	f000 b80d 	b.w	800af2c <_close_r>

0800af12 <memset>:
 800af12:	4402      	add	r2, r0
 800af14:	4603      	mov	r3, r0
 800af16:	4293      	cmp	r3, r2
 800af18:	d100      	bne.n	800af1c <memset+0xa>
 800af1a:	4770      	bx	lr
 800af1c:	f803 1b01 	strb.w	r1, [r3], #1
 800af20:	e7f9      	b.n	800af16 <memset+0x4>
	...

0800af24 <_localeconv_r>:
 800af24:	4800      	ldr	r0, [pc, #0]	@ (800af28 <_localeconv_r+0x4>)
 800af26:	4770      	bx	lr
 800af28:	2000015c 	.word	0x2000015c

0800af2c <_close_r>:
 800af2c:	b538      	push	{r3, r4, r5, lr}
 800af2e:	4d06      	ldr	r5, [pc, #24]	@ (800af48 <_close_r+0x1c>)
 800af30:	2300      	movs	r3, #0
 800af32:	4604      	mov	r4, r0
 800af34:	4608      	mov	r0, r1
 800af36:	602b      	str	r3, [r5, #0]
 800af38:	f7f7 f89c 	bl	8002074 <_close>
 800af3c:	1c43      	adds	r3, r0, #1
 800af3e:	d102      	bne.n	800af46 <_close_r+0x1a>
 800af40:	682b      	ldr	r3, [r5, #0]
 800af42:	b103      	cbz	r3, 800af46 <_close_r+0x1a>
 800af44:	6023      	str	r3, [r4, #0]
 800af46:	bd38      	pop	{r3, r4, r5, pc}
 800af48:	20001ed0 	.word	0x20001ed0

0800af4c <_reclaim_reent>:
 800af4c:	4b2d      	ldr	r3, [pc, #180]	@ (800b004 <_reclaim_reent+0xb8>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4283      	cmp	r3, r0
 800af52:	b570      	push	{r4, r5, r6, lr}
 800af54:	4604      	mov	r4, r0
 800af56:	d053      	beq.n	800b000 <_reclaim_reent+0xb4>
 800af58:	69c3      	ldr	r3, [r0, #28]
 800af5a:	b31b      	cbz	r3, 800afa4 <_reclaim_reent+0x58>
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	b163      	cbz	r3, 800af7a <_reclaim_reent+0x2e>
 800af60:	2500      	movs	r5, #0
 800af62:	69e3      	ldr	r3, [r4, #28]
 800af64:	68db      	ldr	r3, [r3, #12]
 800af66:	5959      	ldr	r1, [r3, r5]
 800af68:	b9b1      	cbnz	r1, 800af98 <_reclaim_reent+0x4c>
 800af6a:	3504      	adds	r5, #4
 800af6c:	2d80      	cmp	r5, #128	@ 0x80
 800af6e:	d1f8      	bne.n	800af62 <_reclaim_reent+0x16>
 800af70:	69e3      	ldr	r3, [r4, #28]
 800af72:	4620      	mov	r0, r4
 800af74:	68d9      	ldr	r1, [r3, #12]
 800af76:	f000 ff13 	bl	800bda0 <_free_r>
 800af7a:	69e3      	ldr	r3, [r4, #28]
 800af7c:	6819      	ldr	r1, [r3, #0]
 800af7e:	b111      	cbz	r1, 800af86 <_reclaim_reent+0x3a>
 800af80:	4620      	mov	r0, r4
 800af82:	f000 ff0d 	bl	800bda0 <_free_r>
 800af86:	69e3      	ldr	r3, [r4, #28]
 800af88:	689d      	ldr	r5, [r3, #8]
 800af8a:	b15d      	cbz	r5, 800afa4 <_reclaim_reent+0x58>
 800af8c:	4629      	mov	r1, r5
 800af8e:	4620      	mov	r0, r4
 800af90:	682d      	ldr	r5, [r5, #0]
 800af92:	f000 ff05 	bl	800bda0 <_free_r>
 800af96:	e7f8      	b.n	800af8a <_reclaim_reent+0x3e>
 800af98:	680e      	ldr	r6, [r1, #0]
 800af9a:	4620      	mov	r0, r4
 800af9c:	f000 ff00 	bl	800bda0 <_free_r>
 800afa0:	4631      	mov	r1, r6
 800afa2:	e7e1      	b.n	800af68 <_reclaim_reent+0x1c>
 800afa4:	6961      	ldr	r1, [r4, #20]
 800afa6:	b111      	cbz	r1, 800afae <_reclaim_reent+0x62>
 800afa8:	4620      	mov	r0, r4
 800afaa:	f000 fef9 	bl	800bda0 <_free_r>
 800afae:	69e1      	ldr	r1, [r4, #28]
 800afb0:	b111      	cbz	r1, 800afb8 <_reclaim_reent+0x6c>
 800afb2:	4620      	mov	r0, r4
 800afb4:	f000 fef4 	bl	800bda0 <_free_r>
 800afb8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800afba:	b111      	cbz	r1, 800afc2 <_reclaim_reent+0x76>
 800afbc:	4620      	mov	r0, r4
 800afbe:	f000 feef 	bl	800bda0 <_free_r>
 800afc2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800afc4:	b111      	cbz	r1, 800afcc <_reclaim_reent+0x80>
 800afc6:	4620      	mov	r0, r4
 800afc8:	f000 feea 	bl	800bda0 <_free_r>
 800afcc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800afce:	b111      	cbz	r1, 800afd6 <_reclaim_reent+0x8a>
 800afd0:	4620      	mov	r0, r4
 800afd2:	f000 fee5 	bl	800bda0 <_free_r>
 800afd6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800afd8:	b111      	cbz	r1, 800afe0 <_reclaim_reent+0x94>
 800afda:	4620      	mov	r0, r4
 800afdc:	f000 fee0 	bl	800bda0 <_free_r>
 800afe0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800afe2:	b111      	cbz	r1, 800afea <_reclaim_reent+0x9e>
 800afe4:	4620      	mov	r0, r4
 800afe6:	f000 fedb 	bl	800bda0 <_free_r>
 800afea:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800afec:	b111      	cbz	r1, 800aff4 <_reclaim_reent+0xa8>
 800afee:	4620      	mov	r0, r4
 800aff0:	f000 fed6 	bl	800bda0 <_free_r>
 800aff4:	6a23      	ldr	r3, [r4, #32]
 800aff6:	b11b      	cbz	r3, 800b000 <_reclaim_reent+0xb4>
 800aff8:	4620      	mov	r0, r4
 800affa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800affe:	4718      	bx	r3
 800b000:	bd70      	pop	{r4, r5, r6, pc}
 800b002:	bf00      	nop
 800b004:	2000001c 	.word	0x2000001c

0800b008 <_lseek_r>:
 800b008:	b538      	push	{r3, r4, r5, lr}
 800b00a:	4d07      	ldr	r5, [pc, #28]	@ (800b028 <_lseek_r+0x20>)
 800b00c:	4604      	mov	r4, r0
 800b00e:	4608      	mov	r0, r1
 800b010:	4611      	mov	r1, r2
 800b012:	2200      	movs	r2, #0
 800b014:	602a      	str	r2, [r5, #0]
 800b016:	461a      	mov	r2, r3
 800b018:	f7f7 f853 	bl	80020c2 <_lseek>
 800b01c:	1c43      	adds	r3, r0, #1
 800b01e:	d102      	bne.n	800b026 <_lseek_r+0x1e>
 800b020:	682b      	ldr	r3, [r5, #0]
 800b022:	b103      	cbz	r3, 800b026 <_lseek_r+0x1e>
 800b024:	6023      	str	r3, [r4, #0]
 800b026:	bd38      	pop	{r3, r4, r5, pc}
 800b028:	20001ed0 	.word	0x20001ed0

0800b02c <_read_r>:
 800b02c:	b538      	push	{r3, r4, r5, lr}
 800b02e:	4d07      	ldr	r5, [pc, #28]	@ (800b04c <_read_r+0x20>)
 800b030:	4604      	mov	r4, r0
 800b032:	4608      	mov	r0, r1
 800b034:	4611      	mov	r1, r2
 800b036:	2200      	movs	r2, #0
 800b038:	602a      	str	r2, [r5, #0]
 800b03a:	461a      	mov	r2, r3
 800b03c:	f7f6 ffe1 	bl	8002002 <_read>
 800b040:	1c43      	adds	r3, r0, #1
 800b042:	d102      	bne.n	800b04a <_read_r+0x1e>
 800b044:	682b      	ldr	r3, [r5, #0]
 800b046:	b103      	cbz	r3, 800b04a <_read_r+0x1e>
 800b048:	6023      	str	r3, [r4, #0]
 800b04a:	bd38      	pop	{r3, r4, r5, pc}
 800b04c:	20001ed0 	.word	0x20001ed0

0800b050 <_write_r>:
 800b050:	b538      	push	{r3, r4, r5, lr}
 800b052:	4d07      	ldr	r5, [pc, #28]	@ (800b070 <_write_r+0x20>)
 800b054:	4604      	mov	r4, r0
 800b056:	4608      	mov	r0, r1
 800b058:	4611      	mov	r1, r2
 800b05a:	2200      	movs	r2, #0
 800b05c:	602a      	str	r2, [r5, #0]
 800b05e:	461a      	mov	r2, r3
 800b060:	f7f6 ffec 	bl	800203c <_write>
 800b064:	1c43      	adds	r3, r0, #1
 800b066:	d102      	bne.n	800b06e <_write_r+0x1e>
 800b068:	682b      	ldr	r3, [r5, #0]
 800b06a:	b103      	cbz	r3, 800b06e <_write_r+0x1e>
 800b06c:	6023      	str	r3, [r4, #0]
 800b06e:	bd38      	pop	{r3, r4, r5, pc}
 800b070:	20001ed0 	.word	0x20001ed0

0800b074 <__errno>:
 800b074:	4b01      	ldr	r3, [pc, #4]	@ (800b07c <__errno+0x8>)
 800b076:	6818      	ldr	r0, [r3, #0]
 800b078:	4770      	bx	lr
 800b07a:	bf00      	nop
 800b07c:	2000001c 	.word	0x2000001c

0800b080 <__libc_init_array>:
 800b080:	b570      	push	{r4, r5, r6, lr}
 800b082:	4d0d      	ldr	r5, [pc, #52]	@ (800b0b8 <__libc_init_array+0x38>)
 800b084:	4c0d      	ldr	r4, [pc, #52]	@ (800b0bc <__libc_init_array+0x3c>)
 800b086:	1b64      	subs	r4, r4, r5
 800b088:	10a4      	asrs	r4, r4, #2
 800b08a:	2600      	movs	r6, #0
 800b08c:	42a6      	cmp	r6, r4
 800b08e:	d109      	bne.n	800b0a4 <__libc_init_array+0x24>
 800b090:	4d0b      	ldr	r5, [pc, #44]	@ (800b0c0 <__libc_init_array+0x40>)
 800b092:	4c0c      	ldr	r4, [pc, #48]	@ (800b0c4 <__libc_init_array+0x44>)
 800b094:	f002 fad4 	bl	800d640 <_init>
 800b098:	1b64      	subs	r4, r4, r5
 800b09a:	10a4      	asrs	r4, r4, #2
 800b09c:	2600      	movs	r6, #0
 800b09e:	42a6      	cmp	r6, r4
 800b0a0:	d105      	bne.n	800b0ae <__libc_init_array+0x2e>
 800b0a2:	bd70      	pop	{r4, r5, r6, pc}
 800b0a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0a8:	4798      	blx	r3
 800b0aa:	3601      	adds	r6, #1
 800b0ac:	e7ee      	b.n	800b08c <__libc_init_array+0xc>
 800b0ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0b2:	4798      	blx	r3
 800b0b4:	3601      	adds	r6, #1
 800b0b6:	e7f2      	b.n	800b09e <__libc_init_array+0x1e>
 800b0b8:	0800dd58 	.word	0x0800dd58
 800b0bc:	0800dd58 	.word	0x0800dd58
 800b0c0:	0800dd58 	.word	0x0800dd58
 800b0c4:	0800dd5c 	.word	0x0800dd5c

0800b0c8 <__retarget_lock_init_recursive>:
 800b0c8:	4770      	bx	lr

0800b0ca <__retarget_lock_acquire_recursive>:
 800b0ca:	4770      	bx	lr

0800b0cc <__retarget_lock_release_recursive>:
 800b0cc:	4770      	bx	lr

0800b0ce <memcpy>:
 800b0ce:	440a      	add	r2, r1
 800b0d0:	4291      	cmp	r1, r2
 800b0d2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b0d6:	d100      	bne.n	800b0da <memcpy+0xc>
 800b0d8:	4770      	bx	lr
 800b0da:	b510      	push	{r4, lr}
 800b0dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0e4:	4291      	cmp	r1, r2
 800b0e6:	d1f9      	bne.n	800b0dc <memcpy+0xe>
 800b0e8:	bd10      	pop	{r4, pc}

0800b0ea <quorem>:
 800b0ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ee:	6903      	ldr	r3, [r0, #16]
 800b0f0:	690c      	ldr	r4, [r1, #16]
 800b0f2:	42a3      	cmp	r3, r4
 800b0f4:	4607      	mov	r7, r0
 800b0f6:	db7e      	blt.n	800b1f6 <quorem+0x10c>
 800b0f8:	3c01      	subs	r4, #1
 800b0fa:	f101 0814 	add.w	r8, r1, #20
 800b0fe:	00a3      	lsls	r3, r4, #2
 800b100:	f100 0514 	add.w	r5, r0, #20
 800b104:	9300      	str	r3, [sp, #0]
 800b106:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b10a:	9301      	str	r3, [sp, #4]
 800b10c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b110:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b114:	3301      	adds	r3, #1
 800b116:	429a      	cmp	r2, r3
 800b118:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b11c:	fbb2 f6f3 	udiv	r6, r2, r3
 800b120:	d32e      	bcc.n	800b180 <quorem+0x96>
 800b122:	f04f 0a00 	mov.w	sl, #0
 800b126:	46c4      	mov	ip, r8
 800b128:	46ae      	mov	lr, r5
 800b12a:	46d3      	mov	fp, sl
 800b12c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b130:	b298      	uxth	r0, r3
 800b132:	fb06 a000 	mla	r0, r6, r0, sl
 800b136:	0c02      	lsrs	r2, r0, #16
 800b138:	0c1b      	lsrs	r3, r3, #16
 800b13a:	fb06 2303 	mla	r3, r6, r3, r2
 800b13e:	f8de 2000 	ldr.w	r2, [lr]
 800b142:	b280      	uxth	r0, r0
 800b144:	b292      	uxth	r2, r2
 800b146:	1a12      	subs	r2, r2, r0
 800b148:	445a      	add	r2, fp
 800b14a:	f8de 0000 	ldr.w	r0, [lr]
 800b14e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b152:	b29b      	uxth	r3, r3
 800b154:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b158:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b15c:	b292      	uxth	r2, r2
 800b15e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b162:	45e1      	cmp	r9, ip
 800b164:	f84e 2b04 	str.w	r2, [lr], #4
 800b168:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b16c:	d2de      	bcs.n	800b12c <quorem+0x42>
 800b16e:	9b00      	ldr	r3, [sp, #0]
 800b170:	58eb      	ldr	r3, [r5, r3]
 800b172:	b92b      	cbnz	r3, 800b180 <quorem+0x96>
 800b174:	9b01      	ldr	r3, [sp, #4]
 800b176:	3b04      	subs	r3, #4
 800b178:	429d      	cmp	r5, r3
 800b17a:	461a      	mov	r2, r3
 800b17c:	d32f      	bcc.n	800b1de <quorem+0xf4>
 800b17e:	613c      	str	r4, [r7, #16]
 800b180:	4638      	mov	r0, r7
 800b182:	f001 f97f 	bl	800c484 <__mcmp>
 800b186:	2800      	cmp	r0, #0
 800b188:	db25      	blt.n	800b1d6 <quorem+0xec>
 800b18a:	4629      	mov	r1, r5
 800b18c:	2000      	movs	r0, #0
 800b18e:	f858 2b04 	ldr.w	r2, [r8], #4
 800b192:	f8d1 c000 	ldr.w	ip, [r1]
 800b196:	fa1f fe82 	uxth.w	lr, r2
 800b19a:	fa1f f38c 	uxth.w	r3, ip
 800b19e:	eba3 030e 	sub.w	r3, r3, lr
 800b1a2:	4403      	add	r3, r0
 800b1a4:	0c12      	lsrs	r2, r2, #16
 800b1a6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b1aa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b1b4:	45c1      	cmp	r9, r8
 800b1b6:	f841 3b04 	str.w	r3, [r1], #4
 800b1ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b1be:	d2e6      	bcs.n	800b18e <quorem+0xa4>
 800b1c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1c8:	b922      	cbnz	r2, 800b1d4 <quorem+0xea>
 800b1ca:	3b04      	subs	r3, #4
 800b1cc:	429d      	cmp	r5, r3
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	d30b      	bcc.n	800b1ea <quorem+0x100>
 800b1d2:	613c      	str	r4, [r7, #16]
 800b1d4:	3601      	adds	r6, #1
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	b003      	add	sp, #12
 800b1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1de:	6812      	ldr	r2, [r2, #0]
 800b1e0:	3b04      	subs	r3, #4
 800b1e2:	2a00      	cmp	r2, #0
 800b1e4:	d1cb      	bne.n	800b17e <quorem+0x94>
 800b1e6:	3c01      	subs	r4, #1
 800b1e8:	e7c6      	b.n	800b178 <quorem+0x8e>
 800b1ea:	6812      	ldr	r2, [r2, #0]
 800b1ec:	3b04      	subs	r3, #4
 800b1ee:	2a00      	cmp	r2, #0
 800b1f0:	d1ef      	bne.n	800b1d2 <quorem+0xe8>
 800b1f2:	3c01      	subs	r4, #1
 800b1f4:	e7ea      	b.n	800b1cc <quorem+0xe2>
 800b1f6:	2000      	movs	r0, #0
 800b1f8:	e7ee      	b.n	800b1d8 <quorem+0xee>
 800b1fa:	0000      	movs	r0, r0
 800b1fc:	0000      	movs	r0, r0
	...

0800b200 <_dtoa_r>:
 800b200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b204:	69c7      	ldr	r7, [r0, #28]
 800b206:	b097      	sub	sp, #92	@ 0x5c
 800b208:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b20c:	ec55 4b10 	vmov	r4, r5, d0
 800b210:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b212:	9107      	str	r1, [sp, #28]
 800b214:	4681      	mov	r9, r0
 800b216:	920c      	str	r2, [sp, #48]	@ 0x30
 800b218:	9311      	str	r3, [sp, #68]	@ 0x44
 800b21a:	b97f      	cbnz	r7, 800b23c <_dtoa_r+0x3c>
 800b21c:	2010      	movs	r0, #16
 800b21e:	f000 fe09 	bl	800be34 <malloc>
 800b222:	4602      	mov	r2, r0
 800b224:	f8c9 001c 	str.w	r0, [r9, #28]
 800b228:	b920      	cbnz	r0, 800b234 <_dtoa_r+0x34>
 800b22a:	4ba9      	ldr	r3, [pc, #676]	@ (800b4d0 <_dtoa_r+0x2d0>)
 800b22c:	21ef      	movs	r1, #239	@ 0xef
 800b22e:	48a9      	ldr	r0, [pc, #676]	@ (800b4d4 <_dtoa_r+0x2d4>)
 800b230:	f001 fc5e 	bl	800caf0 <__assert_func>
 800b234:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b238:	6007      	str	r7, [r0, #0]
 800b23a:	60c7      	str	r7, [r0, #12]
 800b23c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b240:	6819      	ldr	r1, [r3, #0]
 800b242:	b159      	cbz	r1, 800b25c <_dtoa_r+0x5c>
 800b244:	685a      	ldr	r2, [r3, #4]
 800b246:	604a      	str	r2, [r1, #4]
 800b248:	2301      	movs	r3, #1
 800b24a:	4093      	lsls	r3, r2
 800b24c:	608b      	str	r3, [r1, #8]
 800b24e:	4648      	mov	r0, r9
 800b250:	f000 fee6 	bl	800c020 <_Bfree>
 800b254:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b258:	2200      	movs	r2, #0
 800b25a:	601a      	str	r2, [r3, #0]
 800b25c:	1e2b      	subs	r3, r5, #0
 800b25e:	bfb9      	ittee	lt
 800b260:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b264:	9305      	strlt	r3, [sp, #20]
 800b266:	2300      	movge	r3, #0
 800b268:	6033      	strge	r3, [r6, #0]
 800b26a:	9f05      	ldr	r7, [sp, #20]
 800b26c:	4b9a      	ldr	r3, [pc, #616]	@ (800b4d8 <_dtoa_r+0x2d8>)
 800b26e:	bfbc      	itt	lt
 800b270:	2201      	movlt	r2, #1
 800b272:	6032      	strlt	r2, [r6, #0]
 800b274:	43bb      	bics	r3, r7
 800b276:	d112      	bne.n	800b29e <_dtoa_r+0x9e>
 800b278:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b27a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b27e:	6013      	str	r3, [r2, #0]
 800b280:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b284:	4323      	orrs	r3, r4
 800b286:	f000 855a 	beq.w	800bd3e <_dtoa_r+0xb3e>
 800b28a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b28c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b4ec <_dtoa_r+0x2ec>
 800b290:	2b00      	cmp	r3, #0
 800b292:	f000 855c 	beq.w	800bd4e <_dtoa_r+0xb4e>
 800b296:	f10a 0303 	add.w	r3, sl, #3
 800b29a:	f000 bd56 	b.w	800bd4a <_dtoa_r+0xb4a>
 800b29e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	ec51 0b17 	vmov	r0, r1, d7
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b2ae:	f7f5 fc0b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2b2:	4680      	mov	r8, r0
 800b2b4:	b158      	cbz	r0, 800b2ce <_dtoa_r+0xce>
 800b2b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	6013      	str	r3, [r2, #0]
 800b2bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b2be:	b113      	cbz	r3, 800b2c6 <_dtoa_r+0xc6>
 800b2c0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b2c2:	4b86      	ldr	r3, [pc, #536]	@ (800b4dc <_dtoa_r+0x2dc>)
 800b2c4:	6013      	str	r3, [r2, #0]
 800b2c6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b4f0 <_dtoa_r+0x2f0>
 800b2ca:	f000 bd40 	b.w	800bd4e <_dtoa_r+0xb4e>
 800b2ce:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b2d2:	aa14      	add	r2, sp, #80	@ 0x50
 800b2d4:	a915      	add	r1, sp, #84	@ 0x54
 800b2d6:	4648      	mov	r0, r9
 800b2d8:	f001 f984 	bl	800c5e4 <__d2b>
 800b2dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b2e0:	9002      	str	r0, [sp, #8]
 800b2e2:	2e00      	cmp	r6, #0
 800b2e4:	d078      	beq.n	800b3d8 <_dtoa_r+0x1d8>
 800b2e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b2e8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b2ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b2f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b2f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b2fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b300:	4619      	mov	r1, r3
 800b302:	2200      	movs	r2, #0
 800b304:	4b76      	ldr	r3, [pc, #472]	@ (800b4e0 <_dtoa_r+0x2e0>)
 800b306:	f7f4 ffbf 	bl	8000288 <__aeabi_dsub>
 800b30a:	a36b      	add	r3, pc, #428	@ (adr r3, 800b4b8 <_dtoa_r+0x2b8>)
 800b30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b310:	f7f5 f972 	bl	80005f8 <__aeabi_dmul>
 800b314:	a36a      	add	r3, pc, #424	@ (adr r3, 800b4c0 <_dtoa_r+0x2c0>)
 800b316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31a:	f7f4 ffb7 	bl	800028c <__adddf3>
 800b31e:	4604      	mov	r4, r0
 800b320:	4630      	mov	r0, r6
 800b322:	460d      	mov	r5, r1
 800b324:	f7f5 f8fe 	bl	8000524 <__aeabi_i2d>
 800b328:	a367      	add	r3, pc, #412	@ (adr r3, 800b4c8 <_dtoa_r+0x2c8>)
 800b32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32e:	f7f5 f963 	bl	80005f8 <__aeabi_dmul>
 800b332:	4602      	mov	r2, r0
 800b334:	460b      	mov	r3, r1
 800b336:	4620      	mov	r0, r4
 800b338:	4629      	mov	r1, r5
 800b33a:	f7f4 ffa7 	bl	800028c <__adddf3>
 800b33e:	4604      	mov	r4, r0
 800b340:	460d      	mov	r5, r1
 800b342:	f7f5 fc09 	bl	8000b58 <__aeabi_d2iz>
 800b346:	2200      	movs	r2, #0
 800b348:	4607      	mov	r7, r0
 800b34a:	2300      	movs	r3, #0
 800b34c:	4620      	mov	r0, r4
 800b34e:	4629      	mov	r1, r5
 800b350:	f7f5 fbc4 	bl	8000adc <__aeabi_dcmplt>
 800b354:	b140      	cbz	r0, 800b368 <_dtoa_r+0x168>
 800b356:	4638      	mov	r0, r7
 800b358:	f7f5 f8e4 	bl	8000524 <__aeabi_i2d>
 800b35c:	4622      	mov	r2, r4
 800b35e:	462b      	mov	r3, r5
 800b360:	f7f5 fbb2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b364:	b900      	cbnz	r0, 800b368 <_dtoa_r+0x168>
 800b366:	3f01      	subs	r7, #1
 800b368:	2f16      	cmp	r7, #22
 800b36a:	d852      	bhi.n	800b412 <_dtoa_r+0x212>
 800b36c:	4b5d      	ldr	r3, [pc, #372]	@ (800b4e4 <_dtoa_r+0x2e4>)
 800b36e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b376:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b37a:	f7f5 fbaf 	bl	8000adc <__aeabi_dcmplt>
 800b37e:	2800      	cmp	r0, #0
 800b380:	d049      	beq.n	800b416 <_dtoa_r+0x216>
 800b382:	3f01      	subs	r7, #1
 800b384:	2300      	movs	r3, #0
 800b386:	9310      	str	r3, [sp, #64]	@ 0x40
 800b388:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b38a:	1b9b      	subs	r3, r3, r6
 800b38c:	1e5a      	subs	r2, r3, #1
 800b38e:	bf45      	ittet	mi
 800b390:	f1c3 0301 	rsbmi	r3, r3, #1
 800b394:	9300      	strmi	r3, [sp, #0]
 800b396:	2300      	movpl	r3, #0
 800b398:	2300      	movmi	r3, #0
 800b39a:	9206      	str	r2, [sp, #24]
 800b39c:	bf54      	ite	pl
 800b39e:	9300      	strpl	r3, [sp, #0]
 800b3a0:	9306      	strmi	r3, [sp, #24]
 800b3a2:	2f00      	cmp	r7, #0
 800b3a4:	db39      	blt.n	800b41a <_dtoa_r+0x21a>
 800b3a6:	9b06      	ldr	r3, [sp, #24]
 800b3a8:	970d      	str	r7, [sp, #52]	@ 0x34
 800b3aa:	443b      	add	r3, r7
 800b3ac:	9306      	str	r3, [sp, #24]
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	9308      	str	r3, [sp, #32]
 800b3b2:	9b07      	ldr	r3, [sp, #28]
 800b3b4:	2b09      	cmp	r3, #9
 800b3b6:	d863      	bhi.n	800b480 <_dtoa_r+0x280>
 800b3b8:	2b05      	cmp	r3, #5
 800b3ba:	bfc4      	itt	gt
 800b3bc:	3b04      	subgt	r3, #4
 800b3be:	9307      	strgt	r3, [sp, #28]
 800b3c0:	9b07      	ldr	r3, [sp, #28]
 800b3c2:	f1a3 0302 	sub.w	r3, r3, #2
 800b3c6:	bfcc      	ite	gt
 800b3c8:	2400      	movgt	r4, #0
 800b3ca:	2401      	movle	r4, #1
 800b3cc:	2b03      	cmp	r3, #3
 800b3ce:	d863      	bhi.n	800b498 <_dtoa_r+0x298>
 800b3d0:	e8df f003 	tbb	[pc, r3]
 800b3d4:	2b375452 	.word	0x2b375452
 800b3d8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b3dc:	441e      	add	r6, r3
 800b3de:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b3e2:	2b20      	cmp	r3, #32
 800b3e4:	bfc1      	itttt	gt
 800b3e6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b3ea:	409f      	lslgt	r7, r3
 800b3ec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b3f0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b3f4:	bfd6      	itet	le
 800b3f6:	f1c3 0320 	rsble	r3, r3, #32
 800b3fa:	ea47 0003 	orrgt.w	r0, r7, r3
 800b3fe:	fa04 f003 	lslle.w	r0, r4, r3
 800b402:	f7f5 f87f 	bl	8000504 <__aeabi_ui2d>
 800b406:	2201      	movs	r2, #1
 800b408:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b40c:	3e01      	subs	r6, #1
 800b40e:	9212      	str	r2, [sp, #72]	@ 0x48
 800b410:	e776      	b.n	800b300 <_dtoa_r+0x100>
 800b412:	2301      	movs	r3, #1
 800b414:	e7b7      	b.n	800b386 <_dtoa_r+0x186>
 800b416:	9010      	str	r0, [sp, #64]	@ 0x40
 800b418:	e7b6      	b.n	800b388 <_dtoa_r+0x188>
 800b41a:	9b00      	ldr	r3, [sp, #0]
 800b41c:	1bdb      	subs	r3, r3, r7
 800b41e:	9300      	str	r3, [sp, #0]
 800b420:	427b      	negs	r3, r7
 800b422:	9308      	str	r3, [sp, #32]
 800b424:	2300      	movs	r3, #0
 800b426:	930d      	str	r3, [sp, #52]	@ 0x34
 800b428:	e7c3      	b.n	800b3b2 <_dtoa_r+0x1b2>
 800b42a:	2301      	movs	r3, #1
 800b42c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b42e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b430:	eb07 0b03 	add.w	fp, r7, r3
 800b434:	f10b 0301 	add.w	r3, fp, #1
 800b438:	2b01      	cmp	r3, #1
 800b43a:	9303      	str	r3, [sp, #12]
 800b43c:	bfb8      	it	lt
 800b43e:	2301      	movlt	r3, #1
 800b440:	e006      	b.n	800b450 <_dtoa_r+0x250>
 800b442:	2301      	movs	r3, #1
 800b444:	9309      	str	r3, [sp, #36]	@ 0x24
 800b446:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b448:	2b00      	cmp	r3, #0
 800b44a:	dd28      	ble.n	800b49e <_dtoa_r+0x29e>
 800b44c:	469b      	mov	fp, r3
 800b44e:	9303      	str	r3, [sp, #12]
 800b450:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b454:	2100      	movs	r1, #0
 800b456:	2204      	movs	r2, #4
 800b458:	f102 0514 	add.w	r5, r2, #20
 800b45c:	429d      	cmp	r5, r3
 800b45e:	d926      	bls.n	800b4ae <_dtoa_r+0x2ae>
 800b460:	6041      	str	r1, [r0, #4]
 800b462:	4648      	mov	r0, r9
 800b464:	f000 fd9c 	bl	800bfa0 <_Balloc>
 800b468:	4682      	mov	sl, r0
 800b46a:	2800      	cmp	r0, #0
 800b46c:	d142      	bne.n	800b4f4 <_dtoa_r+0x2f4>
 800b46e:	4b1e      	ldr	r3, [pc, #120]	@ (800b4e8 <_dtoa_r+0x2e8>)
 800b470:	4602      	mov	r2, r0
 800b472:	f240 11af 	movw	r1, #431	@ 0x1af
 800b476:	e6da      	b.n	800b22e <_dtoa_r+0x2e>
 800b478:	2300      	movs	r3, #0
 800b47a:	e7e3      	b.n	800b444 <_dtoa_r+0x244>
 800b47c:	2300      	movs	r3, #0
 800b47e:	e7d5      	b.n	800b42c <_dtoa_r+0x22c>
 800b480:	2401      	movs	r4, #1
 800b482:	2300      	movs	r3, #0
 800b484:	9307      	str	r3, [sp, #28]
 800b486:	9409      	str	r4, [sp, #36]	@ 0x24
 800b488:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800b48c:	2200      	movs	r2, #0
 800b48e:	f8cd b00c 	str.w	fp, [sp, #12]
 800b492:	2312      	movs	r3, #18
 800b494:	920c      	str	r2, [sp, #48]	@ 0x30
 800b496:	e7db      	b.n	800b450 <_dtoa_r+0x250>
 800b498:	2301      	movs	r3, #1
 800b49a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b49c:	e7f4      	b.n	800b488 <_dtoa_r+0x288>
 800b49e:	f04f 0b01 	mov.w	fp, #1
 800b4a2:	f8cd b00c 	str.w	fp, [sp, #12]
 800b4a6:	465b      	mov	r3, fp
 800b4a8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b4ac:	e7d0      	b.n	800b450 <_dtoa_r+0x250>
 800b4ae:	3101      	adds	r1, #1
 800b4b0:	0052      	lsls	r2, r2, #1
 800b4b2:	e7d1      	b.n	800b458 <_dtoa_r+0x258>
 800b4b4:	f3af 8000 	nop.w
 800b4b8:	636f4361 	.word	0x636f4361
 800b4bc:	3fd287a7 	.word	0x3fd287a7
 800b4c0:	8b60c8b3 	.word	0x8b60c8b3
 800b4c4:	3fc68a28 	.word	0x3fc68a28
 800b4c8:	509f79fb 	.word	0x509f79fb
 800b4cc:	3fd34413 	.word	0x3fd34413
 800b4d0:	0800d9a5 	.word	0x0800d9a5
 800b4d4:	0800d9bc 	.word	0x0800d9bc
 800b4d8:	7ff00000 	.word	0x7ff00000
 800b4dc:	0800d975 	.word	0x0800d975
 800b4e0:	3ff80000 	.word	0x3ff80000
 800b4e4:	0800db10 	.word	0x0800db10
 800b4e8:	0800da14 	.word	0x0800da14
 800b4ec:	0800d9a1 	.word	0x0800d9a1
 800b4f0:	0800d974 	.word	0x0800d974
 800b4f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b4f8:	6018      	str	r0, [r3, #0]
 800b4fa:	9b03      	ldr	r3, [sp, #12]
 800b4fc:	2b0e      	cmp	r3, #14
 800b4fe:	f200 80a1 	bhi.w	800b644 <_dtoa_r+0x444>
 800b502:	2c00      	cmp	r4, #0
 800b504:	f000 809e 	beq.w	800b644 <_dtoa_r+0x444>
 800b508:	2f00      	cmp	r7, #0
 800b50a:	dd33      	ble.n	800b574 <_dtoa_r+0x374>
 800b50c:	4b9c      	ldr	r3, [pc, #624]	@ (800b780 <_dtoa_r+0x580>)
 800b50e:	f007 020f 	and.w	r2, r7, #15
 800b512:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b516:	ed93 7b00 	vldr	d7, [r3]
 800b51a:	05f8      	lsls	r0, r7, #23
 800b51c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b520:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b524:	d516      	bpl.n	800b554 <_dtoa_r+0x354>
 800b526:	4b97      	ldr	r3, [pc, #604]	@ (800b784 <_dtoa_r+0x584>)
 800b528:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b52c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b530:	f7f5 f98c 	bl	800084c <__aeabi_ddiv>
 800b534:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b538:	f004 040f 	and.w	r4, r4, #15
 800b53c:	2603      	movs	r6, #3
 800b53e:	4d91      	ldr	r5, [pc, #580]	@ (800b784 <_dtoa_r+0x584>)
 800b540:	b954      	cbnz	r4, 800b558 <_dtoa_r+0x358>
 800b542:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b546:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b54a:	f7f5 f97f 	bl	800084c <__aeabi_ddiv>
 800b54e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b552:	e028      	b.n	800b5a6 <_dtoa_r+0x3a6>
 800b554:	2602      	movs	r6, #2
 800b556:	e7f2      	b.n	800b53e <_dtoa_r+0x33e>
 800b558:	07e1      	lsls	r1, r4, #31
 800b55a:	d508      	bpl.n	800b56e <_dtoa_r+0x36e>
 800b55c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b560:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b564:	f7f5 f848 	bl	80005f8 <__aeabi_dmul>
 800b568:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b56c:	3601      	adds	r6, #1
 800b56e:	1064      	asrs	r4, r4, #1
 800b570:	3508      	adds	r5, #8
 800b572:	e7e5      	b.n	800b540 <_dtoa_r+0x340>
 800b574:	f000 80af 	beq.w	800b6d6 <_dtoa_r+0x4d6>
 800b578:	427c      	negs	r4, r7
 800b57a:	4b81      	ldr	r3, [pc, #516]	@ (800b780 <_dtoa_r+0x580>)
 800b57c:	4d81      	ldr	r5, [pc, #516]	@ (800b784 <_dtoa_r+0x584>)
 800b57e:	f004 020f 	and.w	r2, r4, #15
 800b582:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b58e:	f7f5 f833 	bl	80005f8 <__aeabi_dmul>
 800b592:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b596:	1124      	asrs	r4, r4, #4
 800b598:	2300      	movs	r3, #0
 800b59a:	2602      	movs	r6, #2
 800b59c:	2c00      	cmp	r4, #0
 800b59e:	f040 808f 	bne.w	800b6c0 <_dtoa_r+0x4c0>
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d1d3      	bne.n	800b54e <_dtoa_r+0x34e>
 800b5a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b5a8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f000 8094 	beq.w	800b6da <_dtoa_r+0x4da>
 800b5b2:	4b75      	ldr	r3, [pc, #468]	@ (800b788 <_dtoa_r+0x588>)
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	4629      	mov	r1, r5
 800b5ba:	f7f5 fa8f 	bl	8000adc <__aeabi_dcmplt>
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	f000 808b 	beq.w	800b6da <_dtoa_r+0x4da>
 800b5c4:	9b03      	ldr	r3, [sp, #12]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	f000 8087 	beq.w	800b6da <_dtoa_r+0x4da>
 800b5cc:	f1bb 0f00 	cmp.w	fp, #0
 800b5d0:	dd34      	ble.n	800b63c <_dtoa_r+0x43c>
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	4b6d      	ldr	r3, [pc, #436]	@ (800b78c <_dtoa_r+0x58c>)
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	4629      	mov	r1, r5
 800b5da:	f7f5 f80d 	bl	80005f8 <__aeabi_dmul>
 800b5de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b5e2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800b5e6:	3601      	adds	r6, #1
 800b5e8:	465c      	mov	r4, fp
 800b5ea:	4630      	mov	r0, r6
 800b5ec:	f7f4 ff9a 	bl	8000524 <__aeabi_i2d>
 800b5f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5f4:	f7f5 f800 	bl	80005f8 <__aeabi_dmul>
 800b5f8:	4b65      	ldr	r3, [pc, #404]	@ (800b790 <_dtoa_r+0x590>)
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	f7f4 fe46 	bl	800028c <__adddf3>
 800b600:	4605      	mov	r5, r0
 800b602:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b606:	2c00      	cmp	r4, #0
 800b608:	d16a      	bne.n	800b6e0 <_dtoa_r+0x4e0>
 800b60a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b60e:	4b61      	ldr	r3, [pc, #388]	@ (800b794 <_dtoa_r+0x594>)
 800b610:	2200      	movs	r2, #0
 800b612:	f7f4 fe39 	bl	8000288 <__aeabi_dsub>
 800b616:	4602      	mov	r2, r0
 800b618:	460b      	mov	r3, r1
 800b61a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b61e:	462a      	mov	r2, r5
 800b620:	4633      	mov	r3, r6
 800b622:	f7f5 fa79 	bl	8000b18 <__aeabi_dcmpgt>
 800b626:	2800      	cmp	r0, #0
 800b628:	f040 8298 	bne.w	800bb5c <_dtoa_r+0x95c>
 800b62c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b630:	462a      	mov	r2, r5
 800b632:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b636:	f7f5 fa51 	bl	8000adc <__aeabi_dcmplt>
 800b63a:	bb38      	cbnz	r0, 800b68c <_dtoa_r+0x48c>
 800b63c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b640:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b644:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b646:	2b00      	cmp	r3, #0
 800b648:	f2c0 8157 	blt.w	800b8fa <_dtoa_r+0x6fa>
 800b64c:	2f0e      	cmp	r7, #14
 800b64e:	f300 8154 	bgt.w	800b8fa <_dtoa_r+0x6fa>
 800b652:	4b4b      	ldr	r3, [pc, #300]	@ (800b780 <_dtoa_r+0x580>)
 800b654:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b658:	ed93 7b00 	vldr	d7, [r3]
 800b65c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b65e:	2b00      	cmp	r3, #0
 800b660:	ed8d 7b00 	vstr	d7, [sp]
 800b664:	f280 80e5 	bge.w	800b832 <_dtoa_r+0x632>
 800b668:	9b03      	ldr	r3, [sp, #12]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	f300 80e1 	bgt.w	800b832 <_dtoa_r+0x632>
 800b670:	d10c      	bne.n	800b68c <_dtoa_r+0x48c>
 800b672:	4b48      	ldr	r3, [pc, #288]	@ (800b794 <_dtoa_r+0x594>)
 800b674:	2200      	movs	r2, #0
 800b676:	ec51 0b17 	vmov	r0, r1, d7
 800b67a:	f7f4 ffbd 	bl	80005f8 <__aeabi_dmul>
 800b67e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b682:	f7f5 fa3f 	bl	8000b04 <__aeabi_dcmpge>
 800b686:	2800      	cmp	r0, #0
 800b688:	f000 8266 	beq.w	800bb58 <_dtoa_r+0x958>
 800b68c:	2400      	movs	r4, #0
 800b68e:	4625      	mov	r5, r4
 800b690:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b692:	4656      	mov	r6, sl
 800b694:	ea6f 0803 	mvn.w	r8, r3
 800b698:	2700      	movs	r7, #0
 800b69a:	4621      	mov	r1, r4
 800b69c:	4648      	mov	r0, r9
 800b69e:	f000 fcbf 	bl	800c020 <_Bfree>
 800b6a2:	2d00      	cmp	r5, #0
 800b6a4:	f000 80bd 	beq.w	800b822 <_dtoa_r+0x622>
 800b6a8:	b12f      	cbz	r7, 800b6b6 <_dtoa_r+0x4b6>
 800b6aa:	42af      	cmp	r7, r5
 800b6ac:	d003      	beq.n	800b6b6 <_dtoa_r+0x4b6>
 800b6ae:	4639      	mov	r1, r7
 800b6b0:	4648      	mov	r0, r9
 800b6b2:	f000 fcb5 	bl	800c020 <_Bfree>
 800b6b6:	4629      	mov	r1, r5
 800b6b8:	4648      	mov	r0, r9
 800b6ba:	f000 fcb1 	bl	800c020 <_Bfree>
 800b6be:	e0b0      	b.n	800b822 <_dtoa_r+0x622>
 800b6c0:	07e2      	lsls	r2, r4, #31
 800b6c2:	d505      	bpl.n	800b6d0 <_dtoa_r+0x4d0>
 800b6c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b6c8:	f7f4 ff96 	bl	80005f8 <__aeabi_dmul>
 800b6cc:	3601      	adds	r6, #1
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	1064      	asrs	r4, r4, #1
 800b6d2:	3508      	adds	r5, #8
 800b6d4:	e762      	b.n	800b59c <_dtoa_r+0x39c>
 800b6d6:	2602      	movs	r6, #2
 800b6d8:	e765      	b.n	800b5a6 <_dtoa_r+0x3a6>
 800b6da:	9c03      	ldr	r4, [sp, #12]
 800b6dc:	46b8      	mov	r8, r7
 800b6de:	e784      	b.n	800b5ea <_dtoa_r+0x3ea>
 800b6e0:	4b27      	ldr	r3, [pc, #156]	@ (800b780 <_dtoa_r+0x580>)
 800b6e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b6e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b6e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b6ec:	4454      	add	r4, sl
 800b6ee:	2900      	cmp	r1, #0
 800b6f0:	d054      	beq.n	800b79c <_dtoa_r+0x59c>
 800b6f2:	4929      	ldr	r1, [pc, #164]	@ (800b798 <_dtoa_r+0x598>)
 800b6f4:	2000      	movs	r0, #0
 800b6f6:	f7f5 f8a9 	bl	800084c <__aeabi_ddiv>
 800b6fa:	4633      	mov	r3, r6
 800b6fc:	462a      	mov	r2, r5
 800b6fe:	f7f4 fdc3 	bl	8000288 <__aeabi_dsub>
 800b702:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b706:	4656      	mov	r6, sl
 800b708:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b70c:	f7f5 fa24 	bl	8000b58 <__aeabi_d2iz>
 800b710:	4605      	mov	r5, r0
 800b712:	f7f4 ff07 	bl	8000524 <__aeabi_i2d>
 800b716:	4602      	mov	r2, r0
 800b718:	460b      	mov	r3, r1
 800b71a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b71e:	f7f4 fdb3 	bl	8000288 <__aeabi_dsub>
 800b722:	3530      	adds	r5, #48	@ 0x30
 800b724:	4602      	mov	r2, r0
 800b726:	460b      	mov	r3, r1
 800b728:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b72c:	f806 5b01 	strb.w	r5, [r6], #1
 800b730:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b734:	f7f5 f9d2 	bl	8000adc <__aeabi_dcmplt>
 800b738:	2800      	cmp	r0, #0
 800b73a:	d172      	bne.n	800b822 <_dtoa_r+0x622>
 800b73c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b740:	4911      	ldr	r1, [pc, #68]	@ (800b788 <_dtoa_r+0x588>)
 800b742:	2000      	movs	r0, #0
 800b744:	f7f4 fda0 	bl	8000288 <__aeabi_dsub>
 800b748:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b74c:	f7f5 f9c6 	bl	8000adc <__aeabi_dcmplt>
 800b750:	2800      	cmp	r0, #0
 800b752:	f040 80b4 	bne.w	800b8be <_dtoa_r+0x6be>
 800b756:	42a6      	cmp	r6, r4
 800b758:	f43f af70 	beq.w	800b63c <_dtoa_r+0x43c>
 800b75c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b760:	4b0a      	ldr	r3, [pc, #40]	@ (800b78c <_dtoa_r+0x58c>)
 800b762:	2200      	movs	r2, #0
 800b764:	f7f4 ff48 	bl	80005f8 <__aeabi_dmul>
 800b768:	4b08      	ldr	r3, [pc, #32]	@ (800b78c <_dtoa_r+0x58c>)
 800b76a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b76e:	2200      	movs	r2, #0
 800b770:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b774:	f7f4 ff40 	bl	80005f8 <__aeabi_dmul>
 800b778:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b77c:	e7c4      	b.n	800b708 <_dtoa_r+0x508>
 800b77e:	bf00      	nop
 800b780:	0800db10 	.word	0x0800db10
 800b784:	0800dae8 	.word	0x0800dae8
 800b788:	3ff00000 	.word	0x3ff00000
 800b78c:	40240000 	.word	0x40240000
 800b790:	401c0000 	.word	0x401c0000
 800b794:	40140000 	.word	0x40140000
 800b798:	3fe00000 	.word	0x3fe00000
 800b79c:	4631      	mov	r1, r6
 800b79e:	4628      	mov	r0, r5
 800b7a0:	f7f4 ff2a 	bl	80005f8 <__aeabi_dmul>
 800b7a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b7a8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b7aa:	4656      	mov	r6, sl
 800b7ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7b0:	f7f5 f9d2 	bl	8000b58 <__aeabi_d2iz>
 800b7b4:	4605      	mov	r5, r0
 800b7b6:	f7f4 feb5 	bl	8000524 <__aeabi_i2d>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	460b      	mov	r3, r1
 800b7be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7c2:	f7f4 fd61 	bl	8000288 <__aeabi_dsub>
 800b7c6:	3530      	adds	r5, #48	@ 0x30
 800b7c8:	f806 5b01 	strb.w	r5, [r6], #1
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	42a6      	cmp	r6, r4
 800b7d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b7d6:	f04f 0200 	mov.w	r2, #0
 800b7da:	d124      	bne.n	800b826 <_dtoa_r+0x626>
 800b7dc:	4baf      	ldr	r3, [pc, #700]	@ (800ba9c <_dtoa_r+0x89c>)
 800b7de:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b7e2:	f7f4 fd53 	bl	800028c <__adddf3>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b7ee:	f7f5 f993 	bl	8000b18 <__aeabi_dcmpgt>
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	d163      	bne.n	800b8be <_dtoa_r+0x6be>
 800b7f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b7fa:	49a8      	ldr	r1, [pc, #672]	@ (800ba9c <_dtoa_r+0x89c>)
 800b7fc:	2000      	movs	r0, #0
 800b7fe:	f7f4 fd43 	bl	8000288 <__aeabi_dsub>
 800b802:	4602      	mov	r2, r0
 800b804:	460b      	mov	r3, r1
 800b806:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b80a:	f7f5 f967 	bl	8000adc <__aeabi_dcmplt>
 800b80e:	2800      	cmp	r0, #0
 800b810:	f43f af14 	beq.w	800b63c <_dtoa_r+0x43c>
 800b814:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b816:	1e73      	subs	r3, r6, #1
 800b818:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b81a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b81e:	2b30      	cmp	r3, #48	@ 0x30
 800b820:	d0f8      	beq.n	800b814 <_dtoa_r+0x614>
 800b822:	4647      	mov	r7, r8
 800b824:	e03b      	b.n	800b89e <_dtoa_r+0x69e>
 800b826:	4b9e      	ldr	r3, [pc, #632]	@ (800baa0 <_dtoa_r+0x8a0>)
 800b828:	f7f4 fee6 	bl	80005f8 <__aeabi_dmul>
 800b82c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b830:	e7bc      	b.n	800b7ac <_dtoa_r+0x5ac>
 800b832:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b836:	4656      	mov	r6, sl
 800b838:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b83c:	4620      	mov	r0, r4
 800b83e:	4629      	mov	r1, r5
 800b840:	f7f5 f804 	bl	800084c <__aeabi_ddiv>
 800b844:	f7f5 f988 	bl	8000b58 <__aeabi_d2iz>
 800b848:	4680      	mov	r8, r0
 800b84a:	f7f4 fe6b 	bl	8000524 <__aeabi_i2d>
 800b84e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b852:	f7f4 fed1 	bl	80005f8 <__aeabi_dmul>
 800b856:	4602      	mov	r2, r0
 800b858:	460b      	mov	r3, r1
 800b85a:	4620      	mov	r0, r4
 800b85c:	4629      	mov	r1, r5
 800b85e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b862:	f7f4 fd11 	bl	8000288 <__aeabi_dsub>
 800b866:	f806 4b01 	strb.w	r4, [r6], #1
 800b86a:	9d03      	ldr	r5, [sp, #12]
 800b86c:	eba6 040a 	sub.w	r4, r6, sl
 800b870:	42a5      	cmp	r5, r4
 800b872:	4602      	mov	r2, r0
 800b874:	460b      	mov	r3, r1
 800b876:	d133      	bne.n	800b8e0 <_dtoa_r+0x6e0>
 800b878:	f7f4 fd08 	bl	800028c <__adddf3>
 800b87c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b880:	4604      	mov	r4, r0
 800b882:	460d      	mov	r5, r1
 800b884:	f7f5 f948 	bl	8000b18 <__aeabi_dcmpgt>
 800b888:	b9c0      	cbnz	r0, 800b8bc <_dtoa_r+0x6bc>
 800b88a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b88e:	4620      	mov	r0, r4
 800b890:	4629      	mov	r1, r5
 800b892:	f7f5 f919 	bl	8000ac8 <__aeabi_dcmpeq>
 800b896:	b110      	cbz	r0, 800b89e <_dtoa_r+0x69e>
 800b898:	f018 0f01 	tst.w	r8, #1
 800b89c:	d10e      	bne.n	800b8bc <_dtoa_r+0x6bc>
 800b89e:	9902      	ldr	r1, [sp, #8]
 800b8a0:	4648      	mov	r0, r9
 800b8a2:	f000 fbbd 	bl	800c020 <_Bfree>
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	7033      	strb	r3, [r6, #0]
 800b8aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b8ac:	3701      	adds	r7, #1
 800b8ae:	601f      	str	r7, [r3, #0]
 800b8b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	f000 824b 	beq.w	800bd4e <_dtoa_r+0xb4e>
 800b8b8:	601e      	str	r6, [r3, #0]
 800b8ba:	e248      	b.n	800bd4e <_dtoa_r+0xb4e>
 800b8bc:	46b8      	mov	r8, r7
 800b8be:	4633      	mov	r3, r6
 800b8c0:	461e      	mov	r6, r3
 800b8c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8c6:	2a39      	cmp	r2, #57	@ 0x39
 800b8c8:	d106      	bne.n	800b8d8 <_dtoa_r+0x6d8>
 800b8ca:	459a      	cmp	sl, r3
 800b8cc:	d1f8      	bne.n	800b8c0 <_dtoa_r+0x6c0>
 800b8ce:	2230      	movs	r2, #48	@ 0x30
 800b8d0:	f108 0801 	add.w	r8, r8, #1
 800b8d4:	f88a 2000 	strb.w	r2, [sl]
 800b8d8:	781a      	ldrb	r2, [r3, #0]
 800b8da:	3201      	adds	r2, #1
 800b8dc:	701a      	strb	r2, [r3, #0]
 800b8de:	e7a0      	b.n	800b822 <_dtoa_r+0x622>
 800b8e0:	4b6f      	ldr	r3, [pc, #444]	@ (800baa0 <_dtoa_r+0x8a0>)
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	f7f4 fe88 	bl	80005f8 <__aeabi_dmul>
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	4604      	mov	r4, r0
 800b8ee:	460d      	mov	r5, r1
 800b8f0:	f7f5 f8ea 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	d09f      	beq.n	800b838 <_dtoa_r+0x638>
 800b8f8:	e7d1      	b.n	800b89e <_dtoa_r+0x69e>
 800b8fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8fc:	2a00      	cmp	r2, #0
 800b8fe:	f000 80ea 	beq.w	800bad6 <_dtoa_r+0x8d6>
 800b902:	9a07      	ldr	r2, [sp, #28]
 800b904:	2a01      	cmp	r2, #1
 800b906:	f300 80cd 	bgt.w	800baa4 <_dtoa_r+0x8a4>
 800b90a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b90c:	2a00      	cmp	r2, #0
 800b90e:	f000 80c1 	beq.w	800ba94 <_dtoa_r+0x894>
 800b912:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b916:	9c08      	ldr	r4, [sp, #32]
 800b918:	9e00      	ldr	r6, [sp, #0]
 800b91a:	9a00      	ldr	r2, [sp, #0]
 800b91c:	441a      	add	r2, r3
 800b91e:	9200      	str	r2, [sp, #0]
 800b920:	9a06      	ldr	r2, [sp, #24]
 800b922:	2101      	movs	r1, #1
 800b924:	441a      	add	r2, r3
 800b926:	4648      	mov	r0, r9
 800b928:	9206      	str	r2, [sp, #24]
 800b92a:	f000 fc2d 	bl	800c188 <__i2b>
 800b92e:	4605      	mov	r5, r0
 800b930:	b166      	cbz	r6, 800b94c <_dtoa_r+0x74c>
 800b932:	9b06      	ldr	r3, [sp, #24]
 800b934:	2b00      	cmp	r3, #0
 800b936:	dd09      	ble.n	800b94c <_dtoa_r+0x74c>
 800b938:	42b3      	cmp	r3, r6
 800b93a:	9a00      	ldr	r2, [sp, #0]
 800b93c:	bfa8      	it	ge
 800b93e:	4633      	movge	r3, r6
 800b940:	1ad2      	subs	r2, r2, r3
 800b942:	9200      	str	r2, [sp, #0]
 800b944:	9a06      	ldr	r2, [sp, #24]
 800b946:	1af6      	subs	r6, r6, r3
 800b948:	1ad3      	subs	r3, r2, r3
 800b94a:	9306      	str	r3, [sp, #24]
 800b94c:	9b08      	ldr	r3, [sp, #32]
 800b94e:	b30b      	cbz	r3, 800b994 <_dtoa_r+0x794>
 800b950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b952:	2b00      	cmp	r3, #0
 800b954:	f000 80c6 	beq.w	800bae4 <_dtoa_r+0x8e4>
 800b958:	2c00      	cmp	r4, #0
 800b95a:	f000 80c0 	beq.w	800bade <_dtoa_r+0x8de>
 800b95e:	4629      	mov	r1, r5
 800b960:	4622      	mov	r2, r4
 800b962:	4648      	mov	r0, r9
 800b964:	f000 fcc8 	bl	800c2f8 <__pow5mult>
 800b968:	9a02      	ldr	r2, [sp, #8]
 800b96a:	4601      	mov	r1, r0
 800b96c:	4605      	mov	r5, r0
 800b96e:	4648      	mov	r0, r9
 800b970:	f000 fc20 	bl	800c1b4 <__multiply>
 800b974:	9902      	ldr	r1, [sp, #8]
 800b976:	4680      	mov	r8, r0
 800b978:	4648      	mov	r0, r9
 800b97a:	f000 fb51 	bl	800c020 <_Bfree>
 800b97e:	9b08      	ldr	r3, [sp, #32]
 800b980:	1b1b      	subs	r3, r3, r4
 800b982:	9308      	str	r3, [sp, #32]
 800b984:	f000 80b1 	beq.w	800baea <_dtoa_r+0x8ea>
 800b988:	9a08      	ldr	r2, [sp, #32]
 800b98a:	4641      	mov	r1, r8
 800b98c:	4648      	mov	r0, r9
 800b98e:	f000 fcb3 	bl	800c2f8 <__pow5mult>
 800b992:	9002      	str	r0, [sp, #8]
 800b994:	2101      	movs	r1, #1
 800b996:	4648      	mov	r0, r9
 800b998:	f000 fbf6 	bl	800c188 <__i2b>
 800b99c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b99e:	4604      	mov	r4, r0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f000 81d8 	beq.w	800bd56 <_dtoa_r+0xb56>
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	4601      	mov	r1, r0
 800b9aa:	4648      	mov	r0, r9
 800b9ac:	f000 fca4 	bl	800c2f8 <__pow5mult>
 800b9b0:	9b07      	ldr	r3, [sp, #28]
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	f300 809f 	bgt.w	800baf8 <_dtoa_r+0x8f8>
 800b9ba:	9b04      	ldr	r3, [sp, #16]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	f040 8097 	bne.w	800baf0 <_dtoa_r+0x8f0>
 800b9c2:	9b05      	ldr	r3, [sp, #20]
 800b9c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	f040 8093 	bne.w	800baf4 <_dtoa_r+0x8f4>
 800b9ce:	9b05      	ldr	r3, [sp, #20]
 800b9d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b9d4:	0d1b      	lsrs	r3, r3, #20
 800b9d6:	051b      	lsls	r3, r3, #20
 800b9d8:	b133      	cbz	r3, 800b9e8 <_dtoa_r+0x7e8>
 800b9da:	9b00      	ldr	r3, [sp, #0]
 800b9dc:	3301      	adds	r3, #1
 800b9de:	9300      	str	r3, [sp, #0]
 800b9e0:	9b06      	ldr	r3, [sp, #24]
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	9306      	str	r3, [sp, #24]
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	9308      	str	r3, [sp, #32]
 800b9ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	f000 81b8 	beq.w	800bd62 <_dtoa_r+0xb62>
 800b9f2:	6923      	ldr	r3, [r4, #16]
 800b9f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b9f8:	6918      	ldr	r0, [r3, #16]
 800b9fa:	f000 fb79 	bl	800c0f0 <__hi0bits>
 800b9fe:	f1c0 0020 	rsb	r0, r0, #32
 800ba02:	9b06      	ldr	r3, [sp, #24]
 800ba04:	4418      	add	r0, r3
 800ba06:	f010 001f 	ands.w	r0, r0, #31
 800ba0a:	f000 8082 	beq.w	800bb12 <_dtoa_r+0x912>
 800ba0e:	f1c0 0320 	rsb	r3, r0, #32
 800ba12:	2b04      	cmp	r3, #4
 800ba14:	dd73      	ble.n	800bafe <_dtoa_r+0x8fe>
 800ba16:	9b00      	ldr	r3, [sp, #0]
 800ba18:	f1c0 001c 	rsb	r0, r0, #28
 800ba1c:	4403      	add	r3, r0
 800ba1e:	9300      	str	r3, [sp, #0]
 800ba20:	9b06      	ldr	r3, [sp, #24]
 800ba22:	4403      	add	r3, r0
 800ba24:	4406      	add	r6, r0
 800ba26:	9306      	str	r3, [sp, #24]
 800ba28:	9b00      	ldr	r3, [sp, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	dd05      	ble.n	800ba3a <_dtoa_r+0x83a>
 800ba2e:	9902      	ldr	r1, [sp, #8]
 800ba30:	461a      	mov	r2, r3
 800ba32:	4648      	mov	r0, r9
 800ba34:	f000 fcba 	bl	800c3ac <__lshift>
 800ba38:	9002      	str	r0, [sp, #8]
 800ba3a:	9b06      	ldr	r3, [sp, #24]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	dd05      	ble.n	800ba4c <_dtoa_r+0x84c>
 800ba40:	4621      	mov	r1, r4
 800ba42:	461a      	mov	r2, r3
 800ba44:	4648      	mov	r0, r9
 800ba46:	f000 fcb1 	bl	800c3ac <__lshift>
 800ba4a:	4604      	mov	r4, r0
 800ba4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d061      	beq.n	800bb16 <_dtoa_r+0x916>
 800ba52:	9802      	ldr	r0, [sp, #8]
 800ba54:	4621      	mov	r1, r4
 800ba56:	f000 fd15 	bl	800c484 <__mcmp>
 800ba5a:	2800      	cmp	r0, #0
 800ba5c:	da5b      	bge.n	800bb16 <_dtoa_r+0x916>
 800ba5e:	2300      	movs	r3, #0
 800ba60:	9902      	ldr	r1, [sp, #8]
 800ba62:	220a      	movs	r2, #10
 800ba64:	4648      	mov	r0, r9
 800ba66:	f000 fafd 	bl	800c064 <__multadd>
 800ba6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba6c:	9002      	str	r0, [sp, #8]
 800ba6e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	f000 8177 	beq.w	800bd66 <_dtoa_r+0xb66>
 800ba78:	4629      	mov	r1, r5
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	220a      	movs	r2, #10
 800ba7e:	4648      	mov	r0, r9
 800ba80:	f000 faf0 	bl	800c064 <__multadd>
 800ba84:	f1bb 0f00 	cmp.w	fp, #0
 800ba88:	4605      	mov	r5, r0
 800ba8a:	dc6f      	bgt.n	800bb6c <_dtoa_r+0x96c>
 800ba8c:	9b07      	ldr	r3, [sp, #28]
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	dc49      	bgt.n	800bb26 <_dtoa_r+0x926>
 800ba92:	e06b      	b.n	800bb6c <_dtoa_r+0x96c>
 800ba94:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ba96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ba9a:	e73c      	b.n	800b916 <_dtoa_r+0x716>
 800ba9c:	3fe00000 	.word	0x3fe00000
 800baa0:	40240000 	.word	0x40240000
 800baa4:	9b03      	ldr	r3, [sp, #12]
 800baa6:	1e5c      	subs	r4, r3, #1
 800baa8:	9b08      	ldr	r3, [sp, #32]
 800baaa:	42a3      	cmp	r3, r4
 800baac:	db09      	blt.n	800bac2 <_dtoa_r+0x8c2>
 800baae:	1b1c      	subs	r4, r3, r4
 800bab0:	9b03      	ldr	r3, [sp, #12]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	f6bf af30 	bge.w	800b918 <_dtoa_r+0x718>
 800bab8:	9b00      	ldr	r3, [sp, #0]
 800baba:	9a03      	ldr	r2, [sp, #12]
 800babc:	1a9e      	subs	r6, r3, r2
 800babe:	2300      	movs	r3, #0
 800bac0:	e72b      	b.n	800b91a <_dtoa_r+0x71a>
 800bac2:	9b08      	ldr	r3, [sp, #32]
 800bac4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bac6:	9408      	str	r4, [sp, #32]
 800bac8:	1ae3      	subs	r3, r4, r3
 800baca:	441a      	add	r2, r3
 800bacc:	9e00      	ldr	r6, [sp, #0]
 800bace:	9b03      	ldr	r3, [sp, #12]
 800bad0:	920d      	str	r2, [sp, #52]	@ 0x34
 800bad2:	2400      	movs	r4, #0
 800bad4:	e721      	b.n	800b91a <_dtoa_r+0x71a>
 800bad6:	9c08      	ldr	r4, [sp, #32]
 800bad8:	9e00      	ldr	r6, [sp, #0]
 800bada:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800badc:	e728      	b.n	800b930 <_dtoa_r+0x730>
 800bade:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800bae2:	e751      	b.n	800b988 <_dtoa_r+0x788>
 800bae4:	9a08      	ldr	r2, [sp, #32]
 800bae6:	9902      	ldr	r1, [sp, #8]
 800bae8:	e750      	b.n	800b98c <_dtoa_r+0x78c>
 800baea:	f8cd 8008 	str.w	r8, [sp, #8]
 800baee:	e751      	b.n	800b994 <_dtoa_r+0x794>
 800baf0:	2300      	movs	r3, #0
 800baf2:	e779      	b.n	800b9e8 <_dtoa_r+0x7e8>
 800baf4:	9b04      	ldr	r3, [sp, #16]
 800baf6:	e777      	b.n	800b9e8 <_dtoa_r+0x7e8>
 800baf8:	2300      	movs	r3, #0
 800bafa:	9308      	str	r3, [sp, #32]
 800bafc:	e779      	b.n	800b9f2 <_dtoa_r+0x7f2>
 800bafe:	d093      	beq.n	800ba28 <_dtoa_r+0x828>
 800bb00:	9a00      	ldr	r2, [sp, #0]
 800bb02:	331c      	adds	r3, #28
 800bb04:	441a      	add	r2, r3
 800bb06:	9200      	str	r2, [sp, #0]
 800bb08:	9a06      	ldr	r2, [sp, #24]
 800bb0a:	441a      	add	r2, r3
 800bb0c:	441e      	add	r6, r3
 800bb0e:	9206      	str	r2, [sp, #24]
 800bb10:	e78a      	b.n	800ba28 <_dtoa_r+0x828>
 800bb12:	4603      	mov	r3, r0
 800bb14:	e7f4      	b.n	800bb00 <_dtoa_r+0x900>
 800bb16:	9b03      	ldr	r3, [sp, #12]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	46b8      	mov	r8, r7
 800bb1c:	dc20      	bgt.n	800bb60 <_dtoa_r+0x960>
 800bb1e:	469b      	mov	fp, r3
 800bb20:	9b07      	ldr	r3, [sp, #28]
 800bb22:	2b02      	cmp	r3, #2
 800bb24:	dd1e      	ble.n	800bb64 <_dtoa_r+0x964>
 800bb26:	f1bb 0f00 	cmp.w	fp, #0
 800bb2a:	f47f adb1 	bne.w	800b690 <_dtoa_r+0x490>
 800bb2e:	4621      	mov	r1, r4
 800bb30:	465b      	mov	r3, fp
 800bb32:	2205      	movs	r2, #5
 800bb34:	4648      	mov	r0, r9
 800bb36:	f000 fa95 	bl	800c064 <__multadd>
 800bb3a:	4601      	mov	r1, r0
 800bb3c:	4604      	mov	r4, r0
 800bb3e:	9802      	ldr	r0, [sp, #8]
 800bb40:	f000 fca0 	bl	800c484 <__mcmp>
 800bb44:	2800      	cmp	r0, #0
 800bb46:	f77f ada3 	ble.w	800b690 <_dtoa_r+0x490>
 800bb4a:	4656      	mov	r6, sl
 800bb4c:	2331      	movs	r3, #49	@ 0x31
 800bb4e:	f806 3b01 	strb.w	r3, [r6], #1
 800bb52:	f108 0801 	add.w	r8, r8, #1
 800bb56:	e59f      	b.n	800b698 <_dtoa_r+0x498>
 800bb58:	9c03      	ldr	r4, [sp, #12]
 800bb5a:	46b8      	mov	r8, r7
 800bb5c:	4625      	mov	r5, r4
 800bb5e:	e7f4      	b.n	800bb4a <_dtoa_r+0x94a>
 800bb60:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800bb64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	f000 8101 	beq.w	800bd6e <_dtoa_r+0xb6e>
 800bb6c:	2e00      	cmp	r6, #0
 800bb6e:	dd05      	ble.n	800bb7c <_dtoa_r+0x97c>
 800bb70:	4629      	mov	r1, r5
 800bb72:	4632      	mov	r2, r6
 800bb74:	4648      	mov	r0, r9
 800bb76:	f000 fc19 	bl	800c3ac <__lshift>
 800bb7a:	4605      	mov	r5, r0
 800bb7c:	9b08      	ldr	r3, [sp, #32]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d05c      	beq.n	800bc3c <_dtoa_r+0xa3c>
 800bb82:	6869      	ldr	r1, [r5, #4]
 800bb84:	4648      	mov	r0, r9
 800bb86:	f000 fa0b 	bl	800bfa0 <_Balloc>
 800bb8a:	4606      	mov	r6, r0
 800bb8c:	b928      	cbnz	r0, 800bb9a <_dtoa_r+0x99a>
 800bb8e:	4b82      	ldr	r3, [pc, #520]	@ (800bd98 <_dtoa_r+0xb98>)
 800bb90:	4602      	mov	r2, r0
 800bb92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800bb96:	f7ff bb4a 	b.w	800b22e <_dtoa_r+0x2e>
 800bb9a:	692a      	ldr	r2, [r5, #16]
 800bb9c:	3202      	adds	r2, #2
 800bb9e:	0092      	lsls	r2, r2, #2
 800bba0:	f105 010c 	add.w	r1, r5, #12
 800bba4:	300c      	adds	r0, #12
 800bba6:	f7ff fa92 	bl	800b0ce <memcpy>
 800bbaa:	2201      	movs	r2, #1
 800bbac:	4631      	mov	r1, r6
 800bbae:	4648      	mov	r0, r9
 800bbb0:	f000 fbfc 	bl	800c3ac <__lshift>
 800bbb4:	f10a 0301 	add.w	r3, sl, #1
 800bbb8:	9300      	str	r3, [sp, #0]
 800bbba:	eb0a 030b 	add.w	r3, sl, fp
 800bbbe:	9308      	str	r3, [sp, #32]
 800bbc0:	9b04      	ldr	r3, [sp, #16]
 800bbc2:	f003 0301 	and.w	r3, r3, #1
 800bbc6:	462f      	mov	r7, r5
 800bbc8:	9306      	str	r3, [sp, #24]
 800bbca:	4605      	mov	r5, r0
 800bbcc:	9b00      	ldr	r3, [sp, #0]
 800bbce:	9802      	ldr	r0, [sp, #8]
 800bbd0:	4621      	mov	r1, r4
 800bbd2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800bbd6:	f7ff fa88 	bl	800b0ea <quorem>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	3330      	adds	r3, #48	@ 0x30
 800bbde:	9003      	str	r0, [sp, #12]
 800bbe0:	4639      	mov	r1, r7
 800bbe2:	9802      	ldr	r0, [sp, #8]
 800bbe4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbe6:	f000 fc4d 	bl	800c484 <__mcmp>
 800bbea:	462a      	mov	r2, r5
 800bbec:	9004      	str	r0, [sp, #16]
 800bbee:	4621      	mov	r1, r4
 800bbf0:	4648      	mov	r0, r9
 800bbf2:	f000 fc63 	bl	800c4bc <__mdiff>
 800bbf6:	68c2      	ldr	r2, [r0, #12]
 800bbf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbfa:	4606      	mov	r6, r0
 800bbfc:	bb02      	cbnz	r2, 800bc40 <_dtoa_r+0xa40>
 800bbfe:	4601      	mov	r1, r0
 800bc00:	9802      	ldr	r0, [sp, #8]
 800bc02:	f000 fc3f 	bl	800c484 <__mcmp>
 800bc06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc08:	4602      	mov	r2, r0
 800bc0a:	4631      	mov	r1, r6
 800bc0c:	4648      	mov	r0, r9
 800bc0e:	920c      	str	r2, [sp, #48]	@ 0x30
 800bc10:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc12:	f000 fa05 	bl	800c020 <_Bfree>
 800bc16:	9b07      	ldr	r3, [sp, #28]
 800bc18:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bc1a:	9e00      	ldr	r6, [sp, #0]
 800bc1c:	ea42 0103 	orr.w	r1, r2, r3
 800bc20:	9b06      	ldr	r3, [sp, #24]
 800bc22:	4319      	orrs	r1, r3
 800bc24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc26:	d10d      	bne.n	800bc44 <_dtoa_r+0xa44>
 800bc28:	2b39      	cmp	r3, #57	@ 0x39
 800bc2a:	d027      	beq.n	800bc7c <_dtoa_r+0xa7c>
 800bc2c:	9a04      	ldr	r2, [sp, #16]
 800bc2e:	2a00      	cmp	r2, #0
 800bc30:	dd01      	ble.n	800bc36 <_dtoa_r+0xa36>
 800bc32:	9b03      	ldr	r3, [sp, #12]
 800bc34:	3331      	adds	r3, #49	@ 0x31
 800bc36:	f88b 3000 	strb.w	r3, [fp]
 800bc3a:	e52e      	b.n	800b69a <_dtoa_r+0x49a>
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	e7b9      	b.n	800bbb4 <_dtoa_r+0x9b4>
 800bc40:	2201      	movs	r2, #1
 800bc42:	e7e2      	b.n	800bc0a <_dtoa_r+0xa0a>
 800bc44:	9904      	ldr	r1, [sp, #16]
 800bc46:	2900      	cmp	r1, #0
 800bc48:	db04      	blt.n	800bc54 <_dtoa_r+0xa54>
 800bc4a:	9807      	ldr	r0, [sp, #28]
 800bc4c:	4301      	orrs	r1, r0
 800bc4e:	9806      	ldr	r0, [sp, #24]
 800bc50:	4301      	orrs	r1, r0
 800bc52:	d120      	bne.n	800bc96 <_dtoa_r+0xa96>
 800bc54:	2a00      	cmp	r2, #0
 800bc56:	ddee      	ble.n	800bc36 <_dtoa_r+0xa36>
 800bc58:	9902      	ldr	r1, [sp, #8]
 800bc5a:	9300      	str	r3, [sp, #0]
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	4648      	mov	r0, r9
 800bc60:	f000 fba4 	bl	800c3ac <__lshift>
 800bc64:	4621      	mov	r1, r4
 800bc66:	9002      	str	r0, [sp, #8]
 800bc68:	f000 fc0c 	bl	800c484 <__mcmp>
 800bc6c:	2800      	cmp	r0, #0
 800bc6e:	9b00      	ldr	r3, [sp, #0]
 800bc70:	dc02      	bgt.n	800bc78 <_dtoa_r+0xa78>
 800bc72:	d1e0      	bne.n	800bc36 <_dtoa_r+0xa36>
 800bc74:	07da      	lsls	r2, r3, #31
 800bc76:	d5de      	bpl.n	800bc36 <_dtoa_r+0xa36>
 800bc78:	2b39      	cmp	r3, #57	@ 0x39
 800bc7a:	d1da      	bne.n	800bc32 <_dtoa_r+0xa32>
 800bc7c:	2339      	movs	r3, #57	@ 0x39
 800bc7e:	f88b 3000 	strb.w	r3, [fp]
 800bc82:	4633      	mov	r3, r6
 800bc84:	461e      	mov	r6, r3
 800bc86:	3b01      	subs	r3, #1
 800bc88:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bc8c:	2a39      	cmp	r2, #57	@ 0x39
 800bc8e:	d04e      	beq.n	800bd2e <_dtoa_r+0xb2e>
 800bc90:	3201      	adds	r2, #1
 800bc92:	701a      	strb	r2, [r3, #0]
 800bc94:	e501      	b.n	800b69a <_dtoa_r+0x49a>
 800bc96:	2a00      	cmp	r2, #0
 800bc98:	dd03      	ble.n	800bca2 <_dtoa_r+0xaa2>
 800bc9a:	2b39      	cmp	r3, #57	@ 0x39
 800bc9c:	d0ee      	beq.n	800bc7c <_dtoa_r+0xa7c>
 800bc9e:	3301      	adds	r3, #1
 800bca0:	e7c9      	b.n	800bc36 <_dtoa_r+0xa36>
 800bca2:	9a00      	ldr	r2, [sp, #0]
 800bca4:	9908      	ldr	r1, [sp, #32]
 800bca6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bcaa:	428a      	cmp	r2, r1
 800bcac:	d028      	beq.n	800bd00 <_dtoa_r+0xb00>
 800bcae:	9902      	ldr	r1, [sp, #8]
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	220a      	movs	r2, #10
 800bcb4:	4648      	mov	r0, r9
 800bcb6:	f000 f9d5 	bl	800c064 <__multadd>
 800bcba:	42af      	cmp	r7, r5
 800bcbc:	9002      	str	r0, [sp, #8]
 800bcbe:	f04f 0300 	mov.w	r3, #0
 800bcc2:	f04f 020a 	mov.w	r2, #10
 800bcc6:	4639      	mov	r1, r7
 800bcc8:	4648      	mov	r0, r9
 800bcca:	d107      	bne.n	800bcdc <_dtoa_r+0xadc>
 800bccc:	f000 f9ca 	bl	800c064 <__multadd>
 800bcd0:	4607      	mov	r7, r0
 800bcd2:	4605      	mov	r5, r0
 800bcd4:	9b00      	ldr	r3, [sp, #0]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	9300      	str	r3, [sp, #0]
 800bcda:	e777      	b.n	800bbcc <_dtoa_r+0x9cc>
 800bcdc:	f000 f9c2 	bl	800c064 <__multadd>
 800bce0:	4629      	mov	r1, r5
 800bce2:	4607      	mov	r7, r0
 800bce4:	2300      	movs	r3, #0
 800bce6:	220a      	movs	r2, #10
 800bce8:	4648      	mov	r0, r9
 800bcea:	f000 f9bb 	bl	800c064 <__multadd>
 800bcee:	4605      	mov	r5, r0
 800bcf0:	e7f0      	b.n	800bcd4 <_dtoa_r+0xad4>
 800bcf2:	f1bb 0f00 	cmp.w	fp, #0
 800bcf6:	bfcc      	ite	gt
 800bcf8:	465e      	movgt	r6, fp
 800bcfa:	2601      	movle	r6, #1
 800bcfc:	4456      	add	r6, sl
 800bcfe:	2700      	movs	r7, #0
 800bd00:	9902      	ldr	r1, [sp, #8]
 800bd02:	9300      	str	r3, [sp, #0]
 800bd04:	2201      	movs	r2, #1
 800bd06:	4648      	mov	r0, r9
 800bd08:	f000 fb50 	bl	800c3ac <__lshift>
 800bd0c:	4621      	mov	r1, r4
 800bd0e:	9002      	str	r0, [sp, #8]
 800bd10:	f000 fbb8 	bl	800c484 <__mcmp>
 800bd14:	2800      	cmp	r0, #0
 800bd16:	dcb4      	bgt.n	800bc82 <_dtoa_r+0xa82>
 800bd18:	d102      	bne.n	800bd20 <_dtoa_r+0xb20>
 800bd1a:	9b00      	ldr	r3, [sp, #0]
 800bd1c:	07db      	lsls	r3, r3, #31
 800bd1e:	d4b0      	bmi.n	800bc82 <_dtoa_r+0xa82>
 800bd20:	4633      	mov	r3, r6
 800bd22:	461e      	mov	r6, r3
 800bd24:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd28:	2a30      	cmp	r2, #48	@ 0x30
 800bd2a:	d0fa      	beq.n	800bd22 <_dtoa_r+0xb22>
 800bd2c:	e4b5      	b.n	800b69a <_dtoa_r+0x49a>
 800bd2e:	459a      	cmp	sl, r3
 800bd30:	d1a8      	bne.n	800bc84 <_dtoa_r+0xa84>
 800bd32:	2331      	movs	r3, #49	@ 0x31
 800bd34:	f108 0801 	add.w	r8, r8, #1
 800bd38:	f88a 3000 	strb.w	r3, [sl]
 800bd3c:	e4ad      	b.n	800b69a <_dtoa_r+0x49a>
 800bd3e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bd40:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800bd9c <_dtoa_r+0xb9c>
 800bd44:	b11b      	cbz	r3, 800bd4e <_dtoa_r+0xb4e>
 800bd46:	f10a 0308 	add.w	r3, sl, #8
 800bd4a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bd4c:	6013      	str	r3, [r2, #0]
 800bd4e:	4650      	mov	r0, sl
 800bd50:	b017      	add	sp, #92	@ 0x5c
 800bd52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd56:	9b07      	ldr	r3, [sp, #28]
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	f77f ae2e 	ble.w	800b9ba <_dtoa_r+0x7ba>
 800bd5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bd60:	9308      	str	r3, [sp, #32]
 800bd62:	2001      	movs	r0, #1
 800bd64:	e64d      	b.n	800ba02 <_dtoa_r+0x802>
 800bd66:	f1bb 0f00 	cmp.w	fp, #0
 800bd6a:	f77f aed9 	ble.w	800bb20 <_dtoa_r+0x920>
 800bd6e:	4656      	mov	r6, sl
 800bd70:	9802      	ldr	r0, [sp, #8]
 800bd72:	4621      	mov	r1, r4
 800bd74:	f7ff f9b9 	bl	800b0ea <quorem>
 800bd78:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800bd7c:	f806 3b01 	strb.w	r3, [r6], #1
 800bd80:	eba6 020a 	sub.w	r2, r6, sl
 800bd84:	4593      	cmp	fp, r2
 800bd86:	ddb4      	ble.n	800bcf2 <_dtoa_r+0xaf2>
 800bd88:	9902      	ldr	r1, [sp, #8]
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	220a      	movs	r2, #10
 800bd8e:	4648      	mov	r0, r9
 800bd90:	f000 f968 	bl	800c064 <__multadd>
 800bd94:	9002      	str	r0, [sp, #8]
 800bd96:	e7eb      	b.n	800bd70 <_dtoa_r+0xb70>
 800bd98:	0800da14 	.word	0x0800da14
 800bd9c:	0800d998 	.word	0x0800d998

0800bda0 <_free_r>:
 800bda0:	b538      	push	{r3, r4, r5, lr}
 800bda2:	4605      	mov	r5, r0
 800bda4:	2900      	cmp	r1, #0
 800bda6:	d041      	beq.n	800be2c <_free_r+0x8c>
 800bda8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdac:	1f0c      	subs	r4, r1, #4
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	bfb8      	it	lt
 800bdb2:	18e4      	addlt	r4, r4, r3
 800bdb4:	f000 f8e8 	bl	800bf88 <__malloc_lock>
 800bdb8:	4a1d      	ldr	r2, [pc, #116]	@ (800be30 <_free_r+0x90>)
 800bdba:	6813      	ldr	r3, [r2, #0]
 800bdbc:	b933      	cbnz	r3, 800bdcc <_free_r+0x2c>
 800bdbe:	6063      	str	r3, [r4, #4]
 800bdc0:	6014      	str	r4, [r2, #0]
 800bdc2:	4628      	mov	r0, r5
 800bdc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdc8:	f000 b8e4 	b.w	800bf94 <__malloc_unlock>
 800bdcc:	42a3      	cmp	r3, r4
 800bdce:	d908      	bls.n	800bde2 <_free_r+0x42>
 800bdd0:	6820      	ldr	r0, [r4, #0]
 800bdd2:	1821      	adds	r1, r4, r0
 800bdd4:	428b      	cmp	r3, r1
 800bdd6:	bf01      	itttt	eq
 800bdd8:	6819      	ldreq	r1, [r3, #0]
 800bdda:	685b      	ldreq	r3, [r3, #4]
 800bddc:	1809      	addeq	r1, r1, r0
 800bdde:	6021      	streq	r1, [r4, #0]
 800bde0:	e7ed      	b.n	800bdbe <_free_r+0x1e>
 800bde2:	461a      	mov	r2, r3
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	b10b      	cbz	r3, 800bdec <_free_r+0x4c>
 800bde8:	42a3      	cmp	r3, r4
 800bdea:	d9fa      	bls.n	800bde2 <_free_r+0x42>
 800bdec:	6811      	ldr	r1, [r2, #0]
 800bdee:	1850      	adds	r0, r2, r1
 800bdf0:	42a0      	cmp	r0, r4
 800bdf2:	d10b      	bne.n	800be0c <_free_r+0x6c>
 800bdf4:	6820      	ldr	r0, [r4, #0]
 800bdf6:	4401      	add	r1, r0
 800bdf8:	1850      	adds	r0, r2, r1
 800bdfa:	4283      	cmp	r3, r0
 800bdfc:	6011      	str	r1, [r2, #0]
 800bdfe:	d1e0      	bne.n	800bdc2 <_free_r+0x22>
 800be00:	6818      	ldr	r0, [r3, #0]
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	6053      	str	r3, [r2, #4]
 800be06:	4408      	add	r0, r1
 800be08:	6010      	str	r0, [r2, #0]
 800be0a:	e7da      	b.n	800bdc2 <_free_r+0x22>
 800be0c:	d902      	bls.n	800be14 <_free_r+0x74>
 800be0e:	230c      	movs	r3, #12
 800be10:	602b      	str	r3, [r5, #0]
 800be12:	e7d6      	b.n	800bdc2 <_free_r+0x22>
 800be14:	6820      	ldr	r0, [r4, #0]
 800be16:	1821      	adds	r1, r4, r0
 800be18:	428b      	cmp	r3, r1
 800be1a:	bf04      	itt	eq
 800be1c:	6819      	ldreq	r1, [r3, #0]
 800be1e:	685b      	ldreq	r3, [r3, #4]
 800be20:	6063      	str	r3, [r4, #4]
 800be22:	bf04      	itt	eq
 800be24:	1809      	addeq	r1, r1, r0
 800be26:	6021      	streq	r1, [r4, #0]
 800be28:	6054      	str	r4, [r2, #4]
 800be2a:	e7ca      	b.n	800bdc2 <_free_r+0x22>
 800be2c:	bd38      	pop	{r3, r4, r5, pc}
 800be2e:	bf00      	nop
 800be30:	20001edc 	.word	0x20001edc

0800be34 <malloc>:
 800be34:	4b02      	ldr	r3, [pc, #8]	@ (800be40 <malloc+0xc>)
 800be36:	4601      	mov	r1, r0
 800be38:	6818      	ldr	r0, [r3, #0]
 800be3a:	f000 b825 	b.w	800be88 <_malloc_r>
 800be3e:	bf00      	nop
 800be40:	2000001c 	.word	0x2000001c

0800be44 <sbrk_aligned>:
 800be44:	b570      	push	{r4, r5, r6, lr}
 800be46:	4e0f      	ldr	r6, [pc, #60]	@ (800be84 <sbrk_aligned+0x40>)
 800be48:	460c      	mov	r4, r1
 800be4a:	6831      	ldr	r1, [r6, #0]
 800be4c:	4605      	mov	r5, r0
 800be4e:	b911      	cbnz	r1, 800be56 <sbrk_aligned+0x12>
 800be50:	f000 fe3e 	bl	800cad0 <_sbrk_r>
 800be54:	6030      	str	r0, [r6, #0]
 800be56:	4621      	mov	r1, r4
 800be58:	4628      	mov	r0, r5
 800be5a:	f000 fe39 	bl	800cad0 <_sbrk_r>
 800be5e:	1c43      	adds	r3, r0, #1
 800be60:	d103      	bne.n	800be6a <sbrk_aligned+0x26>
 800be62:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800be66:	4620      	mov	r0, r4
 800be68:	bd70      	pop	{r4, r5, r6, pc}
 800be6a:	1cc4      	adds	r4, r0, #3
 800be6c:	f024 0403 	bic.w	r4, r4, #3
 800be70:	42a0      	cmp	r0, r4
 800be72:	d0f8      	beq.n	800be66 <sbrk_aligned+0x22>
 800be74:	1a21      	subs	r1, r4, r0
 800be76:	4628      	mov	r0, r5
 800be78:	f000 fe2a 	bl	800cad0 <_sbrk_r>
 800be7c:	3001      	adds	r0, #1
 800be7e:	d1f2      	bne.n	800be66 <sbrk_aligned+0x22>
 800be80:	e7ef      	b.n	800be62 <sbrk_aligned+0x1e>
 800be82:	bf00      	nop
 800be84:	20001ed8 	.word	0x20001ed8

0800be88 <_malloc_r>:
 800be88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be8c:	1ccd      	adds	r5, r1, #3
 800be8e:	f025 0503 	bic.w	r5, r5, #3
 800be92:	3508      	adds	r5, #8
 800be94:	2d0c      	cmp	r5, #12
 800be96:	bf38      	it	cc
 800be98:	250c      	movcc	r5, #12
 800be9a:	2d00      	cmp	r5, #0
 800be9c:	4606      	mov	r6, r0
 800be9e:	db01      	blt.n	800bea4 <_malloc_r+0x1c>
 800bea0:	42a9      	cmp	r1, r5
 800bea2:	d904      	bls.n	800beae <_malloc_r+0x26>
 800bea4:	230c      	movs	r3, #12
 800bea6:	6033      	str	r3, [r6, #0]
 800bea8:	2000      	movs	r0, #0
 800beaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bf84 <_malloc_r+0xfc>
 800beb2:	f000 f869 	bl	800bf88 <__malloc_lock>
 800beb6:	f8d8 3000 	ldr.w	r3, [r8]
 800beba:	461c      	mov	r4, r3
 800bebc:	bb44      	cbnz	r4, 800bf10 <_malloc_r+0x88>
 800bebe:	4629      	mov	r1, r5
 800bec0:	4630      	mov	r0, r6
 800bec2:	f7ff ffbf 	bl	800be44 <sbrk_aligned>
 800bec6:	1c43      	adds	r3, r0, #1
 800bec8:	4604      	mov	r4, r0
 800beca:	d158      	bne.n	800bf7e <_malloc_r+0xf6>
 800becc:	f8d8 4000 	ldr.w	r4, [r8]
 800bed0:	4627      	mov	r7, r4
 800bed2:	2f00      	cmp	r7, #0
 800bed4:	d143      	bne.n	800bf5e <_malloc_r+0xd6>
 800bed6:	2c00      	cmp	r4, #0
 800bed8:	d04b      	beq.n	800bf72 <_malloc_r+0xea>
 800beda:	6823      	ldr	r3, [r4, #0]
 800bedc:	4639      	mov	r1, r7
 800bede:	4630      	mov	r0, r6
 800bee0:	eb04 0903 	add.w	r9, r4, r3
 800bee4:	f000 fdf4 	bl	800cad0 <_sbrk_r>
 800bee8:	4581      	cmp	r9, r0
 800beea:	d142      	bne.n	800bf72 <_malloc_r+0xea>
 800beec:	6821      	ldr	r1, [r4, #0]
 800beee:	1a6d      	subs	r5, r5, r1
 800bef0:	4629      	mov	r1, r5
 800bef2:	4630      	mov	r0, r6
 800bef4:	f7ff ffa6 	bl	800be44 <sbrk_aligned>
 800bef8:	3001      	adds	r0, #1
 800befa:	d03a      	beq.n	800bf72 <_malloc_r+0xea>
 800befc:	6823      	ldr	r3, [r4, #0]
 800befe:	442b      	add	r3, r5
 800bf00:	6023      	str	r3, [r4, #0]
 800bf02:	f8d8 3000 	ldr.w	r3, [r8]
 800bf06:	685a      	ldr	r2, [r3, #4]
 800bf08:	bb62      	cbnz	r2, 800bf64 <_malloc_r+0xdc>
 800bf0a:	f8c8 7000 	str.w	r7, [r8]
 800bf0e:	e00f      	b.n	800bf30 <_malloc_r+0xa8>
 800bf10:	6822      	ldr	r2, [r4, #0]
 800bf12:	1b52      	subs	r2, r2, r5
 800bf14:	d420      	bmi.n	800bf58 <_malloc_r+0xd0>
 800bf16:	2a0b      	cmp	r2, #11
 800bf18:	d917      	bls.n	800bf4a <_malloc_r+0xc2>
 800bf1a:	1961      	adds	r1, r4, r5
 800bf1c:	42a3      	cmp	r3, r4
 800bf1e:	6025      	str	r5, [r4, #0]
 800bf20:	bf18      	it	ne
 800bf22:	6059      	strne	r1, [r3, #4]
 800bf24:	6863      	ldr	r3, [r4, #4]
 800bf26:	bf08      	it	eq
 800bf28:	f8c8 1000 	streq.w	r1, [r8]
 800bf2c:	5162      	str	r2, [r4, r5]
 800bf2e:	604b      	str	r3, [r1, #4]
 800bf30:	4630      	mov	r0, r6
 800bf32:	f000 f82f 	bl	800bf94 <__malloc_unlock>
 800bf36:	f104 000b 	add.w	r0, r4, #11
 800bf3a:	1d23      	adds	r3, r4, #4
 800bf3c:	f020 0007 	bic.w	r0, r0, #7
 800bf40:	1ac2      	subs	r2, r0, r3
 800bf42:	bf1c      	itt	ne
 800bf44:	1a1b      	subne	r3, r3, r0
 800bf46:	50a3      	strne	r3, [r4, r2]
 800bf48:	e7af      	b.n	800beaa <_malloc_r+0x22>
 800bf4a:	6862      	ldr	r2, [r4, #4]
 800bf4c:	42a3      	cmp	r3, r4
 800bf4e:	bf0c      	ite	eq
 800bf50:	f8c8 2000 	streq.w	r2, [r8]
 800bf54:	605a      	strne	r2, [r3, #4]
 800bf56:	e7eb      	b.n	800bf30 <_malloc_r+0xa8>
 800bf58:	4623      	mov	r3, r4
 800bf5a:	6864      	ldr	r4, [r4, #4]
 800bf5c:	e7ae      	b.n	800bebc <_malloc_r+0x34>
 800bf5e:	463c      	mov	r4, r7
 800bf60:	687f      	ldr	r7, [r7, #4]
 800bf62:	e7b6      	b.n	800bed2 <_malloc_r+0x4a>
 800bf64:	461a      	mov	r2, r3
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	42a3      	cmp	r3, r4
 800bf6a:	d1fb      	bne.n	800bf64 <_malloc_r+0xdc>
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	6053      	str	r3, [r2, #4]
 800bf70:	e7de      	b.n	800bf30 <_malloc_r+0xa8>
 800bf72:	230c      	movs	r3, #12
 800bf74:	6033      	str	r3, [r6, #0]
 800bf76:	4630      	mov	r0, r6
 800bf78:	f000 f80c 	bl	800bf94 <__malloc_unlock>
 800bf7c:	e794      	b.n	800bea8 <_malloc_r+0x20>
 800bf7e:	6005      	str	r5, [r0, #0]
 800bf80:	e7d6      	b.n	800bf30 <_malloc_r+0xa8>
 800bf82:	bf00      	nop
 800bf84:	20001edc 	.word	0x20001edc

0800bf88 <__malloc_lock>:
 800bf88:	4801      	ldr	r0, [pc, #4]	@ (800bf90 <__malloc_lock+0x8>)
 800bf8a:	f7ff b89e 	b.w	800b0ca <__retarget_lock_acquire_recursive>
 800bf8e:	bf00      	nop
 800bf90:	20001ed4 	.word	0x20001ed4

0800bf94 <__malloc_unlock>:
 800bf94:	4801      	ldr	r0, [pc, #4]	@ (800bf9c <__malloc_unlock+0x8>)
 800bf96:	f7ff b899 	b.w	800b0cc <__retarget_lock_release_recursive>
 800bf9a:	bf00      	nop
 800bf9c:	20001ed4 	.word	0x20001ed4

0800bfa0 <_Balloc>:
 800bfa0:	b570      	push	{r4, r5, r6, lr}
 800bfa2:	69c6      	ldr	r6, [r0, #28]
 800bfa4:	4604      	mov	r4, r0
 800bfa6:	460d      	mov	r5, r1
 800bfa8:	b976      	cbnz	r6, 800bfc8 <_Balloc+0x28>
 800bfaa:	2010      	movs	r0, #16
 800bfac:	f7ff ff42 	bl	800be34 <malloc>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	61e0      	str	r0, [r4, #28]
 800bfb4:	b920      	cbnz	r0, 800bfc0 <_Balloc+0x20>
 800bfb6:	4b18      	ldr	r3, [pc, #96]	@ (800c018 <_Balloc+0x78>)
 800bfb8:	4818      	ldr	r0, [pc, #96]	@ (800c01c <_Balloc+0x7c>)
 800bfba:	216b      	movs	r1, #107	@ 0x6b
 800bfbc:	f000 fd98 	bl	800caf0 <__assert_func>
 800bfc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bfc4:	6006      	str	r6, [r0, #0]
 800bfc6:	60c6      	str	r6, [r0, #12]
 800bfc8:	69e6      	ldr	r6, [r4, #28]
 800bfca:	68f3      	ldr	r3, [r6, #12]
 800bfcc:	b183      	cbz	r3, 800bff0 <_Balloc+0x50>
 800bfce:	69e3      	ldr	r3, [r4, #28]
 800bfd0:	68db      	ldr	r3, [r3, #12]
 800bfd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bfd6:	b9b8      	cbnz	r0, 800c008 <_Balloc+0x68>
 800bfd8:	2101      	movs	r1, #1
 800bfda:	fa01 f605 	lsl.w	r6, r1, r5
 800bfde:	1d72      	adds	r2, r6, #5
 800bfe0:	0092      	lsls	r2, r2, #2
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	f000 fda2 	bl	800cb2c <_calloc_r>
 800bfe8:	b160      	cbz	r0, 800c004 <_Balloc+0x64>
 800bfea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bfee:	e00e      	b.n	800c00e <_Balloc+0x6e>
 800bff0:	2221      	movs	r2, #33	@ 0x21
 800bff2:	2104      	movs	r1, #4
 800bff4:	4620      	mov	r0, r4
 800bff6:	f000 fd99 	bl	800cb2c <_calloc_r>
 800bffa:	69e3      	ldr	r3, [r4, #28]
 800bffc:	60f0      	str	r0, [r6, #12]
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d1e4      	bne.n	800bfce <_Balloc+0x2e>
 800c004:	2000      	movs	r0, #0
 800c006:	bd70      	pop	{r4, r5, r6, pc}
 800c008:	6802      	ldr	r2, [r0, #0]
 800c00a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c00e:	2300      	movs	r3, #0
 800c010:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c014:	e7f7      	b.n	800c006 <_Balloc+0x66>
 800c016:	bf00      	nop
 800c018:	0800d9a5 	.word	0x0800d9a5
 800c01c:	0800da25 	.word	0x0800da25

0800c020 <_Bfree>:
 800c020:	b570      	push	{r4, r5, r6, lr}
 800c022:	69c6      	ldr	r6, [r0, #28]
 800c024:	4605      	mov	r5, r0
 800c026:	460c      	mov	r4, r1
 800c028:	b976      	cbnz	r6, 800c048 <_Bfree+0x28>
 800c02a:	2010      	movs	r0, #16
 800c02c:	f7ff ff02 	bl	800be34 <malloc>
 800c030:	4602      	mov	r2, r0
 800c032:	61e8      	str	r0, [r5, #28]
 800c034:	b920      	cbnz	r0, 800c040 <_Bfree+0x20>
 800c036:	4b09      	ldr	r3, [pc, #36]	@ (800c05c <_Bfree+0x3c>)
 800c038:	4809      	ldr	r0, [pc, #36]	@ (800c060 <_Bfree+0x40>)
 800c03a:	218f      	movs	r1, #143	@ 0x8f
 800c03c:	f000 fd58 	bl	800caf0 <__assert_func>
 800c040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c044:	6006      	str	r6, [r0, #0]
 800c046:	60c6      	str	r6, [r0, #12]
 800c048:	b13c      	cbz	r4, 800c05a <_Bfree+0x3a>
 800c04a:	69eb      	ldr	r3, [r5, #28]
 800c04c:	6862      	ldr	r2, [r4, #4]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c054:	6021      	str	r1, [r4, #0]
 800c056:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c05a:	bd70      	pop	{r4, r5, r6, pc}
 800c05c:	0800d9a5 	.word	0x0800d9a5
 800c060:	0800da25 	.word	0x0800da25

0800c064 <__multadd>:
 800c064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c068:	690d      	ldr	r5, [r1, #16]
 800c06a:	4607      	mov	r7, r0
 800c06c:	460c      	mov	r4, r1
 800c06e:	461e      	mov	r6, r3
 800c070:	f101 0c14 	add.w	ip, r1, #20
 800c074:	2000      	movs	r0, #0
 800c076:	f8dc 3000 	ldr.w	r3, [ip]
 800c07a:	b299      	uxth	r1, r3
 800c07c:	fb02 6101 	mla	r1, r2, r1, r6
 800c080:	0c1e      	lsrs	r6, r3, #16
 800c082:	0c0b      	lsrs	r3, r1, #16
 800c084:	fb02 3306 	mla	r3, r2, r6, r3
 800c088:	b289      	uxth	r1, r1
 800c08a:	3001      	adds	r0, #1
 800c08c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c090:	4285      	cmp	r5, r0
 800c092:	f84c 1b04 	str.w	r1, [ip], #4
 800c096:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c09a:	dcec      	bgt.n	800c076 <__multadd+0x12>
 800c09c:	b30e      	cbz	r6, 800c0e2 <__multadd+0x7e>
 800c09e:	68a3      	ldr	r3, [r4, #8]
 800c0a0:	42ab      	cmp	r3, r5
 800c0a2:	dc19      	bgt.n	800c0d8 <__multadd+0x74>
 800c0a4:	6861      	ldr	r1, [r4, #4]
 800c0a6:	4638      	mov	r0, r7
 800c0a8:	3101      	adds	r1, #1
 800c0aa:	f7ff ff79 	bl	800bfa0 <_Balloc>
 800c0ae:	4680      	mov	r8, r0
 800c0b0:	b928      	cbnz	r0, 800c0be <__multadd+0x5a>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	4b0c      	ldr	r3, [pc, #48]	@ (800c0e8 <__multadd+0x84>)
 800c0b6:	480d      	ldr	r0, [pc, #52]	@ (800c0ec <__multadd+0x88>)
 800c0b8:	21ba      	movs	r1, #186	@ 0xba
 800c0ba:	f000 fd19 	bl	800caf0 <__assert_func>
 800c0be:	6922      	ldr	r2, [r4, #16]
 800c0c0:	3202      	adds	r2, #2
 800c0c2:	f104 010c 	add.w	r1, r4, #12
 800c0c6:	0092      	lsls	r2, r2, #2
 800c0c8:	300c      	adds	r0, #12
 800c0ca:	f7ff f800 	bl	800b0ce <memcpy>
 800c0ce:	4621      	mov	r1, r4
 800c0d0:	4638      	mov	r0, r7
 800c0d2:	f7ff ffa5 	bl	800c020 <_Bfree>
 800c0d6:	4644      	mov	r4, r8
 800c0d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c0dc:	3501      	adds	r5, #1
 800c0de:	615e      	str	r6, [r3, #20]
 800c0e0:	6125      	str	r5, [r4, #16]
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0e8:	0800da14 	.word	0x0800da14
 800c0ec:	0800da25 	.word	0x0800da25

0800c0f0 <__hi0bits>:
 800c0f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	bf36      	itet	cc
 800c0f8:	0403      	lslcc	r3, r0, #16
 800c0fa:	2000      	movcs	r0, #0
 800c0fc:	2010      	movcc	r0, #16
 800c0fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c102:	bf3c      	itt	cc
 800c104:	021b      	lslcc	r3, r3, #8
 800c106:	3008      	addcc	r0, #8
 800c108:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c10c:	bf3c      	itt	cc
 800c10e:	011b      	lslcc	r3, r3, #4
 800c110:	3004      	addcc	r0, #4
 800c112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c116:	bf3c      	itt	cc
 800c118:	009b      	lslcc	r3, r3, #2
 800c11a:	3002      	addcc	r0, #2
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	db05      	blt.n	800c12c <__hi0bits+0x3c>
 800c120:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c124:	f100 0001 	add.w	r0, r0, #1
 800c128:	bf08      	it	eq
 800c12a:	2020      	moveq	r0, #32
 800c12c:	4770      	bx	lr

0800c12e <__lo0bits>:
 800c12e:	6803      	ldr	r3, [r0, #0]
 800c130:	4602      	mov	r2, r0
 800c132:	f013 0007 	ands.w	r0, r3, #7
 800c136:	d00b      	beq.n	800c150 <__lo0bits+0x22>
 800c138:	07d9      	lsls	r1, r3, #31
 800c13a:	d421      	bmi.n	800c180 <__lo0bits+0x52>
 800c13c:	0798      	lsls	r0, r3, #30
 800c13e:	bf49      	itett	mi
 800c140:	085b      	lsrmi	r3, r3, #1
 800c142:	089b      	lsrpl	r3, r3, #2
 800c144:	2001      	movmi	r0, #1
 800c146:	6013      	strmi	r3, [r2, #0]
 800c148:	bf5c      	itt	pl
 800c14a:	6013      	strpl	r3, [r2, #0]
 800c14c:	2002      	movpl	r0, #2
 800c14e:	4770      	bx	lr
 800c150:	b299      	uxth	r1, r3
 800c152:	b909      	cbnz	r1, 800c158 <__lo0bits+0x2a>
 800c154:	0c1b      	lsrs	r3, r3, #16
 800c156:	2010      	movs	r0, #16
 800c158:	b2d9      	uxtb	r1, r3
 800c15a:	b909      	cbnz	r1, 800c160 <__lo0bits+0x32>
 800c15c:	3008      	adds	r0, #8
 800c15e:	0a1b      	lsrs	r3, r3, #8
 800c160:	0719      	lsls	r1, r3, #28
 800c162:	bf04      	itt	eq
 800c164:	091b      	lsreq	r3, r3, #4
 800c166:	3004      	addeq	r0, #4
 800c168:	0799      	lsls	r1, r3, #30
 800c16a:	bf04      	itt	eq
 800c16c:	089b      	lsreq	r3, r3, #2
 800c16e:	3002      	addeq	r0, #2
 800c170:	07d9      	lsls	r1, r3, #31
 800c172:	d403      	bmi.n	800c17c <__lo0bits+0x4e>
 800c174:	085b      	lsrs	r3, r3, #1
 800c176:	f100 0001 	add.w	r0, r0, #1
 800c17a:	d003      	beq.n	800c184 <__lo0bits+0x56>
 800c17c:	6013      	str	r3, [r2, #0]
 800c17e:	4770      	bx	lr
 800c180:	2000      	movs	r0, #0
 800c182:	4770      	bx	lr
 800c184:	2020      	movs	r0, #32
 800c186:	4770      	bx	lr

0800c188 <__i2b>:
 800c188:	b510      	push	{r4, lr}
 800c18a:	460c      	mov	r4, r1
 800c18c:	2101      	movs	r1, #1
 800c18e:	f7ff ff07 	bl	800bfa0 <_Balloc>
 800c192:	4602      	mov	r2, r0
 800c194:	b928      	cbnz	r0, 800c1a2 <__i2b+0x1a>
 800c196:	4b05      	ldr	r3, [pc, #20]	@ (800c1ac <__i2b+0x24>)
 800c198:	4805      	ldr	r0, [pc, #20]	@ (800c1b0 <__i2b+0x28>)
 800c19a:	f240 1145 	movw	r1, #325	@ 0x145
 800c19e:	f000 fca7 	bl	800caf0 <__assert_func>
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	6144      	str	r4, [r0, #20]
 800c1a6:	6103      	str	r3, [r0, #16]
 800c1a8:	bd10      	pop	{r4, pc}
 800c1aa:	bf00      	nop
 800c1ac:	0800da14 	.word	0x0800da14
 800c1b0:	0800da25 	.word	0x0800da25

0800c1b4 <__multiply>:
 800c1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1b8:	4617      	mov	r7, r2
 800c1ba:	690a      	ldr	r2, [r1, #16]
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	bfa8      	it	ge
 800c1c2:	463b      	movge	r3, r7
 800c1c4:	4689      	mov	r9, r1
 800c1c6:	bfa4      	itt	ge
 800c1c8:	460f      	movge	r7, r1
 800c1ca:	4699      	movge	r9, r3
 800c1cc:	693d      	ldr	r5, [r7, #16]
 800c1ce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	6879      	ldr	r1, [r7, #4]
 800c1d6:	eb05 060a 	add.w	r6, r5, sl
 800c1da:	42b3      	cmp	r3, r6
 800c1dc:	b085      	sub	sp, #20
 800c1de:	bfb8      	it	lt
 800c1e0:	3101      	addlt	r1, #1
 800c1e2:	f7ff fedd 	bl	800bfa0 <_Balloc>
 800c1e6:	b930      	cbnz	r0, 800c1f6 <__multiply+0x42>
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	4b41      	ldr	r3, [pc, #260]	@ (800c2f0 <__multiply+0x13c>)
 800c1ec:	4841      	ldr	r0, [pc, #260]	@ (800c2f4 <__multiply+0x140>)
 800c1ee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c1f2:	f000 fc7d 	bl	800caf0 <__assert_func>
 800c1f6:	f100 0414 	add.w	r4, r0, #20
 800c1fa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c1fe:	4623      	mov	r3, r4
 800c200:	2200      	movs	r2, #0
 800c202:	4573      	cmp	r3, lr
 800c204:	d320      	bcc.n	800c248 <__multiply+0x94>
 800c206:	f107 0814 	add.w	r8, r7, #20
 800c20a:	f109 0114 	add.w	r1, r9, #20
 800c20e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c212:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c216:	9302      	str	r3, [sp, #8]
 800c218:	1beb      	subs	r3, r5, r7
 800c21a:	3b15      	subs	r3, #21
 800c21c:	f023 0303 	bic.w	r3, r3, #3
 800c220:	3304      	adds	r3, #4
 800c222:	3715      	adds	r7, #21
 800c224:	42bd      	cmp	r5, r7
 800c226:	bf38      	it	cc
 800c228:	2304      	movcc	r3, #4
 800c22a:	9301      	str	r3, [sp, #4]
 800c22c:	9b02      	ldr	r3, [sp, #8]
 800c22e:	9103      	str	r1, [sp, #12]
 800c230:	428b      	cmp	r3, r1
 800c232:	d80c      	bhi.n	800c24e <__multiply+0x9a>
 800c234:	2e00      	cmp	r6, #0
 800c236:	dd03      	ble.n	800c240 <__multiply+0x8c>
 800c238:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d055      	beq.n	800c2ec <__multiply+0x138>
 800c240:	6106      	str	r6, [r0, #16]
 800c242:	b005      	add	sp, #20
 800c244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c248:	f843 2b04 	str.w	r2, [r3], #4
 800c24c:	e7d9      	b.n	800c202 <__multiply+0x4e>
 800c24e:	f8b1 a000 	ldrh.w	sl, [r1]
 800c252:	f1ba 0f00 	cmp.w	sl, #0
 800c256:	d01f      	beq.n	800c298 <__multiply+0xe4>
 800c258:	46c4      	mov	ip, r8
 800c25a:	46a1      	mov	r9, r4
 800c25c:	2700      	movs	r7, #0
 800c25e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c262:	f8d9 3000 	ldr.w	r3, [r9]
 800c266:	fa1f fb82 	uxth.w	fp, r2
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c270:	443b      	add	r3, r7
 800c272:	f8d9 7000 	ldr.w	r7, [r9]
 800c276:	0c12      	lsrs	r2, r2, #16
 800c278:	0c3f      	lsrs	r7, r7, #16
 800c27a:	fb0a 7202 	mla	r2, sl, r2, r7
 800c27e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c282:	b29b      	uxth	r3, r3
 800c284:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c288:	4565      	cmp	r5, ip
 800c28a:	f849 3b04 	str.w	r3, [r9], #4
 800c28e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c292:	d8e4      	bhi.n	800c25e <__multiply+0xaa>
 800c294:	9b01      	ldr	r3, [sp, #4]
 800c296:	50e7      	str	r7, [r4, r3]
 800c298:	9b03      	ldr	r3, [sp, #12]
 800c29a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c29e:	3104      	adds	r1, #4
 800c2a0:	f1b9 0f00 	cmp.w	r9, #0
 800c2a4:	d020      	beq.n	800c2e8 <__multiply+0x134>
 800c2a6:	6823      	ldr	r3, [r4, #0]
 800c2a8:	4647      	mov	r7, r8
 800c2aa:	46a4      	mov	ip, r4
 800c2ac:	f04f 0a00 	mov.w	sl, #0
 800c2b0:	f8b7 b000 	ldrh.w	fp, [r7]
 800c2b4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c2b8:	fb09 220b 	mla	r2, r9, fp, r2
 800c2bc:	4452      	add	r2, sl
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2c4:	f84c 3b04 	str.w	r3, [ip], #4
 800c2c8:	f857 3b04 	ldr.w	r3, [r7], #4
 800c2cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c2d0:	f8bc 3000 	ldrh.w	r3, [ip]
 800c2d4:	fb09 330a 	mla	r3, r9, sl, r3
 800c2d8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c2dc:	42bd      	cmp	r5, r7
 800c2de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c2e2:	d8e5      	bhi.n	800c2b0 <__multiply+0xfc>
 800c2e4:	9a01      	ldr	r2, [sp, #4]
 800c2e6:	50a3      	str	r3, [r4, r2]
 800c2e8:	3404      	adds	r4, #4
 800c2ea:	e79f      	b.n	800c22c <__multiply+0x78>
 800c2ec:	3e01      	subs	r6, #1
 800c2ee:	e7a1      	b.n	800c234 <__multiply+0x80>
 800c2f0:	0800da14 	.word	0x0800da14
 800c2f4:	0800da25 	.word	0x0800da25

0800c2f8 <__pow5mult>:
 800c2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2fc:	4615      	mov	r5, r2
 800c2fe:	f012 0203 	ands.w	r2, r2, #3
 800c302:	4607      	mov	r7, r0
 800c304:	460e      	mov	r6, r1
 800c306:	d007      	beq.n	800c318 <__pow5mult+0x20>
 800c308:	4c25      	ldr	r4, [pc, #148]	@ (800c3a0 <__pow5mult+0xa8>)
 800c30a:	3a01      	subs	r2, #1
 800c30c:	2300      	movs	r3, #0
 800c30e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c312:	f7ff fea7 	bl	800c064 <__multadd>
 800c316:	4606      	mov	r6, r0
 800c318:	10ad      	asrs	r5, r5, #2
 800c31a:	d03d      	beq.n	800c398 <__pow5mult+0xa0>
 800c31c:	69fc      	ldr	r4, [r7, #28]
 800c31e:	b97c      	cbnz	r4, 800c340 <__pow5mult+0x48>
 800c320:	2010      	movs	r0, #16
 800c322:	f7ff fd87 	bl	800be34 <malloc>
 800c326:	4602      	mov	r2, r0
 800c328:	61f8      	str	r0, [r7, #28]
 800c32a:	b928      	cbnz	r0, 800c338 <__pow5mult+0x40>
 800c32c:	4b1d      	ldr	r3, [pc, #116]	@ (800c3a4 <__pow5mult+0xac>)
 800c32e:	481e      	ldr	r0, [pc, #120]	@ (800c3a8 <__pow5mult+0xb0>)
 800c330:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c334:	f000 fbdc 	bl	800caf0 <__assert_func>
 800c338:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c33c:	6004      	str	r4, [r0, #0]
 800c33e:	60c4      	str	r4, [r0, #12]
 800c340:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c344:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c348:	b94c      	cbnz	r4, 800c35e <__pow5mult+0x66>
 800c34a:	f240 2171 	movw	r1, #625	@ 0x271
 800c34e:	4638      	mov	r0, r7
 800c350:	f7ff ff1a 	bl	800c188 <__i2b>
 800c354:	2300      	movs	r3, #0
 800c356:	f8c8 0008 	str.w	r0, [r8, #8]
 800c35a:	4604      	mov	r4, r0
 800c35c:	6003      	str	r3, [r0, #0]
 800c35e:	f04f 0900 	mov.w	r9, #0
 800c362:	07eb      	lsls	r3, r5, #31
 800c364:	d50a      	bpl.n	800c37c <__pow5mult+0x84>
 800c366:	4631      	mov	r1, r6
 800c368:	4622      	mov	r2, r4
 800c36a:	4638      	mov	r0, r7
 800c36c:	f7ff ff22 	bl	800c1b4 <__multiply>
 800c370:	4631      	mov	r1, r6
 800c372:	4680      	mov	r8, r0
 800c374:	4638      	mov	r0, r7
 800c376:	f7ff fe53 	bl	800c020 <_Bfree>
 800c37a:	4646      	mov	r6, r8
 800c37c:	106d      	asrs	r5, r5, #1
 800c37e:	d00b      	beq.n	800c398 <__pow5mult+0xa0>
 800c380:	6820      	ldr	r0, [r4, #0]
 800c382:	b938      	cbnz	r0, 800c394 <__pow5mult+0x9c>
 800c384:	4622      	mov	r2, r4
 800c386:	4621      	mov	r1, r4
 800c388:	4638      	mov	r0, r7
 800c38a:	f7ff ff13 	bl	800c1b4 <__multiply>
 800c38e:	6020      	str	r0, [r4, #0]
 800c390:	f8c0 9000 	str.w	r9, [r0]
 800c394:	4604      	mov	r4, r0
 800c396:	e7e4      	b.n	800c362 <__pow5mult+0x6a>
 800c398:	4630      	mov	r0, r6
 800c39a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c39e:	bf00      	nop
 800c3a0:	0800dad8 	.word	0x0800dad8
 800c3a4:	0800d9a5 	.word	0x0800d9a5
 800c3a8:	0800da25 	.word	0x0800da25

0800c3ac <__lshift>:
 800c3ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3b0:	460c      	mov	r4, r1
 800c3b2:	6849      	ldr	r1, [r1, #4]
 800c3b4:	6923      	ldr	r3, [r4, #16]
 800c3b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c3ba:	68a3      	ldr	r3, [r4, #8]
 800c3bc:	4607      	mov	r7, r0
 800c3be:	4691      	mov	r9, r2
 800c3c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c3c4:	f108 0601 	add.w	r6, r8, #1
 800c3c8:	42b3      	cmp	r3, r6
 800c3ca:	db0b      	blt.n	800c3e4 <__lshift+0x38>
 800c3cc:	4638      	mov	r0, r7
 800c3ce:	f7ff fde7 	bl	800bfa0 <_Balloc>
 800c3d2:	4605      	mov	r5, r0
 800c3d4:	b948      	cbnz	r0, 800c3ea <__lshift+0x3e>
 800c3d6:	4602      	mov	r2, r0
 800c3d8:	4b28      	ldr	r3, [pc, #160]	@ (800c47c <__lshift+0xd0>)
 800c3da:	4829      	ldr	r0, [pc, #164]	@ (800c480 <__lshift+0xd4>)
 800c3dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c3e0:	f000 fb86 	bl	800caf0 <__assert_func>
 800c3e4:	3101      	adds	r1, #1
 800c3e6:	005b      	lsls	r3, r3, #1
 800c3e8:	e7ee      	b.n	800c3c8 <__lshift+0x1c>
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	f100 0114 	add.w	r1, r0, #20
 800c3f0:	f100 0210 	add.w	r2, r0, #16
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	4553      	cmp	r3, sl
 800c3f8:	db33      	blt.n	800c462 <__lshift+0xb6>
 800c3fa:	6920      	ldr	r0, [r4, #16]
 800c3fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c400:	f104 0314 	add.w	r3, r4, #20
 800c404:	f019 091f 	ands.w	r9, r9, #31
 800c408:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c40c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c410:	d02b      	beq.n	800c46a <__lshift+0xbe>
 800c412:	f1c9 0e20 	rsb	lr, r9, #32
 800c416:	468a      	mov	sl, r1
 800c418:	2200      	movs	r2, #0
 800c41a:	6818      	ldr	r0, [r3, #0]
 800c41c:	fa00 f009 	lsl.w	r0, r0, r9
 800c420:	4310      	orrs	r0, r2
 800c422:	f84a 0b04 	str.w	r0, [sl], #4
 800c426:	f853 2b04 	ldr.w	r2, [r3], #4
 800c42a:	459c      	cmp	ip, r3
 800c42c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c430:	d8f3      	bhi.n	800c41a <__lshift+0x6e>
 800c432:	ebac 0304 	sub.w	r3, ip, r4
 800c436:	3b15      	subs	r3, #21
 800c438:	f023 0303 	bic.w	r3, r3, #3
 800c43c:	3304      	adds	r3, #4
 800c43e:	f104 0015 	add.w	r0, r4, #21
 800c442:	4560      	cmp	r0, ip
 800c444:	bf88      	it	hi
 800c446:	2304      	movhi	r3, #4
 800c448:	50ca      	str	r2, [r1, r3]
 800c44a:	b10a      	cbz	r2, 800c450 <__lshift+0xa4>
 800c44c:	f108 0602 	add.w	r6, r8, #2
 800c450:	3e01      	subs	r6, #1
 800c452:	4638      	mov	r0, r7
 800c454:	612e      	str	r6, [r5, #16]
 800c456:	4621      	mov	r1, r4
 800c458:	f7ff fde2 	bl	800c020 <_Bfree>
 800c45c:	4628      	mov	r0, r5
 800c45e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c462:	f842 0f04 	str.w	r0, [r2, #4]!
 800c466:	3301      	adds	r3, #1
 800c468:	e7c5      	b.n	800c3f6 <__lshift+0x4a>
 800c46a:	3904      	subs	r1, #4
 800c46c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c470:	f841 2f04 	str.w	r2, [r1, #4]!
 800c474:	459c      	cmp	ip, r3
 800c476:	d8f9      	bhi.n	800c46c <__lshift+0xc0>
 800c478:	e7ea      	b.n	800c450 <__lshift+0xa4>
 800c47a:	bf00      	nop
 800c47c:	0800da14 	.word	0x0800da14
 800c480:	0800da25 	.word	0x0800da25

0800c484 <__mcmp>:
 800c484:	690a      	ldr	r2, [r1, #16]
 800c486:	4603      	mov	r3, r0
 800c488:	6900      	ldr	r0, [r0, #16]
 800c48a:	1a80      	subs	r0, r0, r2
 800c48c:	b530      	push	{r4, r5, lr}
 800c48e:	d10e      	bne.n	800c4ae <__mcmp+0x2a>
 800c490:	3314      	adds	r3, #20
 800c492:	3114      	adds	r1, #20
 800c494:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c498:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c49c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c4a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c4a4:	4295      	cmp	r5, r2
 800c4a6:	d003      	beq.n	800c4b0 <__mcmp+0x2c>
 800c4a8:	d205      	bcs.n	800c4b6 <__mcmp+0x32>
 800c4aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c4ae:	bd30      	pop	{r4, r5, pc}
 800c4b0:	42a3      	cmp	r3, r4
 800c4b2:	d3f3      	bcc.n	800c49c <__mcmp+0x18>
 800c4b4:	e7fb      	b.n	800c4ae <__mcmp+0x2a>
 800c4b6:	2001      	movs	r0, #1
 800c4b8:	e7f9      	b.n	800c4ae <__mcmp+0x2a>
	...

0800c4bc <__mdiff>:
 800c4bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4c0:	4689      	mov	r9, r1
 800c4c2:	4606      	mov	r6, r0
 800c4c4:	4611      	mov	r1, r2
 800c4c6:	4648      	mov	r0, r9
 800c4c8:	4614      	mov	r4, r2
 800c4ca:	f7ff ffdb 	bl	800c484 <__mcmp>
 800c4ce:	1e05      	subs	r5, r0, #0
 800c4d0:	d112      	bne.n	800c4f8 <__mdiff+0x3c>
 800c4d2:	4629      	mov	r1, r5
 800c4d4:	4630      	mov	r0, r6
 800c4d6:	f7ff fd63 	bl	800bfa0 <_Balloc>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	b928      	cbnz	r0, 800c4ea <__mdiff+0x2e>
 800c4de:	4b3f      	ldr	r3, [pc, #252]	@ (800c5dc <__mdiff+0x120>)
 800c4e0:	f240 2137 	movw	r1, #567	@ 0x237
 800c4e4:	483e      	ldr	r0, [pc, #248]	@ (800c5e0 <__mdiff+0x124>)
 800c4e6:	f000 fb03 	bl	800caf0 <__assert_func>
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c4f0:	4610      	mov	r0, r2
 800c4f2:	b003      	add	sp, #12
 800c4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4f8:	bfbc      	itt	lt
 800c4fa:	464b      	movlt	r3, r9
 800c4fc:	46a1      	movlt	r9, r4
 800c4fe:	4630      	mov	r0, r6
 800c500:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c504:	bfba      	itte	lt
 800c506:	461c      	movlt	r4, r3
 800c508:	2501      	movlt	r5, #1
 800c50a:	2500      	movge	r5, #0
 800c50c:	f7ff fd48 	bl	800bfa0 <_Balloc>
 800c510:	4602      	mov	r2, r0
 800c512:	b918      	cbnz	r0, 800c51c <__mdiff+0x60>
 800c514:	4b31      	ldr	r3, [pc, #196]	@ (800c5dc <__mdiff+0x120>)
 800c516:	f240 2145 	movw	r1, #581	@ 0x245
 800c51a:	e7e3      	b.n	800c4e4 <__mdiff+0x28>
 800c51c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c520:	6926      	ldr	r6, [r4, #16]
 800c522:	60c5      	str	r5, [r0, #12]
 800c524:	f109 0310 	add.w	r3, r9, #16
 800c528:	f109 0514 	add.w	r5, r9, #20
 800c52c:	f104 0e14 	add.w	lr, r4, #20
 800c530:	f100 0b14 	add.w	fp, r0, #20
 800c534:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c538:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c53c:	9301      	str	r3, [sp, #4]
 800c53e:	46d9      	mov	r9, fp
 800c540:	f04f 0c00 	mov.w	ip, #0
 800c544:	9b01      	ldr	r3, [sp, #4]
 800c546:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c54a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c54e:	9301      	str	r3, [sp, #4]
 800c550:	fa1f f38a 	uxth.w	r3, sl
 800c554:	4619      	mov	r1, r3
 800c556:	b283      	uxth	r3, r0
 800c558:	1acb      	subs	r3, r1, r3
 800c55a:	0c00      	lsrs	r0, r0, #16
 800c55c:	4463      	add	r3, ip
 800c55e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c562:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c566:	b29b      	uxth	r3, r3
 800c568:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c56c:	4576      	cmp	r6, lr
 800c56e:	f849 3b04 	str.w	r3, [r9], #4
 800c572:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c576:	d8e5      	bhi.n	800c544 <__mdiff+0x88>
 800c578:	1b33      	subs	r3, r6, r4
 800c57a:	3b15      	subs	r3, #21
 800c57c:	f023 0303 	bic.w	r3, r3, #3
 800c580:	3415      	adds	r4, #21
 800c582:	3304      	adds	r3, #4
 800c584:	42a6      	cmp	r6, r4
 800c586:	bf38      	it	cc
 800c588:	2304      	movcc	r3, #4
 800c58a:	441d      	add	r5, r3
 800c58c:	445b      	add	r3, fp
 800c58e:	461e      	mov	r6, r3
 800c590:	462c      	mov	r4, r5
 800c592:	4544      	cmp	r4, r8
 800c594:	d30e      	bcc.n	800c5b4 <__mdiff+0xf8>
 800c596:	f108 0103 	add.w	r1, r8, #3
 800c59a:	1b49      	subs	r1, r1, r5
 800c59c:	f021 0103 	bic.w	r1, r1, #3
 800c5a0:	3d03      	subs	r5, #3
 800c5a2:	45a8      	cmp	r8, r5
 800c5a4:	bf38      	it	cc
 800c5a6:	2100      	movcc	r1, #0
 800c5a8:	440b      	add	r3, r1
 800c5aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c5ae:	b191      	cbz	r1, 800c5d6 <__mdiff+0x11a>
 800c5b0:	6117      	str	r7, [r2, #16]
 800c5b2:	e79d      	b.n	800c4f0 <__mdiff+0x34>
 800c5b4:	f854 1b04 	ldr.w	r1, [r4], #4
 800c5b8:	46e6      	mov	lr, ip
 800c5ba:	0c08      	lsrs	r0, r1, #16
 800c5bc:	fa1c fc81 	uxtah	ip, ip, r1
 800c5c0:	4471      	add	r1, lr
 800c5c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c5c6:	b289      	uxth	r1, r1
 800c5c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c5cc:	f846 1b04 	str.w	r1, [r6], #4
 800c5d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c5d4:	e7dd      	b.n	800c592 <__mdiff+0xd6>
 800c5d6:	3f01      	subs	r7, #1
 800c5d8:	e7e7      	b.n	800c5aa <__mdiff+0xee>
 800c5da:	bf00      	nop
 800c5dc:	0800da14 	.word	0x0800da14
 800c5e0:	0800da25 	.word	0x0800da25

0800c5e4 <__d2b>:
 800c5e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c5e8:	460f      	mov	r7, r1
 800c5ea:	2101      	movs	r1, #1
 800c5ec:	ec59 8b10 	vmov	r8, r9, d0
 800c5f0:	4616      	mov	r6, r2
 800c5f2:	f7ff fcd5 	bl	800bfa0 <_Balloc>
 800c5f6:	4604      	mov	r4, r0
 800c5f8:	b930      	cbnz	r0, 800c608 <__d2b+0x24>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	4b23      	ldr	r3, [pc, #140]	@ (800c68c <__d2b+0xa8>)
 800c5fe:	4824      	ldr	r0, [pc, #144]	@ (800c690 <__d2b+0xac>)
 800c600:	f240 310f 	movw	r1, #783	@ 0x30f
 800c604:	f000 fa74 	bl	800caf0 <__assert_func>
 800c608:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c60c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c610:	b10d      	cbz	r5, 800c616 <__d2b+0x32>
 800c612:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c616:	9301      	str	r3, [sp, #4]
 800c618:	f1b8 0300 	subs.w	r3, r8, #0
 800c61c:	d023      	beq.n	800c666 <__d2b+0x82>
 800c61e:	4668      	mov	r0, sp
 800c620:	9300      	str	r3, [sp, #0]
 800c622:	f7ff fd84 	bl	800c12e <__lo0bits>
 800c626:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c62a:	b1d0      	cbz	r0, 800c662 <__d2b+0x7e>
 800c62c:	f1c0 0320 	rsb	r3, r0, #32
 800c630:	fa02 f303 	lsl.w	r3, r2, r3
 800c634:	430b      	orrs	r3, r1
 800c636:	40c2      	lsrs	r2, r0
 800c638:	6163      	str	r3, [r4, #20]
 800c63a:	9201      	str	r2, [sp, #4]
 800c63c:	9b01      	ldr	r3, [sp, #4]
 800c63e:	61a3      	str	r3, [r4, #24]
 800c640:	2b00      	cmp	r3, #0
 800c642:	bf0c      	ite	eq
 800c644:	2201      	moveq	r2, #1
 800c646:	2202      	movne	r2, #2
 800c648:	6122      	str	r2, [r4, #16]
 800c64a:	b1a5      	cbz	r5, 800c676 <__d2b+0x92>
 800c64c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c650:	4405      	add	r5, r0
 800c652:	603d      	str	r5, [r7, #0]
 800c654:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c658:	6030      	str	r0, [r6, #0]
 800c65a:	4620      	mov	r0, r4
 800c65c:	b003      	add	sp, #12
 800c65e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c662:	6161      	str	r1, [r4, #20]
 800c664:	e7ea      	b.n	800c63c <__d2b+0x58>
 800c666:	a801      	add	r0, sp, #4
 800c668:	f7ff fd61 	bl	800c12e <__lo0bits>
 800c66c:	9b01      	ldr	r3, [sp, #4]
 800c66e:	6163      	str	r3, [r4, #20]
 800c670:	3020      	adds	r0, #32
 800c672:	2201      	movs	r2, #1
 800c674:	e7e8      	b.n	800c648 <__d2b+0x64>
 800c676:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c67a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c67e:	6038      	str	r0, [r7, #0]
 800c680:	6918      	ldr	r0, [r3, #16]
 800c682:	f7ff fd35 	bl	800c0f0 <__hi0bits>
 800c686:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c68a:	e7e5      	b.n	800c658 <__d2b+0x74>
 800c68c:	0800da14 	.word	0x0800da14
 800c690:	0800da25 	.word	0x0800da25

0800c694 <__ssputs_r>:
 800c694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c698:	688e      	ldr	r6, [r1, #8]
 800c69a:	461f      	mov	r7, r3
 800c69c:	42be      	cmp	r6, r7
 800c69e:	680b      	ldr	r3, [r1, #0]
 800c6a0:	4682      	mov	sl, r0
 800c6a2:	460c      	mov	r4, r1
 800c6a4:	4690      	mov	r8, r2
 800c6a6:	d82d      	bhi.n	800c704 <__ssputs_r+0x70>
 800c6a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c6ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c6b0:	d026      	beq.n	800c700 <__ssputs_r+0x6c>
 800c6b2:	6965      	ldr	r5, [r4, #20]
 800c6b4:	6909      	ldr	r1, [r1, #16]
 800c6b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c6ba:	eba3 0901 	sub.w	r9, r3, r1
 800c6be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c6c2:	1c7b      	adds	r3, r7, #1
 800c6c4:	444b      	add	r3, r9
 800c6c6:	106d      	asrs	r5, r5, #1
 800c6c8:	429d      	cmp	r5, r3
 800c6ca:	bf38      	it	cc
 800c6cc:	461d      	movcc	r5, r3
 800c6ce:	0553      	lsls	r3, r2, #21
 800c6d0:	d527      	bpl.n	800c722 <__ssputs_r+0x8e>
 800c6d2:	4629      	mov	r1, r5
 800c6d4:	f7ff fbd8 	bl	800be88 <_malloc_r>
 800c6d8:	4606      	mov	r6, r0
 800c6da:	b360      	cbz	r0, 800c736 <__ssputs_r+0xa2>
 800c6dc:	6921      	ldr	r1, [r4, #16]
 800c6de:	464a      	mov	r2, r9
 800c6e0:	f7fe fcf5 	bl	800b0ce <memcpy>
 800c6e4:	89a3      	ldrh	r3, [r4, #12]
 800c6e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c6ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6ee:	81a3      	strh	r3, [r4, #12]
 800c6f0:	6126      	str	r6, [r4, #16]
 800c6f2:	6165      	str	r5, [r4, #20]
 800c6f4:	444e      	add	r6, r9
 800c6f6:	eba5 0509 	sub.w	r5, r5, r9
 800c6fa:	6026      	str	r6, [r4, #0]
 800c6fc:	60a5      	str	r5, [r4, #8]
 800c6fe:	463e      	mov	r6, r7
 800c700:	42be      	cmp	r6, r7
 800c702:	d900      	bls.n	800c706 <__ssputs_r+0x72>
 800c704:	463e      	mov	r6, r7
 800c706:	6820      	ldr	r0, [r4, #0]
 800c708:	4632      	mov	r2, r6
 800c70a:	4641      	mov	r1, r8
 800c70c:	f000 f9c6 	bl	800ca9c <memmove>
 800c710:	68a3      	ldr	r3, [r4, #8]
 800c712:	1b9b      	subs	r3, r3, r6
 800c714:	60a3      	str	r3, [r4, #8]
 800c716:	6823      	ldr	r3, [r4, #0]
 800c718:	4433      	add	r3, r6
 800c71a:	6023      	str	r3, [r4, #0]
 800c71c:	2000      	movs	r0, #0
 800c71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c722:	462a      	mov	r2, r5
 800c724:	f000 fa28 	bl	800cb78 <_realloc_r>
 800c728:	4606      	mov	r6, r0
 800c72a:	2800      	cmp	r0, #0
 800c72c:	d1e0      	bne.n	800c6f0 <__ssputs_r+0x5c>
 800c72e:	6921      	ldr	r1, [r4, #16]
 800c730:	4650      	mov	r0, sl
 800c732:	f7ff fb35 	bl	800bda0 <_free_r>
 800c736:	230c      	movs	r3, #12
 800c738:	f8ca 3000 	str.w	r3, [sl]
 800c73c:	89a3      	ldrh	r3, [r4, #12]
 800c73e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c742:	81a3      	strh	r3, [r4, #12]
 800c744:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c748:	e7e9      	b.n	800c71e <__ssputs_r+0x8a>
	...

0800c74c <_svfiprintf_r>:
 800c74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c750:	4698      	mov	r8, r3
 800c752:	898b      	ldrh	r3, [r1, #12]
 800c754:	061b      	lsls	r3, r3, #24
 800c756:	b09d      	sub	sp, #116	@ 0x74
 800c758:	4607      	mov	r7, r0
 800c75a:	460d      	mov	r5, r1
 800c75c:	4614      	mov	r4, r2
 800c75e:	d510      	bpl.n	800c782 <_svfiprintf_r+0x36>
 800c760:	690b      	ldr	r3, [r1, #16]
 800c762:	b973      	cbnz	r3, 800c782 <_svfiprintf_r+0x36>
 800c764:	2140      	movs	r1, #64	@ 0x40
 800c766:	f7ff fb8f 	bl	800be88 <_malloc_r>
 800c76a:	6028      	str	r0, [r5, #0]
 800c76c:	6128      	str	r0, [r5, #16]
 800c76e:	b930      	cbnz	r0, 800c77e <_svfiprintf_r+0x32>
 800c770:	230c      	movs	r3, #12
 800c772:	603b      	str	r3, [r7, #0]
 800c774:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c778:	b01d      	add	sp, #116	@ 0x74
 800c77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c77e:	2340      	movs	r3, #64	@ 0x40
 800c780:	616b      	str	r3, [r5, #20]
 800c782:	2300      	movs	r3, #0
 800c784:	9309      	str	r3, [sp, #36]	@ 0x24
 800c786:	2320      	movs	r3, #32
 800c788:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c78c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c790:	2330      	movs	r3, #48	@ 0x30
 800c792:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c930 <_svfiprintf_r+0x1e4>
 800c796:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c79a:	f04f 0901 	mov.w	r9, #1
 800c79e:	4623      	mov	r3, r4
 800c7a0:	469a      	mov	sl, r3
 800c7a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7a6:	b10a      	cbz	r2, 800c7ac <_svfiprintf_r+0x60>
 800c7a8:	2a25      	cmp	r2, #37	@ 0x25
 800c7aa:	d1f9      	bne.n	800c7a0 <_svfiprintf_r+0x54>
 800c7ac:	ebba 0b04 	subs.w	fp, sl, r4
 800c7b0:	d00b      	beq.n	800c7ca <_svfiprintf_r+0x7e>
 800c7b2:	465b      	mov	r3, fp
 800c7b4:	4622      	mov	r2, r4
 800c7b6:	4629      	mov	r1, r5
 800c7b8:	4638      	mov	r0, r7
 800c7ba:	f7ff ff6b 	bl	800c694 <__ssputs_r>
 800c7be:	3001      	adds	r0, #1
 800c7c0:	f000 80a7 	beq.w	800c912 <_svfiprintf_r+0x1c6>
 800c7c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7c6:	445a      	add	r2, fp
 800c7c8:	9209      	str	r2, [sp, #36]	@ 0x24
 800c7ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	f000 809f 	beq.w	800c912 <_svfiprintf_r+0x1c6>
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c7da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7de:	f10a 0a01 	add.w	sl, sl, #1
 800c7e2:	9304      	str	r3, [sp, #16]
 800c7e4:	9307      	str	r3, [sp, #28]
 800c7e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c7ea:	931a      	str	r3, [sp, #104]	@ 0x68
 800c7ec:	4654      	mov	r4, sl
 800c7ee:	2205      	movs	r2, #5
 800c7f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7f4:	484e      	ldr	r0, [pc, #312]	@ (800c930 <_svfiprintf_r+0x1e4>)
 800c7f6:	f7f3 fceb 	bl	80001d0 <memchr>
 800c7fa:	9a04      	ldr	r2, [sp, #16]
 800c7fc:	b9d8      	cbnz	r0, 800c836 <_svfiprintf_r+0xea>
 800c7fe:	06d0      	lsls	r0, r2, #27
 800c800:	bf44      	itt	mi
 800c802:	2320      	movmi	r3, #32
 800c804:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c808:	0711      	lsls	r1, r2, #28
 800c80a:	bf44      	itt	mi
 800c80c:	232b      	movmi	r3, #43	@ 0x2b
 800c80e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c812:	f89a 3000 	ldrb.w	r3, [sl]
 800c816:	2b2a      	cmp	r3, #42	@ 0x2a
 800c818:	d015      	beq.n	800c846 <_svfiprintf_r+0xfa>
 800c81a:	9a07      	ldr	r2, [sp, #28]
 800c81c:	4654      	mov	r4, sl
 800c81e:	2000      	movs	r0, #0
 800c820:	f04f 0c0a 	mov.w	ip, #10
 800c824:	4621      	mov	r1, r4
 800c826:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c82a:	3b30      	subs	r3, #48	@ 0x30
 800c82c:	2b09      	cmp	r3, #9
 800c82e:	d94b      	bls.n	800c8c8 <_svfiprintf_r+0x17c>
 800c830:	b1b0      	cbz	r0, 800c860 <_svfiprintf_r+0x114>
 800c832:	9207      	str	r2, [sp, #28]
 800c834:	e014      	b.n	800c860 <_svfiprintf_r+0x114>
 800c836:	eba0 0308 	sub.w	r3, r0, r8
 800c83a:	fa09 f303 	lsl.w	r3, r9, r3
 800c83e:	4313      	orrs	r3, r2
 800c840:	9304      	str	r3, [sp, #16]
 800c842:	46a2      	mov	sl, r4
 800c844:	e7d2      	b.n	800c7ec <_svfiprintf_r+0xa0>
 800c846:	9b03      	ldr	r3, [sp, #12]
 800c848:	1d19      	adds	r1, r3, #4
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	9103      	str	r1, [sp, #12]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	bfbb      	ittet	lt
 800c852:	425b      	neglt	r3, r3
 800c854:	f042 0202 	orrlt.w	r2, r2, #2
 800c858:	9307      	strge	r3, [sp, #28]
 800c85a:	9307      	strlt	r3, [sp, #28]
 800c85c:	bfb8      	it	lt
 800c85e:	9204      	strlt	r2, [sp, #16]
 800c860:	7823      	ldrb	r3, [r4, #0]
 800c862:	2b2e      	cmp	r3, #46	@ 0x2e
 800c864:	d10a      	bne.n	800c87c <_svfiprintf_r+0x130>
 800c866:	7863      	ldrb	r3, [r4, #1]
 800c868:	2b2a      	cmp	r3, #42	@ 0x2a
 800c86a:	d132      	bne.n	800c8d2 <_svfiprintf_r+0x186>
 800c86c:	9b03      	ldr	r3, [sp, #12]
 800c86e:	1d1a      	adds	r2, r3, #4
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	9203      	str	r2, [sp, #12]
 800c874:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c878:	3402      	adds	r4, #2
 800c87a:	9305      	str	r3, [sp, #20]
 800c87c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c940 <_svfiprintf_r+0x1f4>
 800c880:	7821      	ldrb	r1, [r4, #0]
 800c882:	2203      	movs	r2, #3
 800c884:	4650      	mov	r0, sl
 800c886:	f7f3 fca3 	bl	80001d0 <memchr>
 800c88a:	b138      	cbz	r0, 800c89c <_svfiprintf_r+0x150>
 800c88c:	9b04      	ldr	r3, [sp, #16]
 800c88e:	eba0 000a 	sub.w	r0, r0, sl
 800c892:	2240      	movs	r2, #64	@ 0x40
 800c894:	4082      	lsls	r2, r0
 800c896:	4313      	orrs	r3, r2
 800c898:	3401      	adds	r4, #1
 800c89a:	9304      	str	r3, [sp, #16]
 800c89c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8a0:	4824      	ldr	r0, [pc, #144]	@ (800c934 <_svfiprintf_r+0x1e8>)
 800c8a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c8a6:	2206      	movs	r2, #6
 800c8a8:	f7f3 fc92 	bl	80001d0 <memchr>
 800c8ac:	2800      	cmp	r0, #0
 800c8ae:	d036      	beq.n	800c91e <_svfiprintf_r+0x1d2>
 800c8b0:	4b21      	ldr	r3, [pc, #132]	@ (800c938 <_svfiprintf_r+0x1ec>)
 800c8b2:	bb1b      	cbnz	r3, 800c8fc <_svfiprintf_r+0x1b0>
 800c8b4:	9b03      	ldr	r3, [sp, #12]
 800c8b6:	3307      	adds	r3, #7
 800c8b8:	f023 0307 	bic.w	r3, r3, #7
 800c8bc:	3308      	adds	r3, #8
 800c8be:	9303      	str	r3, [sp, #12]
 800c8c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8c2:	4433      	add	r3, r6
 800c8c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8c6:	e76a      	b.n	800c79e <_svfiprintf_r+0x52>
 800c8c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8cc:	460c      	mov	r4, r1
 800c8ce:	2001      	movs	r0, #1
 800c8d0:	e7a8      	b.n	800c824 <_svfiprintf_r+0xd8>
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	3401      	adds	r4, #1
 800c8d6:	9305      	str	r3, [sp, #20]
 800c8d8:	4619      	mov	r1, r3
 800c8da:	f04f 0c0a 	mov.w	ip, #10
 800c8de:	4620      	mov	r0, r4
 800c8e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8e4:	3a30      	subs	r2, #48	@ 0x30
 800c8e6:	2a09      	cmp	r2, #9
 800c8e8:	d903      	bls.n	800c8f2 <_svfiprintf_r+0x1a6>
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d0c6      	beq.n	800c87c <_svfiprintf_r+0x130>
 800c8ee:	9105      	str	r1, [sp, #20]
 800c8f0:	e7c4      	b.n	800c87c <_svfiprintf_r+0x130>
 800c8f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8f6:	4604      	mov	r4, r0
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	e7f0      	b.n	800c8de <_svfiprintf_r+0x192>
 800c8fc:	ab03      	add	r3, sp, #12
 800c8fe:	9300      	str	r3, [sp, #0]
 800c900:	462a      	mov	r2, r5
 800c902:	4b0e      	ldr	r3, [pc, #56]	@ (800c93c <_svfiprintf_r+0x1f0>)
 800c904:	a904      	add	r1, sp, #16
 800c906:	4638      	mov	r0, r7
 800c908:	f7fd fe26 	bl	800a558 <_printf_float>
 800c90c:	1c42      	adds	r2, r0, #1
 800c90e:	4606      	mov	r6, r0
 800c910:	d1d6      	bne.n	800c8c0 <_svfiprintf_r+0x174>
 800c912:	89ab      	ldrh	r3, [r5, #12]
 800c914:	065b      	lsls	r3, r3, #25
 800c916:	f53f af2d 	bmi.w	800c774 <_svfiprintf_r+0x28>
 800c91a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c91c:	e72c      	b.n	800c778 <_svfiprintf_r+0x2c>
 800c91e:	ab03      	add	r3, sp, #12
 800c920:	9300      	str	r3, [sp, #0]
 800c922:	462a      	mov	r2, r5
 800c924:	4b05      	ldr	r3, [pc, #20]	@ (800c93c <_svfiprintf_r+0x1f0>)
 800c926:	a904      	add	r1, sp, #16
 800c928:	4638      	mov	r0, r7
 800c92a:	f7fe f8ad 	bl	800aa88 <_printf_i>
 800c92e:	e7ed      	b.n	800c90c <_svfiprintf_r+0x1c0>
 800c930:	0800da7e 	.word	0x0800da7e
 800c934:	0800da88 	.word	0x0800da88
 800c938:	0800a559 	.word	0x0800a559
 800c93c:	0800c695 	.word	0x0800c695
 800c940:	0800da84 	.word	0x0800da84

0800c944 <__sflush_r>:
 800c944:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c94c:	0716      	lsls	r6, r2, #28
 800c94e:	4605      	mov	r5, r0
 800c950:	460c      	mov	r4, r1
 800c952:	d454      	bmi.n	800c9fe <__sflush_r+0xba>
 800c954:	684b      	ldr	r3, [r1, #4]
 800c956:	2b00      	cmp	r3, #0
 800c958:	dc02      	bgt.n	800c960 <__sflush_r+0x1c>
 800c95a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	dd48      	ble.n	800c9f2 <__sflush_r+0xae>
 800c960:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c962:	2e00      	cmp	r6, #0
 800c964:	d045      	beq.n	800c9f2 <__sflush_r+0xae>
 800c966:	2300      	movs	r3, #0
 800c968:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c96c:	682f      	ldr	r7, [r5, #0]
 800c96e:	6a21      	ldr	r1, [r4, #32]
 800c970:	602b      	str	r3, [r5, #0]
 800c972:	d030      	beq.n	800c9d6 <__sflush_r+0x92>
 800c974:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c976:	89a3      	ldrh	r3, [r4, #12]
 800c978:	0759      	lsls	r1, r3, #29
 800c97a:	d505      	bpl.n	800c988 <__sflush_r+0x44>
 800c97c:	6863      	ldr	r3, [r4, #4]
 800c97e:	1ad2      	subs	r2, r2, r3
 800c980:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c982:	b10b      	cbz	r3, 800c988 <__sflush_r+0x44>
 800c984:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c986:	1ad2      	subs	r2, r2, r3
 800c988:	2300      	movs	r3, #0
 800c98a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c98c:	6a21      	ldr	r1, [r4, #32]
 800c98e:	4628      	mov	r0, r5
 800c990:	47b0      	blx	r6
 800c992:	1c43      	adds	r3, r0, #1
 800c994:	89a3      	ldrh	r3, [r4, #12]
 800c996:	d106      	bne.n	800c9a6 <__sflush_r+0x62>
 800c998:	6829      	ldr	r1, [r5, #0]
 800c99a:	291d      	cmp	r1, #29
 800c99c:	d82b      	bhi.n	800c9f6 <__sflush_r+0xb2>
 800c99e:	4a2a      	ldr	r2, [pc, #168]	@ (800ca48 <__sflush_r+0x104>)
 800c9a0:	40ca      	lsrs	r2, r1
 800c9a2:	07d6      	lsls	r6, r2, #31
 800c9a4:	d527      	bpl.n	800c9f6 <__sflush_r+0xb2>
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	6062      	str	r2, [r4, #4]
 800c9aa:	04d9      	lsls	r1, r3, #19
 800c9ac:	6922      	ldr	r2, [r4, #16]
 800c9ae:	6022      	str	r2, [r4, #0]
 800c9b0:	d504      	bpl.n	800c9bc <__sflush_r+0x78>
 800c9b2:	1c42      	adds	r2, r0, #1
 800c9b4:	d101      	bne.n	800c9ba <__sflush_r+0x76>
 800c9b6:	682b      	ldr	r3, [r5, #0]
 800c9b8:	b903      	cbnz	r3, 800c9bc <__sflush_r+0x78>
 800c9ba:	6560      	str	r0, [r4, #84]	@ 0x54
 800c9bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c9be:	602f      	str	r7, [r5, #0]
 800c9c0:	b1b9      	cbz	r1, 800c9f2 <__sflush_r+0xae>
 800c9c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c9c6:	4299      	cmp	r1, r3
 800c9c8:	d002      	beq.n	800c9d0 <__sflush_r+0x8c>
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	f7ff f9e8 	bl	800bda0 <_free_r>
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	6363      	str	r3, [r4, #52]	@ 0x34
 800c9d4:	e00d      	b.n	800c9f2 <__sflush_r+0xae>
 800c9d6:	2301      	movs	r3, #1
 800c9d8:	4628      	mov	r0, r5
 800c9da:	47b0      	blx	r6
 800c9dc:	4602      	mov	r2, r0
 800c9de:	1c50      	adds	r0, r2, #1
 800c9e0:	d1c9      	bne.n	800c976 <__sflush_r+0x32>
 800c9e2:	682b      	ldr	r3, [r5, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d0c6      	beq.n	800c976 <__sflush_r+0x32>
 800c9e8:	2b1d      	cmp	r3, #29
 800c9ea:	d001      	beq.n	800c9f0 <__sflush_r+0xac>
 800c9ec:	2b16      	cmp	r3, #22
 800c9ee:	d11e      	bne.n	800ca2e <__sflush_r+0xea>
 800c9f0:	602f      	str	r7, [r5, #0]
 800c9f2:	2000      	movs	r0, #0
 800c9f4:	e022      	b.n	800ca3c <__sflush_r+0xf8>
 800c9f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9fa:	b21b      	sxth	r3, r3
 800c9fc:	e01b      	b.n	800ca36 <__sflush_r+0xf2>
 800c9fe:	690f      	ldr	r7, [r1, #16]
 800ca00:	2f00      	cmp	r7, #0
 800ca02:	d0f6      	beq.n	800c9f2 <__sflush_r+0xae>
 800ca04:	0793      	lsls	r3, r2, #30
 800ca06:	680e      	ldr	r6, [r1, #0]
 800ca08:	bf08      	it	eq
 800ca0a:	694b      	ldreq	r3, [r1, #20]
 800ca0c:	600f      	str	r7, [r1, #0]
 800ca0e:	bf18      	it	ne
 800ca10:	2300      	movne	r3, #0
 800ca12:	eba6 0807 	sub.w	r8, r6, r7
 800ca16:	608b      	str	r3, [r1, #8]
 800ca18:	f1b8 0f00 	cmp.w	r8, #0
 800ca1c:	dde9      	ble.n	800c9f2 <__sflush_r+0xae>
 800ca1e:	6a21      	ldr	r1, [r4, #32]
 800ca20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ca22:	4643      	mov	r3, r8
 800ca24:	463a      	mov	r2, r7
 800ca26:	4628      	mov	r0, r5
 800ca28:	47b0      	blx	r6
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	dc08      	bgt.n	800ca40 <__sflush_r+0xfc>
 800ca2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca36:	81a3      	strh	r3, [r4, #12]
 800ca38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca40:	4407      	add	r7, r0
 800ca42:	eba8 0800 	sub.w	r8, r8, r0
 800ca46:	e7e7      	b.n	800ca18 <__sflush_r+0xd4>
 800ca48:	20400001 	.word	0x20400001

0800ca4c <_fflush_r>:
 800ca4c:	b538      	push	{r3, r4, r5, lr}
 800ca4e:	690b      	ldr	r3, [r1, #16]
 800ca50:	4605      	mov	r5, r0
 800ca52:	460c      	mov	r4, r1
 800ca54:	b913      	cbnz	r3, 800ca5c <_fflush_r+0x10>
 800ca56:	2500      	movs	r5, #0
 800ca58:	4628      	mov	r0, r5
 800ca5a:	bd38      	pop	{r3, r4, r5, pc}
 800ca5c:	b118      	cbz	r0, 800ca66 <_fflush_r+0x1a>
 800ca5e:	6a03      	ldr	r3, [r0, #32]
 800ca60:	b90b      	cbnz	r3, 800ca66 <_fflush_r+0x1a>
 800ca62:	f7fe f9bb 	bl	800addc <__sinit>
 800ca66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d0f3      	beq.n	800ca56 <_fflush_r+0xa>
 800ca6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ca70:	07d0      	lsls	r0, r2, #31
 800ca72:	d404      	bmi.n	800ca7e <_fflush_r+0x32>
 800ca74:	0599      	lsls	r1, r3, #22
 800ca76:	d402      	bmi.n	800ca7e <_fflush_r+0x32>
 800ca78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca7a:	f7fe fb26 	bl	800b0ca <__retarget_lock_acquire_recursive>
 800ca7e:	4628      	mov	r0, r5
 800ca80:	4621      	mov	r1, r4
 800ca82:	f7ff ff5f 	bl	800c944 <__sflush_r>
 800ca86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ca88:	07da      	lsls	r2, r3, #31
 800ca8a:	4605      	mov	r5, r0
 800ca8c:	d4e4      	bmi.n	800ca58 <_fflush_r+0xc>
 800ca8e:	89a3      	ldrh	r3, [r4, #12]
 800ca90:	059b      	lsls	r3, r3, #22
 800ca92:	d4e1      	bmi.n	800ca58 <_fflush_r+0xc>
 800ca94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ca96:	f7fe fb19 	bl	800b0cc <__retarget_lock_release_recursive>
 800ca9a:	e7dd      	b.n	800ca58 <_fflush_r+0xc>

0800ca9c <memmove>:
 800ca9c:	4288      	cmp	r0, r1
 800ca9e:	b510      	push	{r4, lr}
 800caa0:	eb01 0402 	add.w	r4, r1, r2
 800caa4:	d902      	bls.n	800caac <memmove+0x10>
 800caa6:	4284      	cmp	r4, r0
 800caa8:	4623      	mov	r3, r4
 800caaa:	d807      	bhi.n	800cabc <memmove+0x20>
 800caac:	1e43      	subs	r3, r0, #1
 800caae:	42a1      	cmp	r1, r4
 800cab0:	d008      	beq.n	800cac4 <memmove+0x28>
 800cab2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cab6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800caba:	e7f8      	b.n	800caae <memmove+0x12>
 800cabc:	4402      	add	r2, r0
 800cabe:	4601      	mov	r1, r0
 800cac0:	428a      	cmp	r2, r1
 800cac2:	d100      	bne.n	800cac6 <memmove+0x2a>
 800cac4:	bd10      	pop	{r4, pc}
 800cac6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800caca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cace:	e7f7      	b.n	800cac0 <memmove+0x24>

0800cad0 <_sbrk_r>:
 800cad0:	b538      	push	{r3, r4, r5, lr}
 800cad2:	4d06      	ldr	r5, [pc, #24]	@ (800caec <_sbrk_r+0x1c>)
 800cad4:	2300      	movs	r3, #0
 800cad6:	4604      	mov	r4, r0
 800cad8:	4608      	mov	r0, r1
 800cada:	602b      	str	r3, [r5, #0]
 800cadc:	f7f5 fafe 	bl	80020dc <_sbrk>
 800cae0:	1c43      	adds	r3, r0, #1
 800cae2:	d102      	bne.n	800caea <_sbrk_r+0x1a>
 800cae4:	682b      	ldr	r3, [r5, #0]
 800cae6:	b103      	cbz	r3, 800caea <_sbrk_r+0x1a>
 800cae8:	6023      	str	r3, [r4, #0]
 800caea:	bd38      	pop	{r3, r4, r5, pc}
 800caec:	20001ed0 	.word	0x20001ed0

0800caf0 <__assert_func>:
 800caf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800caf2:	4614      	mov	r4, r2
 800caf4:	461a      	mov	r2, r3
 800caf6:	4b09      	ldr	r3, [pc, #36]	@ (800cb1c <__assert_func+0x2c>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4605      	mov	r5, r0
 800cafc:	68d8      	ldr	r0, [r3, #12]
 800cafe:	b14c      	cbz	r4, 800cb14 <__assert_func+0x24>
 800cb00:	4b07      	ldr	r3, [pc, #28]	@ (800cb20 <__assert_func+0x30>)
 800cb02:	9100      	str	r1, [sp, #0]
 800cb04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb08:	4906      	ldr	r1, [pc, #24]	@ (800cb24 <__assert_func+0x34>)
 800cb0a:	462b      	mov	r3, r5
 800cb0c:	f000 f870 	bl	800cbf0 <fiprintf>
 800cb10:	f000 f880 	bl	800cc14 <abort>
 800cb14:	4b04      	ldr	r3, [pc, #16]	@ (800cb28 <__assert_func+0x38>)
 800cb16:	461c      	mov	r4, r3
 800cb18:	e7f3      	b.n	800cb02 <__assert_func+0x12>
 800cb1a:	bf00      	nop
 800cb1c:	2000001c 	.word	0x2000001c
 800cb20:	0800da99 	.word	0x0800da99
 800cb24:	0800daa6 	.word	0x0800daa6
 800cb28:	0800dad4 	.word	0x0800dad4

0800cb2c <_calloc_r>:
 800cb2c:	b570      	push	{r4, r5, r6, lr}
 800cb2e:	fba1 5402 	umull	r5, r4, r1, r2
 800cb32:	b934      	cbnz	r4, 800cb42 <_calloc_r+0x16>
 800cb34:	4629      	mov	r1, r5
 800cb36:	f7ff f9a7 	bl	800be88 <_malloc_r>
 800cb3a:	4606      	mov	r6, r0
 800cb3c:	b928      	cbnz	r0, 800cb4a <_calloc_r+0x1e>
 800cb3e:	4630      	mov	r0, r6
 800cb40:	bd70      	pop	{r4, r5, r6, pc}
 800cb42:	220c      	movs	r2, #12
 800cb44:	6002      	str	r2, [r0, #0]
 800cb46:	2600      	movs	r6, #0
 800cb48:	e7f9      	b.n	800cb3e <_calloc_r+0x12>
 800cb4a:	462a      	mov	r2, r5
 800cb4c:	4621      	mov	r1, r4
 800cb4e:	f7fe f9e0 	bl	800af12 <memset>
 800cb52:	e7f4      	b.n	800cb3e <_calloc_r+0x12>

0800cb54 <__ascii_mbtowc>:
 800cb54:	b082      	sub	sp, #8
 800cb56:	b901      	cbnz	r1, 800cb5a <__ascii_mbtowc+0x6>
 800cb58:	a901      	add	r1, sp, #4
 800cb5a:	b142      	cbz	r2, 800cb6e <__ascii_mbtowc+0x1a>
 800cb5c:	b14b      	cbz	r3, 800cb72 <__ascii_mbtowc+0x1e>
 800cb5e:	7813      	ldrb	r3, [r2, #0]
 800cb60:	600b      	str	r3, [r1, #0]
 800cb62:	7812      	ldrb	r2, [r2, #0]
 800cb64:	1e10      	subs	r0, r2, #0
 800cb66:	bf18      	it	ne
 800cb68:	2001      	movne	r0, #1
 800cb6a:	b002      	add	sp, #8
 800cb6c:	4770      	bx	lr
 800cb6e:	4610      	mov	r0, r2
 800cb70:	e7fb      	b.n	800cb6a <__ascii_mbtowc+0x16>
 800cb72:	f06f 0001 	mvn.w	r0, #1
 800cb76:	e7f8      	b.n	800cb6a <__ascii_mbtowc+0x16>

0800cb78 <_realloc_r>:
 800cb78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb7c:	4607      	mov	r7, r0
 800cb7e:	4614      	mov	r4, r2
 800cb80:	460d      	mov	r5, r1
 800cb82:	b921      	cbnz	r1, 800cb8e <_realloc_r+0x16>
 800cb84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb88:	4611      	mov	r1, r2
 800cb8a:	f7ff b97d 	b.w	800be88 <_malloc_r>
 800cb8e:	b92a      	cbnz	r2, 800cb9c <_realloc_r+0x24>
 800cb90:	f7ff f906 	bl	800bda0 <_free_r>
 800cb94:	4625      	mov	r5, r4
 800cb96:	4628      	mov	r0, r5
 800cb98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb9c:	f000 f841 	bl	800cc22 <_malloc_usable_size_r>
 800cba0:	4284      	cmp	r4, r0
 800cba2:	4606      	mov	r6, r0
 800cba4:	d802      	bhi.n	800cbac <_realloc_r+0x34>
 800cba6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cbaa:	d8f4      	bhi.n	800cb96 <_realloc_r+0x1e>
 800cbac:	4621      	mov	r1, r4
 800cbae:	4638      	mov	r0, r7
 800cbb0:	f7ff f96a 	bl	800be88 <_malloc_r>
 800cbb4:	4680      	mov	r8, r0
 800cbb6:	b908      	cbnz	r0, 800cbbc <_realloc_r+0x44>
 800cbb8:	4645      	mov	r5, r8
 800cbba:	e7ec      	b.n	800cb96 <_realloc_r+0x1e>
 800cbbc:	42b4      	cmp	r4, r6
 800cbbe:	4622      	mov	r2, r4
 800cbc0:	4629      	mov	r1, r5
 800cbc2:	bf28      	it	cs
 800cbc4:	4632      	movcs	r2, r6
 800cbc6:	f7fe fa82 	bl	800b0ce <memcpy>
 800cbca:	4629      	mov	r1, r5
 800cbcc:	4638      	mov	r0, r7
 800cbce:	f7ff f8e7 	bl	800bda0 <_free_r>
 800cbd2:	e7f1      	b.n	800cbb8 <_realloc_r+0x40>

0800cbd4 <__ascii_wctomb>:
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	4608      	mov	r0, r1
 800cbd8:	b141      	cbz	r1, 800cbec <__ascii_wctomb+0x18>
 800cbda:	2aff      	cmp	r2, #255	@ 0xff
 800cbdc:	d904      	bls.n	800cbe8 <__ascii_wctomb+0x14>
 800cbde:	228a      	movs	r2, #138	@ 0x8a
 800cbe0:	601a      	str	r2, [r3, #0]
 800cbe2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cbe6:	4770      	bx	lr
 800cbe8:	700a      	strb	r2, [r1, #0]
 800cbea:	2001      	movs	r0, #1
 800cbec:	4770      	bx	lr
	...

0800cbf0 <fiprintf>:
 800cbf0:	b40e      	push	{r1, r2, r3}
 800cbf2:	b503      	push	{r0, r1, lr}
 800cbf4:	4601      	mov	r1, r0
 800cbf6:	ab03      	add	r3, sp, #12
 800cbf8:	4805      	ldr	r0, [pc, #20]	@ (800cc10 <fiprintf+0x20>)
 800cbfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbfe:	6800      	ldr	r0, [r0, #0]
 800cc00:	9301      	str	r3, [sp, #4]
 800cc02:	f000 f83f 	bl	800cc84 <_vfiprintf_r>
 800cc06:	b002      	add	sp, #8
 800cc08:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc0c:	b003      	add	sp, #12
 800cc0e:	4770      	bx	lr
 800cc10:	2000001c 	.word	0x2000001c

0800cc14 <abort>:
 800cc14:	b508      	push	{r3, lr}
 800cc16:	2006      	movs	r0, #6
 800cc18:	f000 fa08 	bl	800d02c <raise>
 800cc1c:	2001      	movs	r0, #1
 800cc1e:	f7f5 f9e5 	bl	8001fec <_exit>

0800cc22 <_malloc_usable_size_r>:
 800cc22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc26:	1f18      	subs	r0, r3, #4
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	bfbc      	itt	lt
 800cc2c:	580b      	ldrlt	r3, [r1, r0]
 800cc2e:	18c0      	addlt	r0, r0, r3
 800cc30:	4770      	bx	lr

0800cc32 <__sfputc_r>:
 800cc32:	6893      	ldr	r3, [r2, #8]
 800cc34:	3b01      	subs	r3, #1
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	b410      	push	{r4}
 800cc3a:	6093      	str	r3, [r2, #8]
 800cc3c:	da08      	bge.n	800cc50 <__sfputc_r+0x1e>
 800cc3e:	6994      	ldr	r4, [r2, #24]
 800cc40:	42a3      	cmp	r3, r4
 800cc42:	db01      	blt.n	800cc48 <__sfputc_r+0x16>
 800cc44:	290a      	cmp	r1, #10
 800cc46:	d103      	bne.n	800cc50 <__sfputc_r+0x1e>
 800cc48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc4c:	f000 b932 	b.w	800ceb4 <__swbuf_r>
 800cc50:	6813      	ldr	r3, [r2, #0]
 800cc52:	1c58      	adds	r0, r3, #1
 800cc54:	6010      	str	r0, [r2, #0]
 800cc56:	7019      	strb	r1, [r3, #0]
 800cc58:	4608      	mov	r0, r1
 800cc5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc5e:	4770      	bx	lr

0800cc60 <__sfputs_r>:
 800cc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc62:	4606      	mov	r6, r0
 800cc64:	460f      	mov	r7, r1
 800cc66:	4614      	mov	r4, r2
 800cc68:	18d5      	adds	r5, r2, r3
 800cc6a:	42ac      	cmp	r4, r5
 800cc6c:	d101      	bne.n	800cc72 <__sfputs_r+0x12>
 800cc6e:	2000      	movs	r0, #0
 800cc70:	e007      	b.n	800cc82 <__sfputs_r+0x22>
 800cc72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc76:	463a      	mov	r2, r7
 800cc78:	4630      	mov	r0, r6
 800cc7a:	f7ff ffda 	bl	800cc32 <__sfputc_r>
 800cc7e:	1c43      	adds	r3, r0, #1
 800cc80:	d1f3      	bne.n	800cc6a <__sfputs_r+0xa>
 800cc82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc84 <_vfiprintf_r>:
 800cc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc88:	460d      	mov	r5, r1
 800cc8a:	b09d      	sub	sp, #116	@ 0x74
 800cc8c:	4614      	mov	r4, r2
 800cc8e:	4698      	mov	r8, r3
 800cc90:	4606      	mov	r6, r0
 800cc92:	b118      	cbz	r0, 800cc9c <_vfiprintf_r+0x18>
 800cc94:	6a03      	ldr	r3, [r0, #32]
 800cc96:	b90b      	cbnz	r3, 800cc9c <_vfiprintf_r+0x18>
 800cc98:	f7fe f8a0 	bl	800addc <__sinit>
 800cc9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc9e:	07d9      	lsls	r1, r3, #31
 800cca0:	d405      	bmi.n	800ccae <_vfiprintf_r+0x2a>
 800cca2:	89ab      	ldrh	r3, [r5, #12]
 800cca4:	059a      	lsls	r2, r3, #22
 800cca6:	d402      	bmi.n	800ccae <_vfiprintf_r+0x2a>
 800cca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccaa:	f7fe fa0e 	bl	800b0ca <__retarget_lock_acquire_recursive>
 800ccae:	89ab      	ldrh	r3, [r5, #12]
 800ccb0:	071b      	lsls	r3, r3, #28
 800ccb2:	d501      	bpl.n	800ccb8 <_vfiprintf_r+0x34>
 800ccb4:	692b      	ldr	r3, [r5, #16]
 800ccb6:	b99b      	cbnz	r3, 800cce0 <_vfiprintf_r+0x5c>
 800ccb8:	4629      	mov	r1, r5
 800ccba:	4630      	mov	r0, r6
 800ccbc:	f000 f938 	bl	800cf30 <__swsetup_r>
 800ccc0:	b170      	cbz	r0, 800cce0 <_vfiprintf_r+0x5c>
 800ccc2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccc4:	07dc      	lsls	r4, r3, #31
 800ccc6:	d504      	bpl.n	800ccd2 <_vfiprintf_r+0x4e>
 800ccc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cccc:	b01d      	add	sp, #116	@ 0x74
 800ccce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccd2:	89ab      	ldrh	r3, [r5, #12]
 800ccd4:	0598      	lsls	r0, r3, #22
 800ccd6:	d4f7      	bmi.n	800ccc8 <_vfiprintf_r+0x44>
 800ccd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccda:	f7fe f9f7 	bl	800b0cc <__retarget_lock_release_recursive>
 800ccde:	e7f3      	b.n	800ccc8 <_vfiprintf_r+0x44>
 800cce0:	2300      	movs	r3, #0
 800cce2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cce4:	2320      	movs	r3, #32
 800cce6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ccea:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccee:	2330      	movs	r3, #48	@ 0x30
 800ccf0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cea0 <_vfiprintf_r+0x21c>
 800ccf4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ccf8:	f04f 0901 	mov.w	r9, #1
 800ccfc:	4623      	mov	r3, r4
 800ccfe:	469a      	mov	sl, r3
 800cd00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd04:	b10a      	cbz	r2, 800cd0a <_vfiprintf_r+0x86>
 800cd06:	2a25      	cmp	r2, #37	@ 0x25
 800cd08:	d1f9      	bne.n	800ccfe <_vfiprintf_r+0x7a>
 800cd0a:	ebba 0b04 	subs.w	fp, sl, r4
 800cd0e:	d00b      	beq.n	800cd28 <_vfiprintf_r+0xa4>
 800cd10:	465b      	mov	r3, fp
 800cd12:	4622      	mov	r2, r4
 800cd14:	4629      	mov	r1, r5
 800cd16:	4630      	mov	r0, r6
 800cd18:	f7ff ffa2 	bl	800cc60 <__sfputs_r>
 800cd1c:	3001      	adds	r0, #1
 800cd1e:	f000 80a7 	beq.w	800ce70 <_vfiprintf_r+0x1ec>
 800cd22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd24:	445a      	add	r2, fp
 800cd26:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd28:	f89a 3000 	ldrb.w	r3, [sl]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	f000 809f 	beq.w	800ce70 <_vfiprintf_r+0x1ec>
 800cd32:	2300      	movs	r3, #0
 800cd34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cd38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd3c:	f10a 0a01 	add.w	sl, sl, #1
 800cd40:	9304      	str	r3, [sp, #16]
 800cd42:	9307      	str	r3, [sp, #28]
 800cd44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cd48:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd4a:	4654      	mov	r4, sl
 800cd4c:	2205      	movs	r2, #5
 800cd4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd52:	4853      	ldr	r0, [pc, #332]	@ (800cea0 <_vfiprintf_r+0x21c>)
 800cd54:	f7f3 fa3c 	bl	80001d0 <memchr>
 800cd58:	9a04      	ldr	r2, [sp, #16]
 800cd5a:	b9d8      	cbnz	r0, 800cd94 <_vfiprintf_r+0x110>
 800cd5c:	06d1      	lsls	r1, r2, #27
 800cd5e:	bf44      	itt	mi
 800cd60:	2320      	movmi	r3, #32
 800cd62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd66:	0713      	lsls	r3, r2, #28
 800cd68:	bf44      	itt	mi
 800cd6a:	232b      	movmi	r3, #43	@ 0x2b
 800cd6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cd70:	f89a 3000 	ldrb.w	r3, [sl]
 800cd74:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd76:	d015      	beq.n	800cda4 <_vfiprintf_r+0x120>
 800cd78:	9a07      	ldr	r2, [sp, #28]
 800cd7a:	4654      	mov	r4, sl
 800cd7c:	2000      	movs	r0, #0
 800cd7e:	f04f 0c0a 	mov.w	ip, #10
 800cd82:	4621      	mov	r1, r4
 800cd84:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd88:	3b30      	subs	r3, #48	@ 0x30
 800cd8a:	2b09      	cmp	r3, #9
 800cd8c:	d94b      	bls.n	800ce26 <_vfiprintf_r+0x1a2>
 800cd8e:	b1b0      	cbz	r0, 800cdbe <_vfiprintf_r+0x13a>
 800cd90:	9207      	str	r2, [sp, #28]
 800cd92:	e014      	b.n	800cdbe <_vfiprintf_r+0x13a>
 800cd94:	eba0 0308 	sub.w	r3, r0, r8
 800cd98:	fa09 f303 	lsl.w	r3, r9, r3
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	9304      	str	r3, [sp, #16]
 800cda0:	46a2      	mov	sl, r4
 800cda2:	e7d2      	b.n	800cd4a <_vfiprintf_r+0xc6>
 800cda4:	9b03      	ldr	r3, [sp, #12]
 800cda6:	1d19      	adds	r1, r3, #4
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	9103      	str	r1, [sp, #12]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	bfbb      	ittet	lt
 800cdb0:	425b      	neglt	r3, r3
 800cdb2:	f042 0202 	orrlt.w	r2, r2, #2
 800cdb6:	9307      	strge	r3, [sp, #28]
 800cdb8:	9307      	strlt	r3, [sp, #28]
 800cdba:	bfb8      	it	lt
 800cdbc:	9204      	strlt	r2, [sp, #16]
 800cdbe:	7823      	ldrb	r3, [r4, #0]
 800cdc0:	2b2e      	cmp	r3, #46	@ 0x2e
 800cdc2:	d10a      	bne.n	800cdda <_vfiprintf_r+0x156>
 800cdc4:	7863      	ldrb	r3, [r4, #1]
 800cdc6:	2b2a      	cmp	r3, #42	@ 0x2a
 800cdc8:	d132      	bne.n	800ce30 <_vfiprintf_r+0x1ac>
 800cdca:	9b03      	ldr	r3, [sp, #12]
 800cdcc:	1d1a      	adds	r2, r3, #4
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	9203      	str	r2, [sp, #12]
 800cdd2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cdd6:	3402      	adds	r4, #2
 800cdd8:	9305      	str	r3, [sp, #20]
 800cdda:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ceb0 <_vfiprintf_r+0x22c>
 800cdde:	7821      	ldrb	r1, [r4, #0]
 800cde0:	2203      	movs	r2, #3
 800cde2:	4650      	mov	r0, sl
 800cde4:	f7f3 f9f4 	bl	80001d0 <memchr>
 800cde8:	b138      	cbz	r0, 800cdfa <_vfiprintf_r+0x176>
 800cdea:	9b04      	ldr	r3, [sp, #16]
 800cdec:	eba0 000a 	sub.w	r0, r0, sl
 800cdf0:	2240      	movs	r2, #64	@ 0x40
 800cdf2:	4082      	lsls	r2, r0
 800cdf4:	4313      	orrs	r3, r2
 800cdf6:	3401      	adds	r4, #1
 800cdf8:	9304      	str	r3, [sp, #16]
 800cdfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdfe:	4829      	ldr	r0, [pc, #164]	@ (800cea4 <_vfiprintf_r+0x220>)
 800ce00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ce04:	2206      	movs	r2, #6
 800ce06:	f7f3 f9e3 	bl	80001d0 <memchr>
 800ce0a:	2800      	cmp	r0, #0
 800ce0c:	d03f      	beq.n	800ce8e <_vfiprintf_r+0x20a>
 800ce0e:	4b26      	ldr	r3, [pc, #152]	@ (800cea8 <_vfiprintf_r+0x224>)
 800ce10:	bb1b      	cbnz	r3, 800ce5a <_vfiprintf_r+0x1d6>
 800ce12:	9b03      	ldr	r3, [sp, #12]
 800ce14:	3307      	adds	r3, #7
 800ce16:	f023 0307 	bic.w	r3, r3, #7
 800ce1a:	3308      	adds	r3, #8
 800ce1c:	9303      	str	r3, [sp, #12]
 800ce1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce20:	443b      	add	r3, r7
 800ce22:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce24:	e76a      	b.n	800ccfc <_vfiprintf_r+0x78>
 800ce26:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce2a:	460c      	mov	r4, r1
 800ce2c:	2001      	movs	r0, #1
 800ce2e:	e7a8      	b.n	800cd82 <_vfiprintf_r+0xfe>
 800ce30:	2300      	movs	r3, #0
 800ce32:	3401      	adds	r4, #1
 800ce34:	9305      	str	r3, [sp, #20]
 800ce36:	4619      	mov	r1, r3
 800ce38:	f04f 0c0a 	mov.w	ip, #10
 800ce3c:	4620      	mov	r0, r4
 800ce3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce42:	3a30      	subs	r2, #48	@ 0x30
 800ce44:	2a09      	cmp	r2, #9
 800ce46:	d903      	bls.n	800ce50 <_vfiprintf_r+0x1cc>
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d0c6      	beq.n	800cdda <_vfiprintf_r+0x156>
 800ce4c:	9105      	str	r1, [sp, #20]
 800ce4e:	e7c4      	b.n	800cdda <_vfiprintf_r+0x156>
 800ce50:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce54:	4604      	mov	r4, r0
 800ce56:	2301      	movs	r3, #1
 800ce58:	e7f0      	b.n	800ce3c <_vfiprintf_r+0x1b8>
 800ce5a:	ab03      	add	r3, sp, #12
 800ce5c:	9300      	str	r3, [sp, #0]
 800ce5e:	462a      	mov	r2, r5
 800ce60:	4b12      	ldr	r3, [pc, #72]	@ (800ceac <_vfiprintf_r+0x228>)
 800ce62:	a904      	add	r1, sp, #16
 800ce64:	4630      	mov	r0, r6
 800ce66:	f7fd fb77 	bl	800a558 <_printf_float>
 800ce6a:	4607      	mov	r7, r0
 800ce6c:	1c78      	adds	r0, r7, #1
 800ce6e:	d1d6      	bne.n	800ce1e <_vfiprintf_r+0x19a>
 800ce70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce72:	07d9      	lsls	r1, r3, #31
 800ce74:	d405      	bmi.n	800ce82 <_vfiprintf_r+0x1fe>
 800ce76:	89ab      	ldrh	r3, [r5, #12]
 800ce78:	059a      	lsls	r2, r3, #22
 800ce7a:	d402      	bmi.n	800ce82 <_vfiprintf_r+0x1fe>
 800ce7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce7e:	f7fe f925 	bl	800b0cc <__retarget_lock_release_recursive>
 800ce82:	89ab      	ldrh	r3, [r5, #12]
 800ce84:	065b      	lsls	r3, r3, #25
 800ce86:	f53f af1f 	bmi.w	800ccc8 <_vfiprintf_r+0x44>
 800ce8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ce8c:	e71e      	b.n	800cccc <_vfiprintf_r+0x48>
 800ce8e:	ab03      	add	r3, sp, #12
 800ce90:	9300      	str	r3, [sp, #0]
 800ce92:	462a      	mov	r2, r5
 800ce94:	4b05      	ldr	r3, [pc, #20]	@ (800ceac <_vfiprintf_r+0x228>)
 800ce96:	a904      	add	r1, sp, #16
 800ce98:	4630      	mov	r0, r6
 800ce9a:	f7fd fdf5 	bl	800aa88 <_printf_i>
 800ce9e:	e7e4      	b.n	800ce6a <_vfiprintf_r+0x1e6>
 800cea0:	0800da7e 	.word	0x0800da7e
 800cea4:	0800da88 	.word	0x0800da88
 800cea8:	0800a559 	.word	0x0800a559
 800ceac:	0800cc61 	.word	0x0800cc61
 800ceb0:	0800da84 	.word	0x0800da84

0800ceb4 <__swbuf_r>:
 800ceb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceb6:	460e      	mov	r6, r1
 800ceb8:	4614      	mov	r4, r2
 800ceba:	4605      	mov	r5, r0
 800cebc:	b118      	cbz	r0, 800cec6 <__swbuf_r+0x12>
 800cebe:	6a03      	ldr	r3, [r0, #32]
 800cec0:	b90b      	cbnz	r3, 800cec6 <__swbuf_r+0x12>
 800cec2:	f7fd ff8b 	bl	800addc <__sinit>
 800cec6:	69a3      	ldr	r3, [r4, #24]
 800cec8:	60a3      	str	r3, [r4, #8]
 800ceca:	89a3      	ldrh	r3, [r4, #12]
 800cecc:	071a      	lsls	r2, r3, #28
 800cece:	d501      	bpl.n	800ced4 <__swbuf_r+0x20>
 800ced0:	6923      	ldr	r3, [r4, #16]
 800ced2:	b943      	cbnz	r3, 800cee6 <__swbuf_r+0x32>
 800ced4:	4621      	mov	r1, r4
 800ced6:	4628      	mov	r0, r5
 800ced8:	f000 f82a 	bl	800cf30 <__swsetup_r>
 800cedc:	b118      	cbz	r0, 800cee6 <__swbuf_r+0x32>
 800cede:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800cee2:	4638      	mov	r0, r7
 800cee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cee6:	6823      	ldr	r3, [r4, #0]
 800cee8:	6922      	ldr	r2, [r4, #16]
 800ceea:	1a98      	subs	r0, r3, r2
 800ceec:	6963      	ldr	r3, [r4, #20]
 800ceee:	b2f6      	uxtb	r6, r6
 800cef0:	4283      	cmp	r3, r0
 800cef2:	4637      	mov	r7, r6
 800cef4:	dc05      	bgt.n	800cf02 <__swbuf_r+0x4e>
 800cef6:	4621      	mov	r1, r4
 800cef8:	4628      	mov	r0, r5
 800cefa:	f7ff fda7 	bl	800ca4c <_fflush_r>
 800cefe:	2800      	cmp	r0, #0
 800cf00:	d1ed      	bne.n	800cede <__swbuf_r+0x2a>
 800cf02:	68a3      	ldr	r3, [r4, #8]
 800cf04:	3b01      	subs	r3, #1
 800cf06:	60a3      	str	r3, [r4, #8]
 800cf08:	6823      	ldr	r3, [r4, #0]
 800cf0a:	1c5a      	adds	r2, r3, #1
 800cf0c:	6022      	str	r2, [r4, #0]
 800cf0e:	701e      	strb	r6, [r3, #0]
 800cf10:	6962      	ldr	r2, [r4, #20]
 800cf12:	1c43      	adds	r3, r0, #1
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d004      	beq.n	800cf22 <__swbuf_r+0x6e>
 800cf18:	89a3      	ldrh	r3, [r4, #12]
 800cf1a:	07db      	lsls	r3, r3, #31
 800cf1c:	d5e1      	bpl.n	800cee2 <__swbuf_r+0x2e>
 800cf1e:	2e0a      	cmp	r6, #10
 800cf20:	d1df      	bne.n	800cee2 <__swbuf_r+0x2e>
 800cf22:	4621      	mov	r1, r4
 800cf24:	4628      	mov	r0, r5
 800cf26:	f7ff fd91 	bl	800ca4c <_fflush_r>
 800cf2a:	2800      	cmp	r0, #0
 800cf2c:	d0d9      	beq.n	800cee2 <__swbuf_r+0x2e>
 800cf2e:	e7d6      	b.n	800cede <__swbuf_r+0x2a>

0800cf30 <__swsetup_r>:
 800cf30:	b538      	push	{r3, r4, r5, lr}
 800cf32:	4b29      	ldr	r3, [pc, #164]	@ (800cfd8 <__swsetup_r+0xa8>)
 800cf34:	4605      	mov	r5, r0
 800cf36:	6818      	ldr	r0, [r3, #0]
 800cf38:	460c      	mov	r4, r1
 800cf3a:	b118      	cbz	r0, 800cf44 <__swsetup_r+0x14>
 800cf3c:	6a03      	ldr	r3, [r0, #32]
 800cf3e:	b90b      	cbnz	r3, 800cf44 <__swsetup_r+0x14>
 800cf40:	f7fd ff4c 	bl	800addc <__sinit>
 800cf44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf48:	0719      	lsls	r1, r3, #28
 800cf4a:	d422      	bmi.n	800cf92 <__swsetup_r+0x62>
 800cf4c:	06da      	lsls	r2, r3, #27
 800cf4e:	d407      	bmi.n	800cf60 <__swsetup_r+0x30>
 800cf50:	2209      	movs	r2, #9
 800cf52:	602a      	str	r2, [r5, #0]
 800cf54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf58:	81a3      	strh	r3, [r4, #12]
 800cf5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf5e:	e033      	b.n	800cfc8 <__swsetup_r+0x98>
 800cf60:	0758      	lsls	r0, r3, #29
 800cf62:	d512      	bpl.n	800cf8a <__swsetup_r+0x5a>
 800cf64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cf66:	b141      	cbz	r1, 800cf7a <__swsetup_r+0x4a>
 800cf68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cf6c:	4299      	cmp	r1, r3
 800cf6e:	d002      	beq.n	800cf76 <__swsetup_r+0x46>
 800cf70:	4628      	mov	r0, r5
 800cf72:	f7fe ff15 	bl	800bda0 <_free_r>
 800cf76:	2300      	movs	r3, #0
 800cf78:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf7a:	89a3      	ldrh	r3, [r4, #12]
 800cf7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cf80:	81a3      	strh	r3, [r4, #12]
 800cf82:	2300      	movs	r3, #0
 800cf84:	6063      	str	r3, [r4, #4]
 800cf86:	6923      	ldr	r3, [r4, #16]
 800cf88:	6023      	str	r3, [r4, #0]
 800cf8a:	89a3      	ldrh	r3, [r4, #12]
 800cf8c:	f043 0308 	orr.w	r3, r3, #8
 800cf90:	81a3      	strh	r3, [r4, #12]
 800cf92:	6923      	ldr	r3, [r4, #16]
 800cf94:	b94b      	cbnz	r3, 800cfaa <__swsetup_r+0x7a>
 800cf96:	89a3      	ldrh	r3, [r4, #12]
 800cf98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cf9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cfa0:	d003      	beq.n	800cfaa <__swsetup_r+0x7a>
 800cfa2:	4621      	mov	r1, r4
 800cfa4:	4628      	mov	r0, r5
 800cfa6:	f000 f883 	bl	800d0b0 <__smakebuf_r>
 800cfaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfae:	f013 0201 	ands.w	r2, r3, #1
 800cfb2:	d00a      	beq.n	800cfca <__swsetup_r+0x9a>
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	60a2      	str	r2, [r4, #8]
 800cfb8:	6962      	ldr	r2, [r4, #20]
 800cfba:	4252      	negs	r2, r2
 800cfbc:	61a2      	str	r2, [r4, #24]
 800cfbe:	6922      	ldr	r2, [r4, #16]
 800cfc0:	b942      	cbnz	r2, 800cfd4 <__swsetup_r+0xa4>
 800cfc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cfc6:	d1c5      	bne.n	800cf54 <__swsetup_r+0x24>
 800cfc8:	bd38      	pop	{r3, r4, r5, pc}
 800cfca:	0799      	lsls	r1, r3, #30
 800cfcc:	bf58      	it	pl
 800cfce:	6962      	ldrpl	r2, [r4, #20]
 800cfd0:	60a2      	str	r2, [r4, #8]
 800cfd2:	e7f4      	b.n	800cfbe <__swsetup_r+0x8e>
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	e7f7      	b.n	800cfc8 <__swsetup_r+0x98>
 800cfd8:	2000001c 	.word	0x2000001c

0800cfdc <_raise_r>:
 800cfdc:	291f      	cmp	r1, #31
 800cfde:	b538      	push	{r3, r4, r5, lr}
 800cfe0:	4605      	mov	r5, r0
 800cfe2:	460c      	mov	r4, r1
 800cfe4:	d904      	bls.n	800cff0 <_raise_r+0x14>
 800cfe6:	2316      	movs	r3, #22
 800cfe8:	6003      	str	r3, [r0, #0]
 800cfea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cfee:	bd38      	pop	{r3, r4, r5, pc}
 800cff0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cff2:	b112      	cbz	r2, 800cffa <_raise_r+0x1e>
 800cff4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cff8:	b94b      	cbnz	r3, 800d00e <_raise_r+0x32>
 800cffa:	4628      	mov	r0, r5
 800cffc:	f000 f830 	bl	800d060 <_getpid_r>
 800d000:	4622      	mov	r2, r4
 800d002:	4601      	mov	r1, r0
 800d004:	4628      	mov	r0, r5
 800d006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d00a:	f000 b817 	b.w	800d03c <_kill_r>
 800d00e:	2b01      	cmp	r3, #1
 800d010:	d00a      	beq.n	800d028 <_raise_r+0x4c>
 800d012:	1c59      	adds	r1, r3, #1
 800d014:	d103      	bne.n	800d01e <_raise_r+0x42>
 800d016:	2316      	movs	r3, #22
 800d018:	6003      	str	r3, [r0, #0]
 800d01a:	2001      	movs	r0, #1
 800d01c:	e7e7      	b.n	800cfee <_raise_r+0x12>
 800d01e:	2100      	movs	r1, #0
 800d020:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d024:	4620      	mov	r0, r4
 800d026:	4798      	blx	r3
 800d028:	2000      	movs	r0, #0
 800d02a:	e7e0      	b.n	800cfee <_raise_r+0x12>

0800d02c <raise>:
 800d02c:	4b02      	ldr	r3, [pc, #8]	@ (800d038 <raise+0xc>)
 800d02e:	4601      	mov	r1, r0
 800d030:	6818      	ldr	r0, [r3, #0]
 800d032:	f7ff bfd3 	b.w	800cfdc <_raise_r>
 800d036:	bf00      	nop
 800d038:	2000001c 	.word	0x2000001c

0800d03c <_kill_r>:
 800d03c:	b538      	push	{r3, r4, r5, lr}
 800d03e:	4d07      	ldr	r5, [pc, #28]	@ (800d05c <_kill_r+0x20>)
 800d040:	2300      	movs	r3, #0
 800d042:	4604      	mov	r4, r0
 800d044:	4608      	mov	r0, r1
 800d046:	4611      	mov	r1, r2
 800d048:	602b      	str	r3, [r5, #0]
 800d04a:	f7f4 ffbf 	bl	8001fcc <_kill>
 800d04e:	1c43      	adds	r3, r0, #1
 800d050:	d102      	bne.n	800d058 <_kill_r+0x1c>
 800d052:	682b      	ldr	r3, [r5, #0]
 800d054:	b103      	cbz	r3, 800d058 <_kill_r+0x1c>
 800d056:	6023      	str	r3, [r4, #0]
 800d058:	bd38      	pop	{r3, r4, r5, pc}
 800d05a:	bf00      	nop
 800d05c:	20001ed0 	.word	0x20001ed0

0800d060 <_getpid_r>:
 800d060:	f7f4 bfac 	b.w	8001fbc <_getpid>

0800d064 <__swhatbuf_r>:
 800d064:	b570      	push	{r4, r5, r6, lr}
 800d066:	460c      	mov	r4, r1
 800d068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d06c:	2900      	cmp	r1, #0
 800d06e:	b096      	sub	sp, #88	@ 0x58
 800d070:	4615      	mov	r5, r2
 800d072:	461e      	mov	r6, r3
 800d074:	da0d      	bge.n	800d092 <__swhatbuf_r+0x2e>
 800d076:	89a3      	ldrh	r3, [r4, #12]
 800d078:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d07c:	f04f 0100 	mov.w	r1, #0
 800d080:	bf14      	ite	ne
 800d082:	2340      	movne	r3, #64	@ 0x40
 800d084:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d088:	2000      	movs	r0, #0
 800d08a:	6031      	str	r1, [r6, #0]
 800d08c:	602b      	str	r3, [r5, #0]
 800d08e:	b016      	add	sp, #88	@ 0x58
 800d090:	bd70      	pop	{r4, r5, r6, pc}
 800d092:	466a      	mov	r2, sp
 800d094:	f000 f848 	bl	800d128 <_fstat_r>
 800d098:	2800      	cmp	r0, #0
 800d09a:	dbec      	blt.n	800d076 <__swhatbuf_r+0x12>
 800d09c:	9901      	ldr	r1, [sp, #4]
 800d09e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d0a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d0a6:	4259      	negs	r1, r3
 800d0a8:	4159      	adcs	r1, r3
 800d0aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d0ae:	e7eb      	b.n	800d088 <__swhatbuf_r+0x24>

0800d0b0 <__smakebuf_r>:
 800d0b0:	898b      	ldrh	r3, [r1, #12]
 800d0b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d0b4:	079d      	lsls	r5, r3, #30
 800d0b6:	4606      	mov	r6, r0
 800d0b8:	460c      	mov	r4, r1
 800d0ba:	d507      	bpl.n	800d0cc <__smakebuf_r+0x1c>
 800d0bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d0c0:	6023      	str	r3, [r4, #0]
 800d0c2:	6123      	str	r3, [r4, #16]
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	6163      	str	r3, [r4, #20]
 800d0c8:	b003      	add	sp, #12
 800d0ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0cc:	ab01      	add	r3, sp, #4
 800d0ce:	466a      	mov	r2, sp
 800d0d0:	f7ff ffc8 	bl	800d064 <__swhatbuf_r>
 800d0d4:	9f00      	ldr	r7, [sp, #0]
 800d0d6:	4605      	mov	r5, r0
 800d0d8:	4639      	mov	r1, r7
 800d0da:	4630      	mov	r0, r6
 800d0dc:	f7fe fed4 	bl	800be88 <_malloc_r>
 800d0e0:	b948      	cbnz	r0, 800d0f6 <__smakebuf_r+0x46>
 800d0e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0e6:	059a      	lsls	r2, r3, #22
 800d0e8:	d4ee      	bmi.n	800d0c8 <__smakebuf_r+0x18>
 800d0ea:	f023 0303 	bic.w	r3, r3, #3
 800d0ee:	f043 0302 	orr.w	r3, r3, #2
 800d0f2:	81a3      	strh	r3, [r4, #12]
 800d0f4:	e7e2      	b.n	800d0bc <__smakebuf_r+0xc>
 800d0f6:	89a3      	ldrh	r3, [r4, #12]
 800d0f8:	6020      	str	r0, [r4, #0]
 800d0fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0fe:	81a3      	strh	r3, [r4, #12]
 800d100:	9b01      	ldr	r3, [sp, #4]
 800d102:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d106:	b15b      	cbz	r3, 800d120 <__smakebuf_r+0x70>
 800d108:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d10c:	4630      	mov	r0, r6
 800d10e:	f000 f81d 	bl	800d14c <_isatty_r>
 800d112:	b128      	cbz	r0, 800d120 <__smakebuf_r+0x70>
 800d114:	89a3      	ldrh	r3, [r4, #12]
 800d116:	f023 0303 	bic.w	r3, r3, #3
 800d11a:	f043 0301 	orr.w	r3, r3, #1
 800d11e:	81a3      	strh	r3, [r4, #12]
 800d120:	89a3      	ldrh	r3, [r4, #12]
 800d122:	431d      	orrs	r5, r3
 800d124:	81a5      	strh	r5, [r4, #12]
 800d126:	e7cf      	b.n	800d0c8 <__smakebuf_r+0x18>

0800d128 <_fstat_r>:
 800d128:	b538      	push	{r3, r4, r5, lr}
 800d12a:	4d07      	ldr	r5, [pc, #28]	@ (800d148 <_fstat_r+0x20>)
 800d12c:	2300      	movs	r3, #0
 800d12e:	4604      	mov	r4, r0
 800d130:	4608      	mov	r0, r1
 800d132:	4611      	mov	r1, r2
 800d134:	602b      	str	r3, [r5, #0]
 800d136:	f7f4 ffa9 	bl	800208c <_fstat>
 800d13a:	1c43      	adds	r3, r0, #1
 800d13c:	d102      	bne.n	800d144 <_fstat_r+0x1c>
 800d13e:	682b      	ldr	r3, [r5, #0]
 800d140:	b103      	cbz	r3, 800d144 <_fstat_r+0x1c>
 800d142:	6023      	str	r3, [r4, #0]
 800d144:	bd38      	pop	{r3, r4, r5, pc}
 800d146:	bf00      	nop
 800d148:	20001ed0 	.word	0x20001ed0

0800d14c <_isatty_r>:
 800d14c:	b538      	push	{r3, r4, r5, lr}
 800d14e:	4d06      	ldr	r5, [pc, #24]	@ (800d168 <_isatty_r+0x1c>)
 800d150:	2300      	movs	r3, #0
 800d152:	4604      	mov	r4, r0
 800d154:	4608      	mov	r0, r1
 800d156:	602b      	str	r3, [r5, #0]
 800d158:	f7f4 ffa8 	bl	80020ac <_isatty>
 800d15c:	1c43      	adds	r3, r0, #1
 800d15e:	d102      	bne.n	800d166 <_isatty_r+0x1a>
 800d160:	682b      	ldr	r3, [r5, #0]
 800d162:	b103      	cbz	r3, 800d166 <_isatty_r+0x1a>
 800d164:	6023      	str	r3, [r4, #0]
 800d166:	bd38      	pop	{r3, r4, r5, pc}
 800d168:	20001ed0 	.word	0x20001ed0

0800d16c <atan2>:
 800d16c:	f000 b800 	b.w	800d170 <__ieee754_atan2>

0800d170 <__ieee754_atan2>:
 800d170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d174:	ec57 6b11 	vmov	r6, r7, d1
 800d178:	4273      	negs	r3, r6
 800d17a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800d2f8 <__ieee754_atan2+0x188>
 800d17e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800d182:	4333      	orrs	r3, r6
 800d184:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d188:	4543      	cmp	r3, r8
 800d18a:	ec51 0b10 	vmov	r0, r1, d0
 800d18e:	4635      	mov	r5, r6
 800d190:	d809      	bhi.n	800d1a6 <__ieee754_atan2+0x36>
 800d192:	4244      	negs	r4, r0
 800d194:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d198:	4304      	orrs	r4, r0
 800d19a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d19e:	4544      	cmp	r4, r8
 800d1a0:	468e      	mov	lr, r1
 800d1a2:	4681      	mov	r9, r0
 800d1a4:	d907      	bls.n	800d1b6 <__ieee754_atan2+0x46>
 800d1a6:	4632      	mov	r2, r6
 800d1a8:	463b      	mov	r3, r7
 800d1aa:	f7f3 f86f 	bl	800028c <__adddf3>
 800d1ae:	ec41 0b10 	vmov	d0, r0, r1
 800d1b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1b6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800d1ba:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800d1be:	4334      	orrs	r4, r6
 800d1c0:	d103      	bne.n	800d1ca <__ieee754_atan2+0x5a>
 800d1c2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1c6:	f000 b89b 	b.w	800d300 <atan>
 800d1ca:	17bc      	asrs	r4, r7, #30
 800d1cc:	f004 0402 	and.w	r4, r4, #2
 800d1d0:	ea53 0909 	orrs.w	r9, r3, r9
 800d1d4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d1d8:	d107      	bne.n	800d1ea <__ieee754_atan2+0x7a>
 800d1da:	2c02      	cmp	r4, #2
 800d1dc:	d05f      	beq.n	800d29e <__ieee754_atan2+0x12e>
 800d1de:	2c03      	cmp	r4, #3
 800d1e0:	d1e5      	bne.n	800d1ae <__ieee754_atan2+0x3e>
 800d1e2:	a143      	add	r1, pc, #268	@ (adr r1, 800d2f0 <__ieee754_atan2+0x180>)
 800d1e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1e8:	e7e1      	b.n	800d1ae <__ieee754_atan2+0x3e>
 800d1ea:	4315      	orrs	r5, r2
 800d1ec:	d106      	bne.n	800d1fc <__ieee754_atan2+0x8c>
 800d1ee:	f1be 0f00 	cmp.w	lr, #0
 800d1f2:	db5f      	blt.n	800d2b4 <__ieee754_atan2+0x144>
 800d1f4:	a136      	add	r1, pc, #216	@ (adr r1, 800d2d0 <__ieee754_atan2+0x160>)
 800d1f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1fa:	e7d8      	b.n	800d1ae <__ieee754_atan2+0x3e>
 800d1fc:	4542      	cmp	r2, r8
 800d1fe:	d10f      	bne.n	800d220 <__ieee754_atan2+0xb0>
 800d200:	4293      	cmp	r3, r2
 800d202:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800d206:	d107      	bne.n	800d218 <__ieee754_atan2+0xa8>
 800d208:	2c02      	cmp	r4, #2
 800d20a:	d84c      	bhi.n	800d2a6 <__ieee754_atan2+0x136>
 800d20c:	4b36      	ldr	r3, [pc, #216]	@ (800d2e8 <__ieee754_atan2+0x178>)
 800d20e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d212:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d216:	e7ca      	b.n	800d1ae <__ieee754_atan2+0x3e>
 800d218:	2c02      	cmp	r4, #2
 800d21a:	d848      	bhi.n	800d2ae <__ieee754_atan2+0x13e>
 800d21c:	4b33      	ldr	r3, [pc, #204]	@ (800d2ec <__ieee754_atan2+0x17c>)
 800d21e:	e7f6      	b.n	800d20e <__ieee754_atan2+0x9e>
 800d220:	4543      	cmp	r3, r8
 800d222:	d0e4      	beq.n	800d1ee <__ieee754_atan2+0x7e>
 800d224:	1a9b      	subs	r3, r3, r2
 800d226:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800d22a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d22e:	da1e      	bge.n	800d26e <__ieee754_atan2+0xfe>
 800d230:	2f00      	cmp	r7, #0
 800d232:	da01      	bge.n	800d238 <__ieee754_atan2+0xc8>
 800d234:	323c      	adds	r2, #60	@ 0x3c
 800d236:	db1e      	blt.n	800d276 <__ieee754_atan2+0x106>
 800d238:	4632      	mov	r2, r6
 800d23a:	463b      	mov	r3, r7
 800d23c:	f7f3 fb06 	bl	800084c <__aeabi_ddiv>
 800d240:	ec41 0b10 	vmov	d0, r0, r1
 800d244:	f000 f9f4 	bl	800d630 <fabs>
 800d248:	f000 f85a 	bl	800d300 <atan>
 800d24c:	ec51 0b10 	vmov	r0, r1, d0
 800d250:	2c01      	cmp	r4, #1
 800d252:	d013      	beq.n	800d27c <__ieee754_atan2+0x10c>
 800d254:	2c02      	cmp	r4, #2
 800d256:	d015      	beq.n	800d284 <__ieee754_atan2+0x114>
 800d258:	2c00      	cmp	r4, #0
 800d25a:	d0a8      	beq.n	800d1ae <__ieee754_atan2+0x3e>
 800d25c:	a318      	add	r3, pc, #96	@ (adr r3, 800d2c0 <__ieee754_atan2+0x150>)
 800d25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d262:	f7f3 f811 	bl	8000288 <__aeabi_dsub>
 800d266:	a318      	add	r3, pc, #96	@ (adr r3, 800d2c8 <__ieee754_atan2+0x158>)
 800d268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d26c:	e014      	b.n	800d298 <__ieee754_atan2+0x128>
 800d26e:	a118      	add	r1, pc, #96	@ (adr r1, 800d2d0 <__ieee754_atan2+0x160>)
 800d270:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d274:	e7ec      	b.n	800d250 <__ieee754_atan2+0xe0>
 800d276:	2000      	movs	r0, #0
 800d278:	2100      	movs	r1, #0
 800d27a:	e7e9      	b.n	800d250 <__ieee754_atan2+0xe0>
 800d27c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d280:	4619      	mov	r1, r3
 800d282:	e794      	b.n	800d1ae <__ieee754_atan2+0x3e>
 800d284:	a30e      	add	r3, pc, #56	@ (adr r3, 800d2c0 <__ieee754_atan2+0x150>)
 800d286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28a:	f7f2 fffd 	bl	8000288 <__aeabi_dsub>
 800d28e:	4602      	mov	r2, r0
 800d290:	460b      	mov	r3, r1
 800d292:	a10d      	add	r1, pc, #52	@ (adr r1, 800d2c8 <__ieee754_atan2+0x158>)
 800d294:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d298:	f7f2 fff6 	bl	8000288 <__aeabi_dsub>
 800d29c:	e787      	b.n	800d1ae <__ieee754_atan2+0x3e>
 800d29e:	a10a      	add	r1, pc, #40	@ (adr r1, 800d2c8 <__ieee754_atan2+0x158>)
 800d2a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2a4:	e783      	b.n	800d1ae <__ieee754_atan2+0x3e>
 800d2a6:	a10c      	add	r1, pc, #48	@ (adr r1, 800d2d8 <__ieee754_atan2+0x168>)
 800d2a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2ac:	e77f      	b.n	800d1ae <__ieee754_atan2+0x3e>
 800d2ae:	2000      	movs	r0, #0
 800d2b0:	2100      	movs	r1, #0
 800d2b2:	e77c      	b.n	800d1ae <__ieee754_atan2+0x3e>
 800d2b4:	a10a      	add	r1, pc, #40	@ (adr r1, 800d2e0 <__ieee754_atan2+0x170>)
 800d2b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2ba:	e778      	b.n	800d1ae <__ieee754_atan2+0x3e>
 800d2bc:	f3af 8000 	nop.w
 800d2c0:	33145c07 	.word	0x33145c07
 800d2c4:	3ca1a626 	.word	0x3ca1a626
 800d2c8:	54442d18 	.word	0x54442d18
 800d2cc:	400921fb 	.word	0x400921fb
 800d2d0:	54442d18 	.word	0x54442d18
 800d2d4:	3ff921fb 	.word	0x3ff921fb
 800d2d8:	54442d18 	.word	0x54442d18
 800d2dc:	3fe921fb 	.word	0x3fe921fb
 800d2e0:	54442d18 	.word	0x54442d18
 800d2e4:	bff921fb 	.word	0xbff921fb
 800d2e8:	0800dcf8 	.word	0x0800dcf8
 800d2ec:	0800dce0 	.word	0x0800dce0
 800d2f0:	54442d18 	.word	0x54442d18
 800d2f4:	c00921fb 	.word	0xc00921fb
 800d2f8:	7ff00000 	.word	0x7ff00000
 800d2fc:	00000000 	.word	0x00000000

0800d300 <atan>:
 800d300:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d304:	ec55 4b10 	vmov	r4, r5, d0
 800d308:	4bbf      	ldr	r3, [pc, #764]	@ (800d608 <atan+0x308>)
 800d30a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800d30e:	429e      	cmp	r6, r3
 800d310:	46ab      	mov	fp, r5
 800d312:	d918      	bls.n	800d346 <atan+0x46>
 800d314:	4bbd      	ldr	r3, [pc, #756]	@ (800d60c <atan+0x30c>)
 800d316:	429e      	cmp	r6, r3
 800d318:	d801      	bhi.n	800d31e <atan+0x1e>
 800d31a:	d109      	bne.n	800d330 <atan+0x30>
 800d31c:	b144      	cbz	r4, 800d330 <atan+0x30>
 800d31e:	4622      	mov	r2, r4
 800d320:	462b      	mov	r3, r5
 800d322:	4620      	mov	r0, r4
 800d324:	4629      	mov	r1, r5
 800d326:	f7f2 ffb1 	bl	800028c <__adddf3>
 800d32a:	4604      	mov	r4, r0
 800d32c:	460d      	mov	r5, r1
 800d32e:	e006      	b.n	800d33e <atan+0x3e>
 800d330:	f1bb 0f00 	cmp.w	fp, #0
 800d334:	f340 812b 	ble.w	800d58e <atan+0x28e>
 800d338:	a597      	add	r5, pc, #604	@ (adr r5, 800d598 <atan+0x298>)
 800d33a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d33e:	ec45 4b10 	vmov	d0, r4, r5
 800d342:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d346:	4bb2      	ldr	r3, [pc, #712]	@ (800d610 <atan+0x310>)
 800d348:	429e      	cmp	r6, r3
 800d34a:	d813      	bhi.n	800d374 <atan+0x74>
 800d34c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800d350:	429e      	cmp	r6, r3
 800d352:	d80c      	bhi.n	800d36e <atan+0x6e>
 800d354:	a392      	add	r3, pc, #584	@ (adr r3, 800d5a0 <atan+0x2a0>)
 800d356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d35a:	4620      	mov	r0, r4
 800d35c:	4629      	mov	r1, r5
 800d35e:	f7f2 ff95 	bl	800028c <__adddf3>
 800d362:	4bac      	ldr	r3, [pc, #688]	@ (800d614 <atan+0x314>)
 800d364:	2200      	movs	r2, #0
 800d366:	f7f3 fbd7 	bl	8000b18 <__aeabi_dcmpgt>
 800d36a:	2800      	cmp	r0, #0
 800d36c:	d1e7      	bne.n	800d33e <atan+0x3e>
 800d36e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d372:	e029      	b.n	800d3c8 <atan+0xc8>
 800d374:	f000 f95c 	bl	800d630 <fabs>
 800d378:	4ba7      	ldr	r3, [pc, #668]	@ (800d618 <atan+0x318>)
 800d37a:	429e      	cmp	r6, r3
 800d37c:	ec55 4b10 	vmov	r4, r5, d0
 800d380:	f200 80bc 	bhi.w	800d4fc <atan+0x1fc>
 800d384:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800d388:	429e      	cmp	r6, r3
 800d38a:	f200 809e 	bhi.w	800d4ca <atan+0x1ca>
 800d38e:	4622      	mov	r2, r4
 800d390:	462b      	mov	r3, r5
 800d392:	4620      	mov	r0, r4
 800d394:	4629      	mov	r1, r5
 800d396:	f7f2 ff79 	bl	800028c <__adddf3>
 800d39a:	4b9e      	ldr	r3, [pc, #632]	@ (800d614 <atan+0x314>)
 800d39c:	2200      	movs	r2, #0
 800d39e:	f7f2 ff73 	bl	8000288 <__aeabi_dsub>
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	4606      	mov	r6, r0
 800d3a6:	460f      	mov	r7, r1
 800d3a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	4629      	mov	r1, r5
 800d3b0:	f7f2 ff6c 	bl	800028c <__adddf3>
 800d3b4:	4602      	mov	r2, r0
 800d3b6:	460b      	mov	r3, r1
 800d3b8:	4630      	mov	r0, r6
 800d3ba:	4639      	mov	r1, r7
 800d3bc:	f7f3 fa46 	bl	800084c <__aeabi_ddiv>
 800d3c0:	f04f 0a00 	mov.w	sl, #0
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	460d      	mov	r5, r1
 800d3c8:	4622      	mov	r2, r4
 800d3ca:	462b      	mov	r3, r5
 800d3cc:	4620      	mov	r0, r4
 800d3ce:	4629      	mov	r1, r5
 800d3d0:	f7f3 f912 	bl	80005f8 <__aeabi_dmul>
 800d3d4:	4602      	mov	r2, r0
 800d3d6:	460b      	mov	r3, r1
 800d3d8:	4680      	mov	r8, r0
 800d3da:	4689      	mov	r9, r1
 800d3dc:	f7f3 f90c 	bl	80005f8 <__aeabi_dmul>
 800d3e0:	a371      	add	r3, pc, #452	@ (adr r3, 800d5a8 <atan+0x2a8>)
 800d3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e6:	4606      	mov	r6, r0
 800d3e8:	460f      	mov	r7, r1
 800d3ea:	f7f3 f905 	bl	80005f8 <__aeabi_dmul>
 800d3ee:	a370      	add	r3, pc, #448	@ (adr r3, 800d5b0 <atan+0x2b0>)
 800d3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f4:	f7f2 ff4a 	bl	800028c <__adddf3>
 800d3f8:	4632      	mov	r2, r6
 800d3fa:	463b      	mov	r3, r7
 800d3fc:	f7f3 f8fc 	bl	80005f8 <__aeabi_dmul>
 800d400:	a36d      	add	r3, pc, #436	@ (adr r3, 800d5b8 <atan+0x2b8>)
 800d402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d406:	f7f2 ff41 	bl	800028c <__adddf3>
 800d40a:	4632      	mov	r2, r6
 800d40c:	463b      	mov	r3, r7
 800d40e:	f7f3 f8f3 	bl	80005f8 <__aeabi_dmul>
 800d412:	a36b      	add	r3, pc, #428	@ (adr r3, 800d5c0 <atan+0x2c0>)
 800d414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d418:	f7f2 ff38 	bl	800028c <__adddf3>
 800d41c:	4632      	mov	r2, r6
 800d41e:	463b      	mov	r3, r7
 800d420:	f7f3 f8ea 	bl	80005f8 <__aeabi_dmul>
 800d424:	a368      	add	r3, pc, #416	@ (adr r3, 800d5c8 <atan+0x2c8>)
 800d426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d42a:	f7f2 ff2f 	bl	800028c <__adddf3>
 800d42e:	4632      	mov	r2, r6
 800d430:	463b      	mov	r3, r7
 800d432:	f7f3 f8e1 	bl	80005f8 <__aeabi_dmul>
 800d436:	a366      	add	r3, pc, #408	@ (adr r3, 800d5d0 <atan+0x2d0>)
 800d438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d43c:	f7f2 ff26 	bl	800028c <__adddf3>
 800d440:	4642      	mov	r2, r8
 800d442:	464b      	mov	r3, r9
 800d444:	f7f3 f8d8 	bl	80005f8 <__aeabi_dmul>
 800d448:	a363      	add	r3, pc, #396	@ (adr r3, 800d5d8 <atan+0x2d8>)
 800d44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d44e:	4680      	mov	r8, r0
 800d450:	4689      	mov	r9, r1
 800d452:	4630      	mov	r0, r6
 800d454:	4639      	mov	r1, r7
 800d456:	f7f3 f8cf 	bl	80005f8 <__aeabi_dmul>
 800d45a:	a361      	add	r3, pc, #388	@ (adr r3, 800d5e0 <atan+0x2e0>)
 800d45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d460:	f7f2 ff12 	bl	8000288 <__aeabi_dsub>
 800d464:	4632      	mov	r2, r6
 800d466:	463b      	mov	r3, r7
 800d468:	f7f3 f8c6 	bl	80005f8 <__aeabi_dmul>
 800d46c:	a35e      	add	r3, pc, #376	@ (adr r3, 800d5e8 <atan+0x2e8>)
 800d46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d472:	f7f2 ff09 	bl	8000288 <__aeabi_dsub>
 800d476:	4632      	mov	r2, r6
 800d478:	463b      	mov	r3, r7
 800d47a:	f7f3 f8bd 	bl	80005f8 <__aeabi_dmul>
 800d47e:	a35c      	add	r3, pc, #368	@ (adr r3, 800d5f0 <atan+0x2f0>)
 800d480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d484:	f7f2 ff00 	bl	8000288 <__aeabi_dsub>
 800d488:	4632      	mov	r2, r6
 800d48a:	463b      	mov	r3, r7
 800d48c:	f7f3 f8b4 	bl	80005f8 <__aeabi_dmul>
 800d490:	a359      	add	r3, pc, #356	@ (adr r3, 800d5f8 <atan+0x2f8>)
 800d492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d496:	f7f2 fef7 	bl	8000288 <__aeabi_dsub>
 800d49a:	4632      	mov	r2, r6
 800d49c:	463b      	mov	r3, r7
 800d49e:	f7f3 f8ab 	bl	80005f8 <__aeabi_dmul>
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	460b      	mov	r3, r1
 800d4a6:	4640      	mov	r0, r8
 800d4a8:	4649      	mov	r1, r9
 800d4aa:	f7f2 feef 	bl	800028c <__adddf3>
 800d4ae:	4622      	mov	r2, r4
 800d4b0:	462b      	mov	r3, r5
 800d4b2:	f7f3 f8a1 	bl	80005f8 <__aeabi_dmul>
 800d4b6:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	460b      	mov	r3, r1
 800d4be:	d148      	bne.n	800d552 <atan+0x252>
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	4629      	mov	r1, r5
 800d4c4:	f7f2 fee0 	bl	8000288 <__aeabi_dsub>
 800d4c8:	e72f      	b.n	800d32a <atan+0x2a>
 800d4ca:	4b52      	ldr	r3, [pc, #328]	@ (800d614 <atan+0x314>)
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	4620      	mov	r0, r4
 800d4d0:	4629      	mov	r1, r5
 800d4d2:	f7f2 fed9 	bl	8000288 <__aeabi_dsub>
 800d4d6:	4b4f      	ldr	r3, [pc, #316]	@ (800d614 <atan+0x314>)
 800d4d8:	4606      	mov	r6, r0
 800d4da:	460f      	mov	r7, r1
 800d4dc:	2200      	movs	r2, #0
 800d4de:	4620      	mov	r0, r4
 800d4e0:	4629      	mov	r1, r5
 800d4e2:	f7f2 fed3 	bl	800028c <__adddf3>
 800d4e6:	4602      	mov	r2, r0
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	4630      	mov	r0, r6
 800d4ec:	4639      	mov	r1, r7
 800d4ee:	f7f3 f9ad 	bl	800084c <__aeabi_ddiv>
 800d4f2:	f04f 0a01 	mov.w	sl, #1
 800d4f6:	4604      	mov	r4, r0
 800d4f8:	460d      	mov	r5, r1
 800d4fa:	e765      	b.n	800d3c8 <atan+0xc8>
 800d4fc:	4b47      	ldr	r3, [pc, #284]	@ (800d61c <atan+0x31c>)
 800d4fe:	429e      	cmp	r6, r3
 800d500:	d21c      	bcs.n	800d53c <atan+0x23c>
 800d502:	4b47      	ldr	r3, [pc, #284]	@ (800d620 <atan+0x320>)
 800d504:	2200      	movs	r2, #0
 800d506:	4620      	mov	r0, r4
 800d508:	4629      	mov	r1, r5
 800d50a:	f7f2 febd 	bl	8000288 <__aeabi_dsub>
 800d50e:	4b44      	ldr	r3, [pc, #272]	@ (800d620 <atan+0x320>)
 800d510:	4606      	mov	r6, r0
 800d512:	460f      	mov	r7, r1
 800d514:	2200      	movs	r2, #0
 800d516:	4620      	mov	r0, r4
 800d518:	4629      	mov	r1, r5
 800d51a:	f7f3 f86d 	bl	80005f8 <__aeabi_dmul>
 800d51e:	4b3d      	ldr	r3, [pc, #244]	@ (800d614 <atan+0x314>)
 800d520:	2200      	movs	r2, #0
 800d522:	f7f2 feb3 	bl	800028c <__adddf3>
 800d526:	4602      	mov	r2, r0
 800d528:	460b      	mov	r3, r1
 800d52a:	4630      	mov	r0, r6
 800d52c:	4639      	mov	r1, r7
 800d52e:	f7f3 f98d 	bl	800084c <__aeabi_ddiv>
 800d532:	f04f 0a02 	mov.w	sl, #2
 800d536:	4604      	mov	r4, r0
 800d538:	460d      	mov	r5, r1
 800d53a:	e745      	b.n	800d3c8 <atan+0xc8>
 800d53c:	4622      	mov	r2, r4
 800d53e:	462b      	mov	r3, r5
 800d540:	4938      	ldr	r1, [pc, #224]	@ (800d624 <atan+0x324>)
 800d542:	2000      	movs	r0, #0
 800d544:	f7f3 f982 	bl	800084c <__aeabi_ddiv>
 800d548:	f04f 0a03 	mov.w	sl, #3
 800d54c:	4604      	mov	r4, r0
 800d54e:	460d      	mov	r5, r1
 800d550:	e73a      	b.n	800d3c8 <atan+0xc8>
 800d552:	4b35      	ldr	r3, [pc, #212]	@ (800d628 <atan+0x328>)
 800d554:	4e35      	ldr	r6, [pc, #212]	@ (800d62c <atan+0x32c>)
 800d556:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55e:	f7f2 fe93 	bl	8000288 <__aeabi_dsub>
 800d562:	4622      	mov	r2, r4
 800d564:	462b      	mov	r3, r5
 800d566:	f7f2 fe8f 	bl	8000288 <__aeabi_dsub>
 800d56a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d56e:	4602      	mov	r2, r0
 800d570:	460b      	mov	r3, r1
 800d572:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d576:	f7f2 fe87 	bl	8000288 <__aeabi_dsub>
 800d57a:	f1bb 0f00 	cmp.w	fp, #0
 800d57e:	4604      	mov	r4, r0
 800d580:	460d      	mov	r5, r1
 800d582:	f6bf aedc 	bge.w	800d33e <atan+0x3e>
 800d586:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d58a:	461d      	mov	r5, r3
 800d58c:	e6d7      	b.n	800d33e <atan+0x3e>
 800d58e:	a51c      	add	r5, pc, #112	@ (adr r5, 800d600 <atan+0x300>)
 800d590:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d594:	e6d3      	b.n	800d33e <atan+0x3e>
 800d596:	bf00      	nop
 800d598:	54442d18 	.word	0x54442d18
 800d59c:	3ff921fb 	.word	0x3ff921fb
 800d5a0:	8800759c 	.word	0x8800759c
 800d5a4:	7e37e43c 	.word	0x7e37e43c
 800d5a8:	e322da11 	.word	0xe322da11
 800d5ac:	3f90ad3a 	.word	0x3f90ad3a
 800d5b0:	24760deb 	.word	0x24760deb
 800d5b4:	3fa97b4b 	.word	0x3fa97b4b
 800d5b8:	a0d03d51 	.word	0xa0d03d51
 800d5bc:	3fb10d66 	.word	0x3fb10d66
 800d5c0:	c54c206e 	.word	0xc54c206e
 800d5c4:	3fb745cd 	.word	0x3fb745cd
 800d5c8:	920083ff 	.word	0x920083ff
 800d5cc:	3fc24924 	.word	0x3fc24924
 800d5d0:	5555550d 	.word	0x5555550d
 800d5d4:	3fd55555 	.word	0x3fd55555
 800d5d8:	2c6a6c2f 	.word	0x2c6a6c2f
 800d5dc:	bfa2b444 	.word	0xbfa2b444
 800d5e0:	52defd9a 	.word	0x52defd9a
 800d5e4:	3fadde2d 	.word	0x3fadde2d
 800d5e8:	af749a6d 	.word	0xaf749a6d
 800d5ec:	3fb3b0f2 	.word	0x3fb3b0f2
 800d5f0:	fe231671 	.word	0xfe231671
 800d5f4:	3fbc71c6 	.word	0x3fbc71c6
 800d5f8:	9998ebc4 	.word	0x9998ebc4
 800d5fc:	3fc99999 	.word	0x3fc99999
 800d600:	54442d18 	.word	0x54442d18
 800d604:	bff921fb 	.word	0xbff921fb
 800d608:	440fffff 	.word	0x440fffff
 800d60c:	7ff00000 	.word	0x7ff00000
 800d610:	3fdbffff 	.word	0x3fdbffff
 800d614:	3ff00000 	.word	0x3ff00000
 800d618:	3ff2ffff 	.word	0x3ff2ffff
 800d61c:	40038000 	.word	0x40038000
 800d620:	3ff80000 	.word	0x3ff80000
 800d624:	bff00000 	.word	0xbff00000
 800d628:	0800dd10 	.word	0x0800dd10
 800d62c:	0800dd30 	.word	0x0800dd30

0800d630 <fabs>:
 800d630:	ec51 0b10 	vmov	r0, r1, d0
 800d634:	4602      	mov	r2, r0
 800d636:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d63a:	ec43 2b10 	vmov	d0, r2, r3
 800d63e:	4770      	bx	lr

0800d640 <_init>:
 800d640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d642:	bf00      	nop
 800d644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d646:	bc08      	pop	{r3}
 800d648:	469e      	mov	lr, r3
 800d64a:	4770      	bx	lr

0800d64c <_fini>:
 800d64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d64e:	bf00      	nop
 800d650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d652:	bc08      	pop	{r3}
 800d654:	469e      	mov	lr, r3
 800d656:	4770      	bx	lr
